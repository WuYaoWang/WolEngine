unit M2Share;

interface
uses
  Windows, Messages, Classes, SysUtils, StdCtrls, Graphics, RunSock, Envir, ItmUnit, Magic, NoticeM, Guild, Event,
  Castle, FrnEngn, UsrEngn, Mudutil, Grobal2, ObjBase,untTQQWry, ObjRobot, ObjNpc, SyncObjs, IniFiles, PlugIn, EncryptUnit, WinSock ;
resourcestring
  g_sTitleName = 'c_BhLN6UNC`=G+TB=GHB';
  g_sProductName = '';
  g_sVersion = '';

  g_sProgram = '';
  g_sWebSite = '';
  g_sBbsSite = '';
const

  DEBUG = 0; //调试模式=1   发行模式=0
  CHECKNEWMSG = 0; //是否显示未处理的客户端消息

  NOEXCEPTION = 0;
  TRYEXCEPTION = 1;
  CATEXCEPTION = TRYEXCEPTION;

  DEMOCLIENT = 0; //是否演示客户端

  VERDEMO = 0;
  VERFREE = 1;
  VERSTD = 2;
  VEROEM = 3;
  VERPRO = 4;
  VERENT = 5;
  VerWD=1;
  

  SoftVersion = VERSTD; //正式版本
  //SoftVersion = VERDEMO; //演示版本

  BDE = 0;
  ADO = 1;

  DBTYPE = BDE;


  USELOCALCODE = 0;
  USEREMOTECODE = 1;

  USECODE = USELOCALCODE;
  RequestVersion = 5;

  OEM = 0;
  OEM775 = 1;
  OEMVER = OEM;

  ENDYEAR = 2012;
  ENDMONTH = 12;
  ENDDAY = 31;
  {$IF VerWD=0}
  sENCYPTSCRIPTFLAG = ';WOL2008_EnCyptScrip';
   {$IFEND}
  {$IF VerWD=1}
  sENCYPTSCRIPTFLAG = ';King_EnCyptScrip';
   {$IFEND}
  OLDMONSTERMODE = 0;
  NEWMONSTERMODE = 1;
  PROCESSMONSTMODE = NEWMONSTERMODE; //处理怪物模式

  THREADENGINE = 0; //DB数据库SOCKET连接使用线程
  TIMERENGINE = 1; //DB数据库SOCKET连接使用控件
  DBSOCKETMODE = TIMERENGINE;
  IDSOCKETMODE = TIMERENGINE;
  USERENGINEMODE = TIMERENGINE;

  CHECKENDYEAR = ENDYEAR;
  CHECKENDMONTH = ENDMONTH;
  CHECKENDDAY = ENDDAY;

//最高可升级等级

  MAXUPLEVEL = High(Word) {65535};
  MAXHUMPOWER = High(Word) {65535};




  BODYLUCKUNIT = 5.0E3;



  HAM_ALL = 0;
  HAM_PEACE = 1;
  HAM_DEAR = 2;
  HAM_MASTER = 3;
  HAM_GROUP = 4;
  HAM_GUILD = 5;
  HAM_PKATTACK = 6;

  DEFHIT = 10; //5
  DEFSPEED = 15;
  WARR = 0;
  WIZARD = 1;
  TAOS = 2;



  SIZEOFTHUMAN = $C5C;

  MONSTER_SANDMOB = 3;
  MONSTER_ROCKMAN = 4;
  MONSTER_RON = 9;
  MONSTER_MINORNUMA = 18;
  ANIMAL_CHICKEN = 20;
  ANIMAL_DEER = 21;
  MONSTER_OMA = 23;
  MONSTER_OMAKNIGHT = 25;
  MONSTER_OMAWARRIOR = 27;
  MONSTER_SPITSPIDER = 30;
  MONSTER_STICK = 39;
  MONSTER_DUALAXE = 42;
  MONSTER_THONEDARK = 74;
  MONSTER_LIGHTZOMBI = 78;
  MONSTER_WHITESKELETON = 94;
  MONSTER_BEEQUEEN = 124;
  MONSTER_BEE = 125;
  MONSTER_MAGUNGSA = 143;
  MONSTER_SCULTURE1 = 145;
  MONSTER_SCULTURE2 = 148;
  MONSTER_SCULTUREKING = 152;
  MONSTER_ELFMONSTER = 161;
  MONSTER_ELFWARRIOR = 162;

  SUPREGUARD = 11;
  CHICKEN = 51;
  DEER = 52;
  WOLF = 53;
  TRAINER = 55;

  sMAN = 'MAN';
  sSUNRAISE = 'SUNRAISE';
  sDAY = 'DAY';
  sSUNSET = 'SUNSET';
  sNIGHT = 'NIGHT';
  sWARRIOR = 'WARRIOR';
  sWIZARD = 'WIZARD';
  sTAOS = 'TAOIST';
  sSUN = 'SUN';
  sMON = 'MON';
  sTUE = 'TUE';
  sWED = 'WED';
  sTHU = 'THU';
  sFRI = 'FRI';
  sSAT = 'SAT';

//脚本常量
  sCHECK = 'CHECK';
  nCHECK = 1;
  sRANDOM = 'RANDOM';
  nRANDOM = 2;
  sGENDER = 'GENDER';
  nGENDER = 3;
  sDAYTIME = 'DAYTIME';
  nDAYTIME = 4;
  sCHECKOPEN = 'CHECKOPEN';
  nCHECKOPEN = 5;
  sCHECKUNIT = 'CHECKUNIT';
  nCHECKUNIT = 6;
  sCHECKLEVEL = 'CHECKLEVEL';
  nCHECKLEVEL = 7;
  sCHECKJOB = 'CHECKJOB';
  nCHECKJOB = 8;
  sCHECKBBCOUNT = 'CHECKBBCOUNT';
  nCHECKBBCOUNT = 9;

  sCHECKITEM = 'CHECKITEM';
  nCHECKITEM = 20;
  sCHECKITEMW = 'CHECKITEMW';
  nCHECKITEMW = 21;
  sCHECKGOLD = 'CHECKGOLD';
  nCHECKGOLD = 22;
  sISTAKEITEM = 'ISTAKEITEM';
  nISTAKEITEM = 23;
  sCHECKDURA = 'CHECKDURA';
  nCHECKDURA = 24;
  sCHECKDURAEVA = 'CHECKDURAEVA';
  nCHECKDURAEVA = 25;
  sDAYOFWEEK = 'DAYOFWEEK';
  nDAYOFWEEK = 26;
  sHOUR = 'HOUR';
  nHOUR = 27;
  sMIN = 'MIN';
  nMIN = 28;
  sCHECKPKPOINT = 'CHECKPKPOINT';
  nCHECKPKPOINT = 29;
  sCHECKLUCKYPOINT = 'CHECKLUCKYPOINT';
  nCHECKLUCKYPOINT = 30;
  sCHECKMONMAP = 'CHECKMONMAP';
  nCHECKMONMAP = 31;
  sCHECKMONAREA = 'CHECKMONAREA';
  nCHECKMONAREA = 32;
  sCHECKHUM = 'CHECKHUM';
  nCHECKHUM = 33;
  sCHECKBAGGAGE = 'CHECKBAGGAGE';
  nCHECKBAGGAGE = 34;

  sEQUAL = 'EQUAL';
  nEQUAL = 35;
  sLARGE = 'LARGE';
  nLARGE = 36;
  sSMALL = 'SMALL';
  nSMALL = 37;
  sSC_CHECKMAGIC = 'CHECKMAGIC';
  nSC_CHECKMAGIC = 38;
  sSC_CHKMAGICLEVEL = 'CHKMAGICLEVEL';
  nSC_CHKMAGICLEVEL = 39;
  sSC_CHECKMONRECALL = 'CHECKMONRECALL';
  nSC_CHECKMONRECALL = 40;
  sSC_CHECKHORSE = 'CHECKHORSE';
  nSC_CHECKHORSE = 41;
  sSC_CHECKRIDING = 'CHECKRIDING';
  nSC_CHECKRIDING = 42;
  sSC_STARTDAILYQUEST = 'STARTDAILYQUEST';
  nSC_STARTDAILYQUEST = 45;
  sSC_CHECKDAILYQUEST = 'CHECKDAILYQUEST';
  nSC_CHECKDAILYQUEST = 46;
  sSC_RANDOMEX = 'RANDOMEX';
  nSC_RANDOMEX = 47;
  sCHECKNAMELIST = 'CHECKNAMELIST';
  nCHECKNAMELIST = 48;
  sSC_CHECKWEAPONLEVEL = 'CHECKWEAPONLEVEL';
  nSC_CHECKWEAPONLEVEL = 49;
  sSC_CHECKWEAPONATOM = 'CHECKWEAPONATOM';
  nSC_CHECKWEAPONATOM = 50;
  sSC_CHECKREFINEWEAPON = 'CHECKREFINEWEAPON';
  nSC_CHECKREFINEWEAPON = 51;
  sSC_CHECKWEAPONMCTYPE = 'CHECKWEAPONMCTYPE';
  nSC_CHECKWEAPONMCTYPE = 52;
  sSC_CHECKREFINEITEM = 'CHECKREFINEITEM';
  nSC_CHECKREFINEITEM = 53;
  sSC_HASWEAPONATOM = 'HASWEAPONATOM';
  nSC_HASWEAPONATOM = 54;

  sSC_ISGUILDMASTER = 'ISGUILDMASTER';
  nSC_ISGUILDMASTER = 55;
  sSC_CANPROPOSECASTLEWAR = 'CANPROPOSECASTLEWAR';
  nSC_CANPROPOSECASTLEWAR = 56;
  sSC_CANHAVESHOOTER = 'CANHAVESHOOTER';
  nSC_CANHAVESHOOTER = 57;
  sSC_CHECKFAME = 'CHECKFAME';
  nSC_CHECKFAME = 58;
  sSC_ISONCASTLEWAR = 'ISONCASTLEWAR';
  nSC_ISONCASTLEWAR = 59;
  sSC_ISONREADYCASTLEWAR = 'ISONREADYCASTLEWAR';
  nSC_ISONREADYCASTLEWAR = 60;
  sSC_ISCASTLEGUILD = 'ISCASTLEGUILD';
  nSC_ISCASTLEGUILD = 61;
  sSC_ISATTACKGUILD = 'ISATTACKGUILD'; //是否为攻城方
  nSC_ISATTACKGUILD = 63;
  sSC_ISDEFENSEGUILD = 'ISDEFENSEGUILD'; //是否为守城方
  nSC_ISDEFENSEGUILD = 65;
  sSC_CHECKSHOOTER = 'CHECKSHOOTER';
  nSC_CHECKSHOOTER = 66;
  sSC_CHECKSAVEDSHOOTER = 'CHECKSAVEDSHOOTER';
  nSC_CHECKSAVEDSHOOTER = 67;
  sSC_HASGUILD = 'HAVEGUILD'; //是否加入行会
  nSC_HASGUILD = 68;
  sSC_CHECKCASTLEDOOR = 'CHECKCASTLEDOOR'; //检查城门
  nSC_CHECKCASTLEDOOR = 69;
  sSC_CHECKCASTLEDOOROPEN = 'CHECKCASTLEDOOROPEN'; //城门是否打开
  nSC_CHECKCASTLEDOOROPEN = 70;
  sSC_CHECKPOS = 'CHECKPOS';
  nSC_CHECKPOS = 71;
  sSC_CANCHARGESHOOTER = 'CANCHARGESHOOTER';
  nSC_CANCHARGESHOOTER = 72;
  sSC_ISATTACKALLYGUILD = 'ISATTACKALLYGUILD'; //是否为攻城方联盟行会
  nSC_ISATTACKALLYGUILD = 73;
  sSC_ISDEFENSEALLYGUILD = 'ISDEFENSEALLYGUILD'; //是否为守城方联盟行会
  nSC_ISDEFENSEALLYGUILD = 74;
  sSC_TESTTEAM = 'TESTTEAM';
  nSC_TESTTEAM = 75;
  sSC_ISSYSOP = 'ISSYSOP';
  nSC_ISSYSOP = 76;
  sSC_ISADMIN = 'ISADMIN';
  nSC_ISADMIN = 77;
  sSC_CHECKBONUS = 'CHECKBONUS';
  nSC_CHECKBONUS = 78;
  sSC_CHECKMARRIAGE = 'CHECKMARRIAGE';
  nSC_CHECKMARRIAGE = 79;
  sSC_CHECKMARRIAGERING = 'CHECKMARRIAGERING';
  nSC_CHECKMARRIAGERING = 80;

  sSC_CHECKGMETERM = 'CHECKGMETERM';
  nSC_CHECKGMETERM = 100;
  sSC_CHECKOPENGME = 'CHECKOPENGME';
  nSC_CHECKOPENGME = 101;
  sSC_CHECKENTERGMEMAP = 'CHECKENTERGMEMAP';
  nSC_CHECKENTERGMEMAP = 102;
  sSC_CHECKSERVER = 'CHECKSERVER';
  nSC_CHECKSERVER = 103;
  sSC_ELARGE = 'ELARGE';
  nSC_ELARGE = 104;
  sSC_ESMALL = 'ESMALL';
  nSC_ESMALL = 105;
  sSC_CHECKGROUPCOUNT = 'CHECKGROUPCOUNT';
  nSC_CHECKGROUPCOUNT = 106;
  sSC_CHECKACCESSORY = 'CHECKACCESSORY';
  nSC_CHECKACCESSORY = 107;
  sSC_ONERROR = 'ONERROR';
  nSC_ONERROR = 108;
  sSC_CHECKARMOR = 'CHECKARMOR';
  nSC_CHECKARMOR = 109;





  sCHECKACCOUNTLIST = 'CHECKACCOUNTLIST';
  nCHECKACCOUNTLIST = 135;
  sCHECKIPLIST = 'CHECKIPLIST';
  nCHECKIPLIST = 136;
  sCHECKCREDITPOINT = 'CHECKCREDITPOINT';
  nCHECKCREDITPOINT = 137;
  sSC_CHECKPOSEDIR = 'CHECKPOSEDIR';
  nSC_CHECKPOSEDIR = 138;
  sSC_CHECKPOSELEVEL = 'CHECKPOSELEVEL';
  nSC_CHECKPOSELEVEL = 139;
  sSC_CHECKPOSEGENDER = 'CHECKPOSEGENDER';
  nSC_CHECKPOSEGENDER = 140;
  sSC_CHECKLEVELEX = 'CHECKLEVELEX';
  nSC_CHECKLEVELEX = 141;
  sSC_CHECKBONUSPOINT = 'CHECKBONUSPOINT';
  nSC_CHECKBONUSPOINT = 142;
  sSC_CHECKMARRY = 'CHECKMARRY';
  nSC_CHECKMARRY = 143;
  sSC_CHECKPOSEMARRY = 'CHECKPOSEMARRY';
  nSC_CHECKPOSEMARRY = 144;
  sSC_CHECKMARRYCOUNT = 'CHECKMARRYCOUNT';
  nSC_CHECKMARRYCOUNT = 145;
  sSC_CHECKMASTER = 'CHECKMASTER';
  nSC_CHECKMASTER = 146;
  sSC_HAVEMASTER = 'HAVEMASTER';
  nSC_HAVEMASTER = 147;
  sSC_CHECKPOSEMASTER = 'CHECKPOSEMASTER';
  nSC_CHECKPOSEMASTER = 148;
  sSC_POSEHAVEMASTER = 'POSEHAVEMASTER';
  nSC_POSEHAVEMASTER = 149;
  sSC_CHECKISMASTER = 'CHECKPOSEISMASTER';
  nSC_CHECKISMASTER = 150;
  sSC_CHECKPOSEISMASTER = 'CHECKISMASTER';
  nSC_CHECKPOSEISMASTER = 151;
  sSC_CHECKNAMEIPLIST = 'CHECKNAMEIPLIST';
  nSC_CHECKNAMEIPLIST = 152;
  sSC_CHECKACCOUNTIPLIST = 'CHECKACCOUNTIPLIST';
  nSC_CHECKACCOUNTIPLIST = 153;
  sSC_CHECKSLAVECOUNT = 'CHECKSLAVECOUNT';
  nSC_CHECKSLAVECOUNT = 154;
  sSC_CHECKCASTLEMASTER = 'ISCASTLEMASTER';
  nSC_CHECKCASTLEMASTER = 155;
  sSC_ISNEWHUMAN = 'ISNEWHUMAN'; //检测是否新人
  nSC_ISNEWHUMAN = 156;
  sSC_CHECKMEMBERTYPE = 'CHECKMEMBERTYPE';
  nSC_CHECKMEMBERTYPE = 157;
  sSC_CHECKMEMBERLEVEL = 'CHECKMEMBERLEVEL';
  nSC_CHECKMEMBERLEVEL = 158;
  sSC_CHECKGAMEGOLD = 'CHECKGAMEGOLD';
  nSC_CHECKGAMEGOLD = 159;
  sSC_CHECKGAMEPOINT = 'CHECKGAMEPOINT';
  nSC_CHECKGAMEPOINT = 160;

  sSC_CHECKNAMELISTPOSITION = 'CHECKNAMELISTPOSITION';
  nSC_CHECKNAMELISTPOSITION = 161;
  sSC_CHECKGUILDLIST = 'CHECKGUILDLIST';
  nSC_CHECKGUILDLIST = 162;
  sSC_CHECKRENEWLEVEL = 'CHECKRENEWLEVEL'; //检查人物的转生等级
  nSC_CHECKRENEWLEVEL = 163;

  sSC_CHECKSLAVELEVEL = 'CHECKSLAVELEVEL'; //检查宝宝的等级
  nSC_CHECKSLAVELEVEL = 164;
  sSC_CHECKSLAVENAME = 'CHECKSLAVENAME';  //检测宝宝名称
  nSC_CHECKSLAVENAME = 165;

  sSC_CHECKCREDITPOINT = 'CHECKCREDITPOINT';//检查人物声望点

  nSC_CHECKCREDITPOINT = 166;

  sSC_CHECKOFGUILD = 'CHECKOFGUILD'; //当前人物是否该行会成员
  nSC_CHECKOFGUILD = 167;
  sSC_CHECKPAYMENT = 'CHECKPAYMENT';  //检查人物是否付费
  nSC_CHECKPAYMENT = 168;
  sSC_CHECKUSEITEM = 'CHECKUSEITEM'; //检查人物身上指定位置是否戴物品

  nSC_CHECKUSEITEM = 169;
  sSC_CHECKBAGSIZE = 'CHECKBAGSIZE'; //检查人物背包空格数

  nSC_CHECKBAGSIZE = 170;
  sSC_CHECKLISTCOUNT = 'CHECKLISTCOUNT';
  nSC_CHECKLISTCOUNT = 171;
  sSC_CHECKDC = 'CHECKDC';   //控制符(<、>、 =) 攻击下限 控制符(<、>、 =) 攻击上限 用来检查人物攻击力的上限及下限值
  nSC_CHECKDC = 172;
  sSC_CHECKMC = 'CHECKMC';
  nSC_CHECKMC = 173;
  sSC_CHECKSC = 'CHECKSC';
  nSC_CHECKSC = 174;
  sSC_CHECKHP = 'CHECKHP';
  nSC_CHECKHP = 175;
  sSC_CHECKMP = 'CHECKMP';
  nSC_CHECKMP = 176;

  sSC_CHECKITEMTYPE = 'CHECKITEMTYPE';
  nSC_CHECKITEMTYPE = 180;
  sSC_CHECKEXP = 'CHECKEXP';
  nSC_CHECKEXP = 181;
  sSC_CHECKCASTLEGOLD = 'CHECKCASTLEGOLD';
  nSC_CHECKCASTLEGOLD = 182;

  sSC_PASSWORDERRORCOUNT = 'PASSWORDERRORCOUNT';
  nSC_PASSWORDERRORCOUNT = 183;
  sSC_ISLOCKPASSWORD = 'ISLOCKPASSWORD';   //检查仓库是否设置密码

  nSC_ISLOCKPASSWORD = 184;
  sSC_ISLOCKSTORAGE = 'ISLOCKSTORAGE';     //检查仓库是否锁定
  nSC_ISLOCKSTORAGE = 185;


  sSC_CHECKBUILDPOINT = 'CHECKGUILDBUILDPOINT';
  nSC_CHECKBUILDPOINT = 186;
  sSC_CHECKAURAEPOINT = 'CHECKGUILDAURAEPOINT';
  nSC_CHECKAURAEPOINT = 187;
  sSC_CHECKSTABILITYPOINT = 'CHECKGUILDSTABILITYPOINT';
  nSC_CHECKSTABILITYPOINT = 188;
  sSC_CHECKFLOURISHPOINT = 'CHECKGUILDFLOURISHPOINT';
  nSC_CHECKFLOURISHPOINT = 189;

  sSC_CHECKCONTRIBUTION = 'CHECKCONTRIBUTION'; //贡献度
  nSC_CHECKCONTRIBUTION = 190;
  sSC_CHECKRANGEMONCOUNT = 'CHECKRANGEMONCOUNT'; //检查一个区域中有多少怪
  nSC_CHECKRANGEMONCOUNT = 191;

  sSC_CHECKITEMADDVALUE = 'CHECKITEMADDVALUE';  //检查身上装备总的附加值
  nSC_CHECKITEMADDVALUE = 192;
  sSC_CHECKINMAPRANGE = 'CHECKINMAPRANGE';    //检查是否在地图(X,Y)范围range内
  nSC_CHECKINMAPRANGE = 193;

  sSC_CASTLECHANGEDAY = 'CASTLECHANGEDAY';      //检查沙巴克占领天数
  nSC_CASTLECHANGEDAY = 194;
  sSC_CASTLEWARDAY = 'CASTLEWARAY';        //检查上次攻城到现在的天数:
  nSC_CASTLEWARDAY = 195;
  sSC_ONLINELONGMIN = 'ONLINELONGMIN';
  nSC_ONLINELONGMIN = 196;
  sSC_CHECKGUILDCHIEFITEMCOUNT = 'CHECKGUILDCHIEFITEMCOUNT';  //检查行会装备数量
  nSC_CHECKGUILDCHIEFITEMCOUNT = 197;

  sSC_CHECKNAMEDATELIST = 'CHECKNAMEDATELIST';
  nSC_CHECKNAMEDATELIST = 198;
  sSC_CHECKMAPHUMANCOUNT = 'MAPRANGEHUM';
  nSC_CHECKMAPHUMANCOUNT = 199;

  sSC_CHECKMAPMONCOUNT = 'CHECKMAPMONCOUNT';
  nSC_CHECKMAPMONCOUNT = 200;
  sSC_CHECKVAR = 'CHECKVAR';
  nSC_CHECKVAR = 201;
  sSC_CHECKSERVERNAME = 'CHECKSERVERNAME';
  nSC_CHECKSERVERNAME = 202;

  sSC_CHECKYEAR = 'CHECKYEAR';
  nSC_CHECKYEAR = 203;
  sSC_CHECKMONTH = 'CHECKMONTH';
  nSC_CHECKMONTH = 204;
  sSC_CHECKDAY = 'CHECKDAY';
  nSC_CHECKDAY = 205;
  sCHECKMAPNAME = 'CHECKMAPNAME'; //检查当前所在地图的名字
  nCHECKMAPNAME = 206;
  sCHECKJPPOINT = 'CHECKJPPOINT';   // 检查极品值
  nCHECKJPPOINT = 207;

  sCHECKYSPOINT = 'CHECKYSPOINT';
  nCHECKYSPOINT = 208;

  sTrue = 'TRUE';
  nTrue = 209;

  sCHECKITEMDARKPROPERTY = 'CHECKITEMDARKPROPERTY';
  nCHECKITEMDARKPROPERTY = 210;

  sCHECKUPGRADECOUNT='CHECKUPGRADECOUNT';
  nCHECKUPGRADECOUNT=211;
  //以下没有作
  sCHECKSKILL='CHECKSKILL';
  nCHECKSKILL = 212;



  sCheckCollectPoint ='CHECKCOLLECTPOINT';  //检测积分，数字支持变量
  nCheckCollectPoint =213;

  sCheckUserGap   = 'CHECKUSERGAP';
  nCheckUserGap   = 214;

    sISSHADOW           ='ISSHADOW';  // 检测当前执行脚本的对象是否元神;
  nISSHADOW           = 215;

  sCheckTaskStep  = 'CHECKTASKSTEP';
  nCheckTaskStep  = 216;

  sCheckMapMonNameCount ='CHECKMAPMONNAMECOUNT';
  nCheckMapMonNameCount= 217;

  sCheckGuildExp='CHECKGUILDEXP';
  nCheckGuildExp=218;

  sCheckGuildGrade='CHECKGUILDGRADE';
  nCheckGuildGrade=219;

  sCheckGuildMemberCount='CHECKGUILDMEMBERCOUNT';
  nCheckGuildMemberCount=220;

  sCheckGuildMemberMaxLimit='CHECKGUILDMEMBERLIMIT';
  nCheckGuildMemberMaxLimit=221;
  sCheckMapMonNameCountex ='CHECKMAPMONNAMECOUNTEX';
  nCheckMapMonNameCountex= 222;

  sCheckSignMap='CHECKSIGNMAP';
  nCheckSignMap=223;

  sCHECKITEMDURE='CHECKITEMDURE';
  nCHECKITEMDURE=224;

  sCompareText='COMPARETEXT';
  nCompareText=225;

  sPosEx='POSEX';
  nPosEx=226;
  scPos='POS';
  nPos=400;

  sPNEUMARELEASED='PNEUMARELEASED';  //判断元神是否释放
  nPNEUMARELEASED=227;

  sCHECKGEMCOUNT='CHECKGEMCOUNT';
  nCHECKGEMCOUNT=228;


  sCHECKPRENTICECOUNT='CHECKPRENTICECOUNT';
  nCHECKPRENTICECOUNT=229;

  sCHECKITEMID='CHECKITEMID';//CHECKITEMID A 检测包裹中是否存在指定ID的物品，A表示物品ID;
  nCHECKITEMID=230;

  sISPNEUMA='ISPNEUMA';
  nISPNEUMA=231;

  sIsInSafeZone='ISINSAFEZONE';
  nIsInSafeZone=232;

  sCHECKISFRIEND='CHECKISFRIEND';
  nCHECKISFRIEND=234;

  sCHECKMONPOS='CHECKMONPOS';
  nCHECKMONPOS=235;

  scheckclb = 'CHECKPETFOLLOW';
  ncheckclb = 390;
//Action
  sSET = 'SET';
  nSET = 1;
  sTAKE = 'TAKE';
  nTAKE = 2;
  sSC_GIVE = 'GIVE';
  nSC_GIVE = 3;
  sTAKEW = 'TAKEW';
  nTAKEW = 4;
  sCLOSE = 'CLOSE';
  nCLOSE = 5;
  sRESET = 'RESET';
  nRESET = 6;
  sSETOPEN = 'SETOPEN';
  nSETOPEN = 7;
  sSETUNIT = 'SETUNIT';
  nSETUNIT = 8;
  sRESETUNIT = 'RESETUNIT';
  nRESETUNIT = 9;
  sBREAK = 'BREAK';
  nBREAK = 10;
  sTIMERECALL = 'TIMERECALL';
  nTIMERECALL = 11;
  sSC_PARAM1 = 'PARAM1';
  nSC_PARAM1 = 12;
  sSC_PARAM2 = 'PARAM2';
  nSC_PARAM2 = 13;
  sSC_PARAM3 = 'PARAM3';
  nSC_PARAM3 = 14;
  sSC_PARAM4 = 'PARAM4';
  nSC_PARAM4 = 15;
  sSC_EXEACTION = 'EXEACTION';
  nSC_EXEACTION = 16;

  sMAPMOVE = 'MAPMOVE';
  nMAPMOVE = 19;
  sMAP = 'MAP';
  nMAP = 20;
  sTAKECHECKITEM = 'TAKECHECKITEM';
  nTAKECHECKITEM = 21;
  sMONGEN = 'MONGEN';
  nMONGEN = 22;
  sSC_MONGENP = 'MONGENP';
  nSC_MONGENP = 23;
  sMONCLEAR = 'MONCLEAR';
  nMONCLEAR = 24;
  sMOV = 'MOV';
  nMOV = 25;
  sINC = 'INC';
  nINC = 26;
  sDEC = 'DEC';
  nDEC = 27;
  sSUM = 'SUM';
  nSUM = 28;
  sSC_DIV = 'DIV';
  sSC_MUL = 'MUL';
  sSC_PERCENT = 'PERCENT';

  sBREAKTIMERECALL = 'BREAKTIMERECALL';
  nBREAKTIMERECALL = 29;
  sSENDMSG = 'SENDMSG';
  nSENDMSG = 30;
  sCHANGEMODE = 'CHANGEMODE';
  nCHANGEMODE = 31;
  sPKPOINT = 'PKPOINT';
  nPKPOINT = 32;
  sCHANGEXP = 'CHANGEXP';
  nCHANGEXP = 33;
  sSC_RECALLMOB = 'RECALLMOB';   //RECALLMOB 怪物名称 宝宝等级(最高为 7) 叛变时间(分钟) 是否自动变色（0、1）固定颜色（1-7）

  nSC_RECALLMOB = 34;
  sKICK = 'KICK';
  nKICK = 35;
  sMOVR = 'MOVR';
  nMOVR = 50;
  sEXCHANGEMAP = 'EXCHANGEMAP';
  nEXCHANGEMAP = 51;
  sRECALLMAP = 'RECALLMAP';
  nRECALLMAP = 52;
  sADDBATCH = 'ADDBATCH';
  nADDBATCH = 53;
  sBATCHDELAY = 'BATCHDELAY';
  nBATCHDELAY = 54;
  sBATCHMOVE = 'BATCHMOVE';
  nBATCHMOVE = 55;
  sPLAYDICE = 'PLAYDICE';
  nPLAYDICE = 56;
  sSC_PASTEMAP = 'PASTEMAP';
  sSC_LOADGEN = 'LOADGEN';

  sADDNAMELIST = 'ADDNAMELIST';
  nADDNAMELIST = 57;

  sDELNAMELIST = 'DELNAMELIST';
  nDELNAMELIST = 58;

  sADDGUILDLIST = 'ADDGUILDLIST';
  nADDGUILDLIST = 59;

  sDELGUILDLIST = 'DELGUILDLIST';
  nDELGUILDLIST = 60;

  sADDACCOUNTLIST = 'ADDACCOUNTLIST';
  nADDACCOUNTLIST = 61;
  sDELACCOUNTLIST = 'DELACCOUNTLIST';
  nDELACCOUNTLIST = 62;
  sADDIPLIST = 'ADDIPLIST';
  nADDIPLIST = 63;
  sDELIPLIST = 'DELIPLIST';
  nDELIPLIST = 64;

  sGOQUEST = 'GOQUEST';
  nGOQUEST = 100;
  sENDQUEST = 'ENDQUEST';
  nENDQUEST = 101;
  sGOTO = 'GOTO';
  nGOTO = 102;
  sSC_HAIRCOLOR = 'HAIRCOLOR';
  nSC_HAIRCOLOR = 104;
  sSC_WEARCOLOR = 'WEARCOLOR';
  nSC_WEARCOLOR = 105;
  sSC_HAIRSTYLE = 'HAIRSTYLE';
  nSC_HAIRSTYLE = 106;
  sSC_MONRECALL = 'MONRECALL';
  nSC_MONRECALL = 107;
  sSC_HORSECALL = 'HORSECALL';
  nSC_HORSECALL = 108;
  sSC_HAIRRNDCOL = 'HAIRRNDCOL';
  nSC_HAIRRNDCOL = 109;
  sSC_RANDSETDAILYQUEST = 'RANDSETDAILYQUEST';
  nSC_RANDSETDAILYQUEST = 110;
  sSC_REFINEWEAPON = 'REFINEWEAPON';
  nSC_REFINEWEAPON = 113;
  sSC_RECALLGROUPMEMBERS = 'RECALLGROUPMEMBERS';
  nSC_RECALLGROUPMEMBERS = 117;


  sSC_DELAYGOTO = 'DELAYGOTO';
  nSC_DELAYGOTO = 120;
  sSC_LINEMSG = 'LINEMSG';
  nSC_LINEMSG = 122;



  sSC_CLEARITEMMAP = 'CLEARMAPITEM';      //*
  nSC_CLEARITEMMAP = 170;

  sINSERT = 'INSERT';
  nINSERT = 227;





  sSC_GROUPMOVE = 'GROUPMOVE';   //编组地图随机传送
  nSC_GROUPMOVE = 235;


  sSC_CLEARNAMELIST = 'CLEARNAMELIST';  //清除列表内容
  nSC_CLEARNAMELIST = 238;




  sSC_KILLSLAVE = 'KILLSLAVE';   //  将自己的宝宝全部杀死。

  nSC_KILLSLAVE = 260;

  sSC_CHANGEGENDER = 'CHANGEGENDER';
  nSC_CHANGEGENDER = 272;

  sSC_CHANGELEVEL = 'CHANGELEVEL';
  nSC_CHANGELEVEL = 300;
  sSC_MARRY = 'MARRY';
  nSC_MARRY = 301;
  sSC_UNMARRY = 'UNMARRY';
  nSC_UNMARRY = 302;
  sSC_GETMARRY = 'GETMARRY';
  nSC_GETMARRY = 303;
  sSC_GETMASTER = 'GETMASTER';
  nSC_GETMASTER = 304;

  sSC_CLEARSKILL = 'CLEARSKILL';
  nSC_CLEARSKILL = 305;
  sSC_DELNOJOBSKILL = 'DELNOJOBSKILL';   //清除人物非本职业的所有技能。

  nSC_DELNOJOBSKILL = 306;
  sSC_DELSKILL = 'DELSKILL';
  nSC_DELSKILL = 307;
  sSC_ADDSKILL = 'ADDSKILL';
  nSC_ADDSKILL = 308;
  sSC_SKILLLEVEL = 'SKILLLEVEL';
  nSC_SKILLLEVEL = 309;

  sSC_CHANGEPKPOINT = 'CHANGEPKPOINT';
  nSC_CHANGEPKPOINT = 310;
  sSC_CHANGEEXP = 'CHANGEEXP';
  nSC_CHANGEEXP = 311;
  sSC_CHANGEJOB = 'CHANGEJOB';
  nSC_CHANGEJOB = 312;
  sSC_MISSION = 'MISSION';
  nSC_MISSION = 313;
  sSC_MOBPLACE = 'MOBPLACE';
  nSC_MOBPLACE = 314;
  sSC_SETMEMBERTYPE = 'SETMEMBERTYPE';
  nSC_SETMEMBERTYPE = 315;
  sSC_SETMEMBERLEVEL = 'SETMEMBERLEVEL';
  nSC_SETMEMBERLEVEL = 316;
  sSC_GAMEGOLD = 'GAMEGOLD';
  nSC_GAMEGOLD = 317;
  sSC_AUTOADDGAMEGOLD = 'AUTOADDGAMEGOLD';
  nSC_AUTOADDGAMEGOLD = 318;
  sSC_AUTOSUBGAMEGOLD = 'AUTOSUBGAMEGOLD';
  nSC_AUTOSUBGAMEGOLD = 319;
  sSC_CHANGENAMECOLOR = 'CHANGENAMECOLOR';
  nSC_CHANGENAMECOLOR = 320;
  sSC_CLEARPASSWORD = 'CLEARPASSWORD';
  nSC_CLEARPASSWORD = 321;
  sSC_RENEWLEVEL = 'RENEWLEVEL';
  nSC_RENEWLEVEL = 322;
  sSC_KILLMONEXPRATE = 'KILLMONEXPRATE';
  nSC_KILLMONEXPRATE = 323;
  sSC_POWERRATE = 'POWERRATE';
  nSC_POWERRATE = 324;
  sSC_CHANGEMODE = 'CHANGEMODE';    //设置人物当前模式。（1管理模式、2无敌模式、3隐身模式）
  nSC_CHANGEMODE = 325;
  sSC_CHANGEPERMISSION = 'CHANGEPERMISSION';  // 设置人物当前权限（0-10）

  nSC_CHANGEPERMISSION = 326;

  sCHECKONLINE = 'CHECKONLINE';
  nCHECKONLINE = 396;

  sSC_KILL = 'KILL';
//  ==========================================
//  ;杀死人物
//  KILL 0 人物死亡,不显示凶手信息
//  KILL 1 人物死亡不掉物品,不显示凶手信息
//  KILL 2 人物死亡,显示凶手信息为NPC
//   KILL 3 人物死亡不掉物品,显示凶手信息为NPC
//  ==========================================
  nSC_KILL = 327;
  sSC_KICK = 'KICK';
  nSC_KICK = 328;
  sSC_BONUSPOINT = 'BONUSPOINT';  //调整人物属性点。
  nSC_BONUSPOINT = 329;
  sSC_RESTRENEWLEVEL = 'RESTRENEWLEVEL';   // 清除人物转生数据(即人物转生后恢复到未转生状态)

  nSC_RESTRENEWLEVEL = 330;
  sSC_DELMARRY = 'DELMARRY';    //清除结婚信息
  nSC_DELMARRY = 331;
  sSC_DELMASTER = 'DELMASTER';    //清除师徒信息
  nSC_DELMASTER = 332;
  sSC_MASTER = 'MASTER';
  nSC_MASTER = 333;
  sSC_UNMASTER = 'UNMASTER';
  nSC_UNMASTER = 334;
  sSC_CREDITPOINT = 'CREDITPOINT';
  nSC_CREDITPOINT = 335;
  sSC_CLEARNEEDITEMS = 'CLEARNEEDITEMS';  //清理背包和仓库里面物品对应need值的所有物品
  nSC_CLEARNEEDITEMS = 336;
  sSC_CLEARMAKEITEMS = 'CLEARMAKEITEMS';
  nSC_CLEARMAEKITEMS = 337;
  sSC_SETSENDMSGFLAG = 'SETSENDMSGFLAG';
  nSC_SETSENDMSGFLAG = 338;
  sSC_UPGRADEITEMS = 'UPGRADEITEM';
  nSC_UPGRADEITEMS = 339;
  sSC_UPGRADEITEMSEX = 'UPGRADEITEMEX';
  nSC_UPGRADEITEMSEX = 340;
  sSC_MONGENEX = 'MONGENEX';
  nSC_MONGENEX = 341;
  sSC_CLEARMAPMON = 'CLEARMAPMON';
  nSC_CLEARMAPMON = 342;
  sSC_SETMAPMODE = 'SETMAPMODE';
  nSC_SETMAPMODE = 343;
  sSC_GAMEPOINT = 'GAMEPOINT';
  nSC_GAMEPOINT = 344;
  sSC_PKZONE = 'PKZONE';
  nSC_PKZONE = 345;
  sSC_RESTBONUSPOINT = 'RESTBONUSPOINT';   //分配点数复位
  nSC_RESTBONUSPOINT = 346;

  sSC_TAKECASTLEGOLD = 'TAKECASTLEGOLD';
  nSC_TAKECASTLEGOLD = 347;
  sSC_HUMANHP = 'HUMANHP';
  nSC_HUMANHP = 348;
  sSC_HUMANMP = 'HUMANMP';
  nSC_HUMANMP = 349;

  sSC_BUILDPOINT = 'GUILDBUILDPOINT';
  nSC_BUILDPOINT = 350;
  sSC_AURAEPOINT = 'GUILDAURAEPOINT';
  nSC_AURAEPOINT = 351;
  sSC_STABILITYPOINT = 'GUILDSTABILITYPOINT';
  nSC_STABILITYPOINT = 352;
  sSC_FLOURISHPOINT = 'GUILDFLOURISHPOINT';
  nSC_FLOURISHPOINT = 353;
  sSC_OPENMAGICBOX = 'OPENITEMBOX' {'OPENMAGICBOX'}; //
  nSC_OPENMAGICBOX = 354;
  sSC_SETRANKLEVELNAME = 'SETRANKLEVELNAME';
  nSC_SETRANKLEVELNAME = 355;
  sSC_GMEXECUTE = 'GMEXECUTE';
  nSC_GMEXECUTE = 356;
  sSC_GUILDCHIEFITEMCOUNT = 'GUILDCHIEFITEMCOUNT';
  nSC_GUILDCHIEFITEMCOUNT = 357;
  sSC_ADDNAMEDATELIST = 'ADDNAMEDATELIST';
  nSC_ADDNAMEDATELIST = 358;
  sSC_DELNAMEDATELIST = 'DELNAMEDATELIST';
  nSC_DELNAMEDATELIST = 359;
  sSC_MOBFIREBURN = 'MOBFIREBURN';
  nSC_MOBFIREBURN = 360;
  sSC_MESSAGEBOX = 'MESSAGEBOX';
  nSC_MESSAGEBOX = 361;

  sSC_SETSCRIPTFLAG = 'SETSCRIPTFLAG'; //设置用于NPC输入框操作的控制标志
  nSC_SETSCRIPTFLAG = 362;
  sSC_SETAUTOGETEXP = 'SETAUTOGETEXP';
  nSC_SETAUTOGETEXP = 363;
  sSC_VAR = 'VAR';
  nSC_VAR = 364;
  sSC_LOADVAR = 'LOADVAR';
  nSC_LOADVAR = 365;
  sSC_SAVEVAR = 'SAVEVAR';
  nSC_SAVEVAR = 366;
  sSC_CALCVAR = 'CALCVAR';
  nSC_CALCVAR = 367;
  sSC_QUERYVALUE = 'QUERYVAL';
  nSC_QUERYVALUE = 368;
  sGetValue = 'GETVALUE';
  nGetValue = 369;


  sChangeArp = 'CHANGEAPPR';
  nChangeArp = 370;
  sSC_BIGBAG = 'BAGSIZE';
  nSC_BIGBAG = 371;
  sChangeweather = 'WEATHER';
  nChangeweather = 372;
  sChangeFlag = 'CHANGEFLAG';
  nChangeflag = 373;
  sfireflower = 'FIREFLOWER';
  nfireflower = 374;
  smagicfont = 'CHATFONT';
  nmagicfont = 375;
  smagicfontcolor = 'CHATCOLOR';
  nmagicfontcolor = 376;

  smagiccolor = 'MAGICCOLOR';
  nmagiccolor = 377;

  sSC_MOBPLACEX = 'MOBPLACEX';    //在当前地图刷怪
  nSC_MOBPLACEX = 378;
  sSC_QUERYname = 'QUERYNAME';
  nSC_QUERyNAME = 379;

  sGetSTRING = 'GETSTRING';
  nGetSTRING = 380;

  sCHECKMON = 'CHECKMON';
  nCHECKMON = 381;

  sSC_USEBONUSPOINT = 'USEBONUSPOINT';
  nSC_USEBONUSPOINT = 382;

  sSC_UpdateTop = 'UPDATETOP';
  nSC_UpdateTop = 383;

  sSC_CLEARCURMAPMON = 'CLEARCURMAPMON';
  nSC_CLEARCURMAPMON = 384;

  sSC_MONSTORAGE = 'MONSTORAGE';
  nSC_MONSTORAGE = 385;

  sSC_FEEDMON = 'FEEDMON';
  nSC_FEEDMON = 386;

  sSC_CHECKITEMBOX = 'SHOWSPOTDLG';
  nSC_CHECKITEMBOX = 387;

  sCHECKITEMx = 'CHECKITEMX';
  nCHECKITEMx = 388;



  srelive = 'RELIVEPET';
  nrelive = 389;

  sdelay = 'DELAYCALL';
  ndelay = 391;



  sSetArrow = 'SETARROW';
  nSetArrow = 392;

  sClearArrow = 'CLEARARROW';
  nClearArrow = 393;

  srecpos = 'CHOOSEPOS';
  nrecpos = 394;

  soffline = 'OFFLINE';
  noffline = 395;



  sFENGHAO = 'TEMPRANK';
  nFENGHAO = 397;

  shcall = 'HCALL';
  nhcall = 398;


  sSETUSEITEMNAME = 'SETUSEITEMNAME';
  nSETUSEITEMNAME = 399;

  sCLONESELF = 'CLONESELF';
  nCLONESELF = 400;

  sUSESKILL = 'USESKILL';
  nUSESKILL = 401;

  sSETOFFLINE = 'SETOFFLINE';
  nSETOFFLINE = 402;

  sSETTIMER = 'SETTIMERA';
  nSETTIMER = 403;

  sFUSHEN = 'FUSHEN';
  nFUSHEN = 404;

  sCreateYS = 'CREATEPNEUMA';
  nCreateYS = 405;

  sCheckys = 'HASPNEUMA';
  nCheckys = 406;

  sCreateGroupLight = 'CREATEGROUPLIGHT';
  nCreateGroupLight = 407;

  sSC_ADDYSSKILL = 'ADDYSSKILL';
  nSC_ADDYSSKILL = 408;

  sSC_RANDOMX = 'RANDOMX';
  nSC_RANDOMX = 409;

  sSC_BODYEFFECT = 'SHOWHUMEFFECT';
  nSC_BODYEFFECT = 410;

  sSC_UPGRADEMON = 'UPGRADEMON';
  nSC_UPGRADEMON = 411;

  sCLEARYS = 'DELPNEUMA';//删除元神
  nCLEARYS = 412;

  sDECUSESTIME = 'DECUSESTIME';
  nDECUSESTIME = 413;

  sREPAIRALL = 'REPAIRALL';
  nREPAIRALL = 414;

  sYSPOINT = 'NIMBUSPOINT';//灵力调整
  nYSPOINT = 415;

  sJPPOINT = 'JPPOINT';
  nJPPOINT = 416;

  sADDTASK = 'ADDTASK';
  nADDTASK = 417;

  sUpdateTask = 'UPDATETASK';
  nUpdateTask = 418;

  sEndTask = 'ENDTASK';
  nEndTask = 419;

  sHasTask = 'HASTASK';
  nHasTask = 420;

  sYSFENGHAO = 'YSFENGHAO1';
  nYSFENGHAO = 421;

  sADDYQ = 'ADDVITALITY';
  nADDYQ = 422;

  sBOOSFS = 'BOSSFS';
  nBOOSFS = 423;

  sTAKEB = 'TAKEB';
  nTAKEB = 424;

  sGROUPMOVE = 'GROUPMOVE';
  nGROUPMOVE = 425;

  sCHECKBT = 'CHECKBT';
  nCHECKBT = 426;

  sADDVARLIST = 'ADDVARLIST';
  nADDVARLIST = 427;

  sDELVARLIST = 'DELVARLIST';
  nDELVARLIST = 428;

  sCHECKVARLIST = 'CHECKVARLIST';
  nCHECKVARLIST = 429;

  sGameOfWoool = 'GameOfWoool';
  nGameOfWoool = 430;

  sADDITEMDARKPROPERTY = 'ADDITEMDARKPROPERTY';
  nADDITEMDARKPROPERTY = 431;

  sADDITEMEVIL   ='ADDEVILTOITEM';
  nADDITEMEVIL   = 432;

  sCLEARITEMEVIL = 'RELEASEEVIL';
  nCLEARITEMEVIL = 433;

  sMOBEVIL       = 'MOBEVIL';
  nMOBEVIL       = 434;

  sTAKESUPERBOXITEM ='TAKESUPERBOXITEM';
  nTAKESUPERBOXITEM =435;
 //以下没有作
  sSETSUPERBOXRESULT ='SETSUPERBOXRESULT';
  nSETSUPERBOXRESULT = 436;

  sUPGRADESUPERITEMBOX ='UPGRADESUPERITEMBOX';
  nUPGRADESUPERITEMBOX = 437;

  sSETPETRANKNAME  = 'SETPETRANKNAME';
  nSETPETRANKNAME  = 438;

  sMessageBoxA     = 'MESSAGEBOXA';
  nMessageBoxA     = 439;

  sGIVEBOXITEM    = 'GIVEBOXITEM';
  nGIVEBOXITEM    = 440;

  sSETMAGICBOXITEM='SETMAGICBOXITEM';
  nSETMAGICBOXITEM = 441;

  sOPENMAGICBOX  ='OPENMAGICBOX';  ////真正开宝箱
  nOPENMAGICBOX  = 442;

  sSETMAGICBOX   = 'SETMAGICBOX';
  nSETMAGICBOX   = 443;

  sUPGRADEUSERITEM = 'UPGRADEUSERITEM';
  nUPGRADEUSERITEM = 444;

  sGoBackMap=  'GOBACKMAP';
  nGObackMap = 445;

  sCollectPoint ='COLLECTPOINT';
  nCollectPoint= 446;
  sSETNPCNAME='SETNPCNAME';
  nSETNPCNAME = 447;

  sUpgradeUserItemEx = 'UPGRADEUSERITEMEX';
  nUpgradeUserItemEx = 448;



  sJoinGuild  = 'ADDGUILDMEMBER';
  nJoinGuild  = 450;

  sopenBless ='OPENBLESS';
  nopenBless = 451;

  sSC_STATUSRATE                        = 'STATUSRATE';
  nSC_STATUSRATE                        = 452;


  sUPGRADECHECKITEMBOX  ='UPGRADECHECKITEMBOX';
  nUPGRADECHECKITEMBOX = 453;

  sSetTimerA   ='SETTIMER';
  nSetTimerA   = 454;

  sChangeFlagMode= 'CANCELSAUSSUREA';//取消天山血莲和深海灵礁的特殊效果;
  nChangeFlagMode =455;

  sGuildExp='GUILDEXP';
  nGuildExp=456;

  sAddCastleWar='ADDCASTLEWARGUILD';
  nAddCastleWar= 457;

  sClearCastleWar = 'CLEARCASTLEWAR';
  nClearCastleWar=458;

  sGuildMemberMaxLimit='GUILDMEMBERS';
  nGuildMemberMaxLimit=459;

  sGuildGrade='GUILDGRADE';
  nGuildGrade=460;


  sQuitGuild='DELGUILDMEMBER';
  nQuitGuild= 462;

  sGetExp='GETEXP';
  nGetExp=463;

  sUPGRADEMONZSD='UPGRADEMONZSD';
  nUPGRADEMONZSD=464;

  sUPGRADEMONEXP='UPGRADEMONEXP';
  nUPGRADEMONEXP=465;

  sUPGRADEMONLEVEL='UPGRADEMONLEVEL';
  nUPGRADEMONLEVEL=466;

  sUPDATEMONSTONE='UPDATEMONSTONE';
  nUPDATEMONSTONE=467;

  sKillMonExpMultiple='KILLMONEXPMULTIPLE';
  nKillMonExpMultiple=468;
  sSETPETATTRIBUTE='SETPETATTRIBUTE';
  nSETPETATTRIBUTE=469;

  sSETPETRATE='SETPETRATE';
  nSETPETRATE=470;

  sMobNpc='MOBNPC';
  nMobNpc=471;

  sSendBlessItemList='SENDBLESSITEMLIST';
  nSendBlessItemList= 472;

  sSetBlessPower='SETBLESSPOWER';
  nSetBlessPower= 473;

    sTAKEM = 'TAKEM';
  nTAKEm = 474;

  sStartTimer='STARTTIMER';
  nStartTimer= 475;

  sStopTimer='STOPTIMER';
  nStopTimer= 476;

  sReadRandomStr='READRANDOMSTR';
  nReadRandomStr=477;

  sFillText='FILLTEXT';
  nFillText=478;

  sTAKEDUREITEM='TAKEDUREITEM';
  nTAKEDUREITEM=479;

  sFormatStr='FORMATSTR';
  nFormatStr=480;

  sTrim='TRIM';
  nTrim=481;

  sAddItemExp='ADDITEMEXP';
  nAddItemExp=482;

  sLoadExVar='LOADEXVAR';
  nLoadExVar= 483;

  sSaveExVar='SAVEEXVAR';
  nSaveExVar=  484;

  sSENDCOMMENT='SENDCOMMENT';
  nSENDCOMMENT= 485;

  sMULT='MULT';
  nMULT= 486;

  sDiv='DIV';
  nDiv= 487;

  sPERCENT='PERCENT';
  nPERCENT=488;

  sINSERTVARLIST='INSERTVARLIST';
  nINSERTVARLIST= 489;

  sCHECKITEMBOXCF='CHECKITEMBOXCF';
  nCHECKITEMBOXCF=490;

  sTAKEON='TAKEON';
  nTAKEON=491;

  sDropItemDown='DROPITEMDOWN';
  nDropItemDown=492;

  sADDLXBH='ADDLXBH';
  nADDLXBH=493;

  sLXBHKQ='LXBHKQ';
  nLXBHKQ=494;

  sShowAdditionalInfo='SHOWADDITIONALINFO';
  NShowAdditionalInfo=495;

  sSetAdditionalAbil='SETADDITIONALABIL';
  nSetAdditionalAbil= 496;

  sShowSoulDig='SHOWSOULDIG';
  nShowSoulDig= 497;

  sSwitchPneuma='SWITCHPNEUMA';
  nSwitchPneuma=498;

  sSENDBOXSL='OPENERNIE'; //用于打开神龙献宝
  nSENDBOXSL=499;

  sSETMAGICBOXSL='SETMAGICBOXSL';  //神龙献宝
  nSETMAGICBOXSL=500;

  sOPENBOXSL='OPENBOXSL';
  nOPENBOXSL=501;

  sQUERYMSG='QUERYMSG';
  nQUERYMSG=502;

  sGoBackHome='GOBACKHOME';
  nGoBackHome=503;

  sGETVALIDSTR='GETVALIDSTR';
  nGETVALIDSTR=504;

  sSetRobotTimer='SETROBOTTIMER';
  nSetRobotTimer=505;

  sCLEARMAPBODY='CLEARMAPBODY'; //清理指定地图的怪物尸体
  nCLEARMAPBODY=506;

  sCLEARMAPITEM='CLEARMAPITEM';//清理指定地图地面的物品
  nCLEARMAPITEM=507;

  sGEMCOUNT='GEMCOUNT';
  nGEMCOUNT=508;

  sPNEUMACALL='PNEUMACALL';
  nPNEUMACALL=509;

  sSetErniePrize='SETERNIEPRIZE';
  nSetErniePrize=510;

  sTOPLIST='TOPLIST';
  nTOPLIST=511;

  sSMELTBOXRESULT='SMELTBOXRESULT';
  nSMELTBOXRESULT=512;

  sSETNPCAPPR='SETNPCAPPR';//设置NPC的外观，X是NPC索引，Y是新外观
  nSETNPCAPPR=513;

  sPLAYERCALL='PLAYERCALL';
  nPLAYERCALL=514;

  sPlayDefence='PLAYDEFENCE';
  nPlayDefence=515;

  sChangeEatItemDura='CHANGEEATITEMDURA';
  nChangeEatItemDura=516;

  sCHANGESKILLEXP='CHANGESKILLEXP';   //调整指定技能经验;
  nCHANGESKILLEXP=517;

  sgiveb='GIVEB';
  ngiveb=518;

  sReCallTotem='RECALLTOTEM';   //放置行会图腾;
  nReCallTotem=519;

  sSETHONORSHAPE='SETHONORSHAPE';
  nSETHONORSHAPE=520;

  sSetPetLevel='SETPETLEVEL';
  nSetPetLevel=521;

  sMAPMOVEHUM='MAPMOVEHUM';
  nMAPMOVEHUM=522;



  sShowSmeltBox='SHOWSMELTBOX';
  nShowSmeltBox=524;

  sRANDOMGIVEITEMS='RANDOMGIVEITEMS';
  nRANDOMGIVEITEMS=525;

  sRANDOMGIVE='RANDOMGIVE';
  nRANDOMGIVE=526;

  sRefreshTask='REFRESHTASK';
  nRefreshTask=527;

 //  脚本命令：DELCOMMENT X
 //   参数：玩家名称（不指定时为本玩家）
 //   作用：删除指定玩家在本NPC的留言

 sDELCOMMENT='DELCOMMENT';
 nDELCOMMENT=528;

 //烟花效果
 sSKYROCKET='SKYROCKET';
 nSKYROCKET=529;

 sReplaceText='REPLACETEXT';
 nReplaceText=530;

 sDELLASTDROPITEM='DELLASTDROPITEM';
 nDELLASTDROPITEM=531;

 sCHECKGUILDMAXMEMBER='CHECKGUILDMAXMEMBER';
 nCHECKGUILDMAXMEMBER=532;

 sSETOFFLINELABEL='SETOFFLINELABEL';
 nSETOFFLINELABEL=533;
////////////////////////////////////////
  sSL_SENDMSG = '@@sendmsg';
  sSUPERREPAIR = '@s_repair';
  sSUPERREPAIROK = '~@s_repair';
  sSUPERREPAIRFAIL = '@fail_s_repair';
  sREPAIR = '@repair';
  sREPAIROK = '~@repair';
  scallboard = '@callboard';
  sBUY = '@buy';
  sSELL = '@sell';
  sMAKEDURG = '@makedrug';
  sPRICES = '@prices';
  sSTORAGE = '@storage';
  sGETBACK = '@getback';
  sUPGRADENOW = '@upgradenow';
  sUPGRADEING = '~@upgradenow_ing';
  sUPGRADEOK = '~@upgradenow_ok';
  sUPGRADEFAIL = '~@upgradenow_fail';
  sGETBACKUPGNOW = '@getbackupgnow';
  sGETBACKUPGOK = '~@getbackupgnow_ok';
  sGETBACKUPGFAIL = '~@getbackupgnow_fail';
  sGETBACKUPGFULL = '~@getbackupgnow_bagfull';
  sGETBACKUPGING = '~@getbackupgnow_ing';
  sEXIT = '@exit';
  sBACK = '@back';
  sMAIN = '@main';
  sFAILMAIN = '~@main';

  sGETMASTER = '@@getmaster';
  sGETMARRY = '@@getmarry';
  sUSEITEMNAME = '@@useitemname';

  sBUILDGUILDNOW = '@buildguildnow';
  sSCL_GUILDWAR = '@guildwar';
  sDONATE = '@@donate';
  sREQUESTCASTLEWAR = '@requestcastlewarnow';

  sCASTLENAME = '@@castlename';
  sWITHDRAWAL = '@withdrawal';
  sRECEIPTS = '@receipts';
  sOPENMAINDOOR = '@openmaindoor';
  sCLOSEMAINDOOR = '@closemaindoor';
  sREPAIRDOORNOW = '@repairdoornow';
  sREPAIRWALLNOW1 = '@repairwallnow1';
  sREPAIRWALLNOW2 = '@repairwallnow2';
  sREPAIRWALLNOW3 = '@repairwallnow3';
  sHIREARCHERNOW = '@hirearchernow';
  sHIREGUARDNOW = '@hireguardnow';
  sHIREGUARDOK = '@hireguardok';
  sMarket_Def = 'Market_Def\';
  sNpc_def = 'Npc_def\';
type

  TItemBind = record
    nMakeIdex: Integer;
    nItemIdx: Integer;
    sBindName: string[20];
  end;
  pTItemBind = ^TItemBind;
  TConsoleData = packed record
    nCrcExtInt: Integer;
    nCrcDllInt: Integer;
  end;
  pTConsoleData = ^TConsoleData;

  TLevelInfo = record
    wHP: Word;
    wMP: Word;
    dwExp: LongWord;
    wAC: Word;
    wMaxAC: Word;
    wACLimit: Word;
    wMAC: Word;
    wMaxMAC: Word;
    wMACLimit: Word;
    wDC: Word;
    wMaxDC: Word;
    wDCLimit: Word;
    dwDCExp: LongWord;
    wMC: Word;
    wMaxMC: Word;
    wMCLimit: Word;
    dwMCExp: LongWord;
    wSC: Word;
    wMaxSC: Word;
    wSCLimit: Word;
    dwSCExp: LongWord;
  end;

  TLevelNeedExp = array[0..500] of longword;

  Tshapearray = array[0..4, 0..4] of byte;

  TClientConf = record
    boClientCanSet: boolean;
    boRunHuman: boolean;
    boRunMon: boolean;
    boRunNpc: boolean;
    boWarRunAll: boolean;
    btDieColor: integer;
    wSpellTime: integer;
    wHitIime: integer;
    wItemFlashTime: integer;
    btItemSpeed: integer; {60}
    boCanStartRun: boolean;
    boParalyCanRun: boolean;
    boParalyCanWalk: boolean;
    boParalyCanHit: boolean;
    boParalyCanSpell: boolean;
    boShowRedHPLable: boolean;
    boShowHPNumber: boolean;
    boShowJobLevel: boolean;
    boDuraAlert: boolean;
    boMagicLock: boolean;
    boAutoPuckUpItem: boolean;
  end;
  TCallEvilConf=record
   boCanRecallEvil                  : Boolean;
   nMaxRecallEvilCount              : Integer;
   nRecallEvilRate                  : Integer;
   nAntiEvilDontMoveTime            : Integer;

   nEvilCtrlMaxPower                : Integer;
   nEvilCtrl10SecDecPower           : Integer;
   nEvilHellGifMaxValue             : Integer;

   nEvilUniQueSkillDecPower         : Integer;
   nEvilUniQueSkillRate             : Integer;
   nEvilUniQueSkillDontMoveTime     : Integer;
   nUseEvilUniQueSkillTick          : Integer;
  end;
  Tcmd = record
    sCmd: string[20];
    nPerMissionMin: integer;
    nPerMissionMax: integer;
  end;




  TGameCommand = record

    DATA: Tcmd;
    PRVMSG: Tcmd;
    ALLOWMSG: Tcmd;
    LETSHOUT: Tcmd;
    LETTRADE: Tcmd;
    LETGUILD: Tcmd;
    ENDGUILD: Tcmd;
    BANGUILDCHAT: Tcmd;
    AUTHALLY: Tcmd;
    AUTH: Tcmd;
    AUTHCANCEL: Tcmd;
    DIARY: Tcmd;
    USERMOVE: Tcmd;
    SEARCHING: Tcmd;
    ALLOWGROUPCALL: Tcmd;
    GROUPRECALLL: Tcmd;
    ALLOWGUILDRECALL: Tcmd;
    GUILDRECALLL: Tcmd;
    UNLOCKSTORAGE: Tcmd;
    UNLOCK: Tcmd;
    LOCK: Tcmd;
    PASSWORDLOCK: Tcmd;
    SETPASSWORD: Tcmd;
    CHGPASSWORD: Tcmd;
    CLRPASSWORD: Tcmd;
    UNPASSWORD: Tcmd;
    MEMBERFUNCTION: Tcmd;
    MEMBERFUNCTIONEX: Tcmd;
    MEMBERFUNCTIONEX1: Tcmd;
    DEAR: Tcmd;
    ALLOWDEARRCALL: Tcmd;
    DEARRECALL: Tcmd;
    MASTER: Tcmd;
    ALLOWMASTERRECALL: Tcmd;
    MASTERECALL: Tcmd;
    ATTACKMODE: Tcmd;
    REST: Tcmd;
    TAKEONHORSE: Tcmd;
    TAKEOFHORSE: Tcmd;
    HUMANLOCAL: Tcmd;
    MOVE: Tcmd;
    POSITIONMOVE: Tcmd;
    INFO: Tcmd;
    MOBLEVEL: Tcmd;
    MOBCOUNT: Tcmd;
    HUMANCOUNT: Tcmd;
    MAP: Tcmd;
    KICK: Tcmd;
    TING: Tcmd;
    SUPERTING: Tcmd;
    MAPMOVE: Tcmd;
    SHUTUP: Tcmd;
    RELEASESHUTUP: Tcmd;
    SHUTUPLIST: Tcmd;
    GAMEMASTER: Tcmd;
    OBSERVER: Tcmd;
    SUEPRMAN: Tcmd;
    LEVEL: Tcmd;
    SABUKWALLGOLD: Tcmd;
    RECALL: Tcmd;
    REGOTO: Tcmd;
    SHOWFLAG: Tcmd;
    SHOWOPEN: Tcmd;
    SHOWUNIT: Tcmd;
    ATTACK: Tcmd;
    MOB: Tcmd;
    MOBNPC: Tcmd;
    DELNPC: Tcmd;
    NPCSCRIPT: Tcmd;
    RECALLMOB: Tcmd;
    LUCKYPOINT: Tcmd;
    LOTTERYTICKET: Tcmd;
    RELOADGUILD: Tcmd;
    RELOADLINENOTICE: Tcmd;
    RELOADABUSE: Tcmd;
    BACKSTEP: Tcmd;
    BALL: Tcmd;
    FREEPENALTY: Tcmd;
    PKPOINT: Tcmd;
    INCPKPOINT: Tcmd;
    CHANGELUCK: Tcmd;
    HUNGER: Tcmd;
    HAIR: Tcmd;
    TRAINING: Tcmd;
    DELETESKILL: Tcmd;
    CHANGEJOB: Tcmd;
    CHANGEGENDER: Tcmd;
    NAMECOLOR: Tcmd;
    MISSION: Tcmd;
    MOBPLACE: Tcmd;
    TRANSPARECY: Tcmd;
    DELETEITEM: Tcmd;
    LEVEL0: Tcmd;
    CLEARMISSION: Tcmd;
    SETFLAG: Tcmd;
    SETOPEN: Tcmd;
    SETUNIT: Tcmd;
    RECONNECTION: Tcmd;
    DISABLEFILTER: Tcmd;
    CHGUSERFULL: Tcmd;
    CHGZENFASTSTEP: Tcmd;
    CONTESTPOINT: Tcmd;
    STARTCONTEST: Tcmd;
    ENDCONTEST: Tcmd;
    ANNOUNCEMENT: Tcmd;
    OXQUIZROOM: Tcmd;
    GSA: Tcmd;
    CHANGEITEMNAME: Tcmd;
    DISABLESENDMSG: Tcmd;
    ENABLESENDMSG: Tcmd;
    DISABLESENDMSGLIST: Tcmd;
    KILL: Tcmd;
    MAKE: Tcmd;
    SMAKE: Tcmd;
    BONUSPOINT: Tcmd;
    DELBONUSPOINT: Tcmd;
    RESTBONUSPOINT: Tcmd;
    FIREBURN: Tcmd;
    TESTFIRE: Tcmd;
    TESTSTATUS: Tcmd;
    DELGOLD: Tcmd;
    ADDGOLD: Tcmd;
    DELGAMEGOLD: Tcmd;
    ADDGAMEGOLD: Tcmd;
    GAMEGOLD: Tcmd;
    GAMEPOINT: Tcmd;
    CREDITPOINT: Tcmd;
    BigBag: Tcmd; //增加命令
    TESTGOLDCHANGE: Tcmd;
    REFINEWEAPON: Tcmd;
    RELOADADMIN: Tcmd;
    RELOADNPC: Tcmd;
    RELOADMANAGE: Tcmd;
    RELOADROBOTMANAGE: Tcmd;
    RELOADROBOT: Tcmd;
    RELOADMONITEMS: Tcmd;
    RELOADDIARY: Tcmd;
    RELOADITEMDB: Tcmd;
    RELOADMAGICDB: Tcmd;
    RELOADMONSTERDB: Tcmd;
    RELOADMINMAP: Tcmd;
    REALIVE: Tcmd;
    ADJUESTLEVEL: Tcmd;
    ADJUESTEXP: Tcmd;
    ADDGUILD: Tcmd;
    DELGUILD: Tcmd;
    CHANGESABUKLORD: Tcmd;
    FORCEDWALLCONQUESTWAR: Tcmd;
    ADDTOITEMEVENT: Tcmd;
    ADDTOITEMEVENTASPIECES: Tcmd;
    ITEMEVENTLIST: Tcmd;
    STARTINGGIFTNO: Tcmd;
    DELETEALLITEMEVENT: Tcmd;
    STARTITEMEVENT: Tcmd;
    ITEMEVENTTERM: Tcmd;
    ADJUESTTESTLEVEL: Tcmd;
    TRAININGSKILL: Tcmd;
    OPDELETESKILL: Tcmd;
    CHANGEWEAPONDURA: Tcmd;
    RELOADGUILDALL: Tcmd;
    WHO: Tcmd;
    TOTAL: Tcmd;
    TESTGA: Tcmd;
    MAPINFO: Tcmd;
    SBKDOOR: Tcmd;
    CHANGEDEARNAME: Tcmd;
    CHANGEMASTERNAME: Tcmd;
    STARTQUEST: Tcmd;
    SETPERMISSION: Tcmd;
    CLEARMON: Tcmd;
    RENEWLEVEL: Tcmd;
    DENYIPLOGON: Tcmd;
    DENYACCOUNTLOGON: Tcmd;
    DENYCHARNAMELOGON: Tcmd;
    DELDENYIPLOGON: Tcmd;
    DELDENYACCOUNTLOGON: Tcmd;
    DELDENYCHARNAMELOGON: Tcmd;
    SHOWDENYIPLOGON: Tcmd;
    SHOWDENYACCOUNTLOGON: Tcmd;
    SHOWDENYCHARNAMELOGON: Tcmd;
    VIEWWHISPER: Tcmd;
    SPIRIT: Tcmd;
    SPIRITSTOP: Tcmd;
    SETMAPMODE: Tcmd;
    SHOWMAPMODE: Tcmd;
    TESTSERVERCONFIG: Tcmd;
    SERVERSTATUS: Tcmd;
    TESTGETBAGITEM: Tcmd;
    CLEARBAG: Tcmd;
    SHOWUSEITEMINFO: Tcmd;
    BINDUSEITEM: Tcmd;
    MOBFIREBURN: Tcmd;
    TESTSPEEDMODE: Tcmd;
    LOCKLOGON: Tcmd;
    MakeItemDrop:TCMD
  end;




  TRecallMigic = record
    nHumLevel: Integer;
    sMonName: string[14];
    nCount: Integer;
    nLevel: Integer;
  end;


  TConfig = record
    nClientFile1_CRC: integer;
    nClientFile2_CRC: integer;
    nClientFile3_CRC: integer;
    nServerFile_CRCA: integer;
    boCheckFail: boolean;
    nLoadDBCount: integer;
    nLoadDBErrorCount: integer;
    nSaveDBCount: integer;
    nDBQueryID: integer;
    GlobaDyMval: array[0..499] of integer;
  //  nItemNumber           :integer;
  //  nItemNumberEx            :integer;


 //   GlobalVal:array[0..9]of integer;
    AllocMemSize: integer;
    AllocMemCount: integer;
    UserEngineThread: tThreadInfo;
    IDSocketThread: tThreadInfo;
    DBSocketThread: tThreadInfo;


    IDSocket: integer;
    nIDSocketRecvIncLen: integer;
    nIDSocketRecvMaxLen: integer;
    nIDSocketRecvCount: integer;
    nIDReceiveMaxTime: integer;
    nIDSocketWSAErrCode: integer;
    nIDSocketErrorCount: integer;
    sIDSocketRecvText: string;
    nConfigSize: integer;
    sServerName: string;
    sServerIPaddr: string;
    sRegServerAddr: string;
    nRegServerPort: integer;
    sRegKey: string;
    sWebSite: string;
    sBbsSite: string;
    sClientDownload: string;
    sQQ: string;
    sPhone: string;
    sBankAccount0: string;
    sBankAccount1: string;
    sBankAccount2: string;
    sBankAccount3: string;
    sBankAccount4: string;
    sBankAccount5: string;
    sBankAccount6: string;
    sBankAccount7: string;
    sBankAccount8: string;
    sBankAccount9: string;
    nServerNumber: integer;
    boVentureServer: boolean;
    boTestServer: boolean;
    boServiceMode: boolean;
    boNonPKServer: boolean;
    boSafeOffLine: Boolean;
    boIDSocketConnected: boolean;
    UserIDSection: TRTLCriticalSection;
    nTestLevel: integer;
    nTestGold: integer;
    nTestUserLimit: integer;
    nSendBlock: integer;
    nCheckBlock: integer;
    nAvailableBlock: integer;
    nGateLoad: integer;
    nUserFull: integer;
    nZenFastStep: integer;
    sGateAddr: string;
    nGatePort: integer;
    sDBAddr: string;
    nDBPort: integer;
    sIDSAddr: string;
    nIDSPort: integer;
    sMsgSrvAddr: string;
    nMsgSrvPort: integer;
    sLogServerAddr: string;
    nLogServerPort: integer;
    boDiscountForNightTime: boolean;
    nHalfFeeStart: integer;
    nHalfFeeEnd: integer;
    boViewHackMessage: boolean;
    boViewAdmissionFailure: boolean;
    sBaseDir: string;
    sGuildDir: string;
    sGuildFile: string;
    sVentureDir: string;
    sConLogDir: string;
    sCastleDir: string;
    sCastleFile: string;
    sEnvirDir: string;
    sFriendsDir: string;
    sMapDir: string;
    sNoticeDir: string;
    sLogDir: string;
    sPlugDir: string;
    sClientFile1: string;
    sClientFile2: string;
    sClientFile3: string;

    sClothsMan: string;
    sClothsWoman: string;
    sWoodenSword: string;
    sCandle: string;
    sBasicDrug: string;
    sGoldStone: string;
    sSilverStone: string;
    sSteelStone: string;
    sCopperStone: string;
    sBlackStone: string;
    sZuma: array[0..3] of string; //('祖玛卫士','祖玛雕像','祖玛弓箭手','楔蛾');
    sBee: string;
    sSeeBee1: string;
    sSeeBee2: string;
    sSeeBee3: string;
    scallboss1: string;
    scallboss2: string;
    scallboss3: string;
    scallboss4: string;
    scallboss5: string;

    nClbADDTrains: integer; //吃豹粮增加的点数
    nClbLevelUpTrains: integer; //每次升级需要的点数
    sSpider: string;
    sWomaHorn: string;
    sZumaPiece: string;
    sGameGoldName: string;
    sGamePointName: string;
    sPayMentPointName: string;
    ClbADDTrains: integer;
    ClbLevelUpTrains: integer;
    PushTEBOTime: integer;
    RushMotaeboTime: integer;
    nMagPowerDefenceRate: integer;
    nMagBubbleDefenceRate: integer;

    ShowHitHp: integer;
    SafeAreaHint: integer;
    ShowHpPresent: boolean;
    OffLineSuper: boolean;
    PlayerSkillTree: boolean;
    FireHitPowerRate:Integer;
    NoDoubleFireHit:Boolean;
    PDPowerRate:Integer;
    PJPowerRate:Integer;
    MagDefenceUpPerdureEx:Integer;
    Skill88PowerRate:Integer;
    DiDingPowerRate:Integer ;
    DiDingAllowPK:Boolean ;
    DiDingUseTime:Integer;
    BatflyMaxRage:Integer;    //移形换影
    BatflyRate:Integer;
    DoMotaeboDelay:Integer;//突斩卡人时间
    YSSkillTree: boolean;
    ComSkillNoDecVitaLity:Boolean;
    boUsePaihang: boolean;
    boUseLingzu:Boolean;


    VitaLityAddSpeed:Integer;
    boUseSelfDecodeScript: boolean;
    GoldAddinBag: Integer;
    DBSocket: integer;
    nHealthFillTime: integer;
    nSpellFillTime: integer;
    nMonUpLvNeedKillBase: integer;
    nMonUpLvRate: integer;
    MonUpLvNeedKillCount: array[0..7] of word; //(0,0,50,100,200,300,600,1200);
    SlaveColor: array[0..8] of word; //($FF,$FE,$93,$9A,$E5,$A8,$B4,$FC,249);
    WideAttack: array[0..2] of byte; //(7,1,2);
    CrsAttack: array[0..6] of byte; //(7,1,2,3,4,5,6);
    SpitMap: array[0..7] of Tshapearray; //(
    sHomeMap: string;
    s_EncodeSriptcode: string;
    nHomeX: integer;
    nHomeY: integer;
    sRedHomeMap: string;
    nRedHomeX: integer;
    nRedHomeY: integer;
    sRedDieHomeMap: string;
    nRedDieHomeX: integer;
    nRedDieHomeY: integer;
    dwDecPkPointTime: integer;
    nDecPkPointCount: integer;
    dwPKFlagTime: integer;
    nKillHumanAddPKPoint: integer;
    nKillHumanDecLuckPoint: integer;
    dwDecLightItemDrugTime: integer;
    nSafeZoneSize: integer;
    nStartPointSize: integer;
    dwHumanGetMsgTime: LongWord;
    nGroupMembersMax: integer;
    nGuildMembersMax: integer;
    sFireBallSkill: string;
    sHealSkill: string;
    ReNewNameColor: array[0..9] of byte; //($FF,$FE,$93,$9A,$E5,$A8,$B4,$FC,$B4,$FC);
    dwReNewNameColorTime: integer;
    boReNewChangeColor: boolean;
    boReNewLevelClearExp: boolean;
    BonusAbilofWarr: TNakedAbility; //(DC:17;MC:20;SC:20;AC:20;MAC:20;HP:1;MP:3;Hit:20;Speed:35;X2:0);
    BonusAbilofWizard: TNakedAbility; //(DC:17;MC:25;SC:30;AC:20;MAC:15;HP:2;MP:1;Hit:25;Speed:35;X2:0);
    BonusAbilofTaos: TNakedAbility; //(DC:20;MC:30;SC:17;AC:20;MAC:15;HP:2;MP:1;Hit:30;Speed:30;X2:0);
    NakedAbilofWarr: TNakedAbility; //(DC:512;MC:2560;SC:20;AC:768;MAC:1280;HP:0;MP:0;Hit:0;Speed:0;X2:0);
    NakedAbilofWizard: TNakedAbility; //(DC:512;MC:512;SC:2560;AC:1280;MAC:768;HP:0;MP:0;Hit:5;Speed:0;X2:0);
    NakedAbilofTaos: TNakedAbility; //(DC:20;MC:30;SC:17;AC:20;MAC:15;HP:2;MP:1;Hit:30;Speed:30;X2:0);
    nUpgradeWeaponMaxPoint: integer;
    nUpgradeWeaponPrice: integer;
    dwUPgradeWeaponGetBackTime: integer;
    nClearExpireUpgradeWeaponDays: integer;
    nUpgradeWeaponDCRate: integer;
    nUpgradeWeaponDCTwoPointRate: integer;
    nUpgradeWeaponDCThreePointRate: integer;
    nUpgradeWeaponSCRate: integer;
    nUpgradeWeaponSCTwoPointRate: integer;
    nUpgradeWeaponSCThreePointRate: integer;
    nUpgradeWeaponMCRate: integer;
    nUpgradeWeaponMCTwoPointRate: integer;
    nUpgradeWeaponMCThreePointRate: integer;
    dwProcessMonstersTime: integer;
    dwRegenMonstersTime: integer;
    nMonGenRate: integer;
    nProcessMonRandRate: integer;
    nProcessMonLimitCount: integer;
    nSoftVersionDate: integer;
    boCanOldClientLogon: boolean;
    boUseSafeZoneLight: boolean;
    nUseSafeZoneLightType: integer;

    dwConsoleShowUserCountTime: integer;
    dwShowLineNoticeTime: integer;

    ShowBannerNoticeTime: integer;
    HideBannerNoticeTime: integer;


    nLineNoticeColor: integer;
    nStartCastleWarDays: integer;
    nStartCastlewarTime: integer;
    dwShowCastleWarEndMsgTime: integer;
    dwCastleWarTime: integer;
    dwGetCastleTime: integer;
    dwGuildWarTime: integer;
    nBuildGuildPrice: integer;
    nGuildWarPrice: integer;
    nMakeDurgPrice: integer;
    nHumanMaxGold: integer;
    nHumanTryModeMaxGold: integer;
    nTryModeLevel: integer;
    boTryModeUseStorage: boolean;
    nCanShoutMsgLevel: integer;
    boShowMakeItemMsg: boolean;
    boShutRedMsgShowGMName: boolean;
    nSayMsgMaxLen: integer;
    dwSayMsgTime: integer;
    nSayMsgCount: integer;
    dwDisableSayMsgTime: integer;
    nSayRedMsgMaxLen: integer;
    boShowGuildName: boolean;
    boShowRankLevelName: boolean;
    boMonSayMsg: boolean;
    nStartPermission: integer;
    boKillHumanWinLevel: boolean;
    boKilledLostLevel: boolean;
    boKillHumanWinExp: boolean;
    boKilledLostExp: boolean;
    nKillHumanWinLevel: integer;
    nKilledLostLevel: integer;
    nKillHumanWinExp: integer;
    nKillHumanLostExp: integer;
    nHumanLevelDiffer: integer;
    nMonsterPowerRate: integer;
    nItemsPowerRate: integer;
    nItemsACPowerRate: integer;
    boSendOnlineCount: boolean;
    nSendOnlineCountRate: integer;
    dwSendOnlineTime: LongWord;
    dwSaveHumanRcdTime: LongWord;
    dwHumanFreeDelayTime: LongWord;
    dwMakeGhostTime: LongWord;
    dwClearDropOnFloorItemTime: LongWord;
    dwFloorItemCanPickUpTime: LongWord;
    boPasswordLockSystem: boolean; //是否启用密码保护系统
    boLockDealAction: boolean; //是否锁定交易操作
    boLockDropAction: boolean; //是否锁定扔物品操作
    boLockGetBackItemAction: boolean; //是否锁定取仓库操作
    boLockHumanLogin: boolean; //是否锁定走操作
    boLockWalkAction: boolean; //是否锁定走操作
    boLockRunAction: boolean; //是否锁定跑操作
    boLockHitAction: boolean; //是否锁定攻击操作
    boLockSpellAction: boolean; //是否锁定魔法操作
    boLockSendMsgAction: boolean; //是否锁定发信息操作
    boLockUserItemAction: boolean; //是否锁定使用物品操作
    boLockInObModeAction: boolean; //锁定时进入隐身状态
    nPasswordErrorCountLock: integer; //输入密码错误超过 指定次数则锁定密码
    boPasswordErrorKick: boolean; //输入密码错误超过限制则踢下线
    nSendRefMsgRange: integer;
    boDecLampDura: boolean;
    boHungerSystem: boolean;
    boHungerDecHP: boolean;
    btShieldRate:Byte;
    boHungerDecPower: boolean;
    boDiableHumanRun: boolean;
    boRunHuman: boolean;
    boRunMon: boolean;
    boRunNpc: boolean;
    boRunGuard: boolean;
    boWarDisHumRun: boolean;
    boGMRunAll: boolean;
    dwTryDealTime: integer;
    dwDealOKTime: integer;
    boCanNotGetBackDeal: boolean;
    boDisableDeal: boolean;
    boDisableSell:Boolean ;
    boDisablePetSell:Boolean;
    nMasterOKLevel: integer;
    nMasterRunScript: boolean;
    nMasterOKCreditPoint: integer;
    nMasterOKBonusPoint: integer;
    boPKLevelProtect: boolean;
    nPKProtectLevel: integer;
    nRedPKProtectLevel: integer;
    nItemPowerRate: integer;
    nItemExpRate: integer;
    nScriptGotoCountLimit: integer;
    btHearMsgFColor: integer; //前景
    btHearMsgBColor: integer; //背景
    btWhisperMsgFColor: integer; //前景
    btWhisperMsgBColor: integer; //背景
    btGMWhisperMsgFColor: integer; //前景
    btGMWhisperMsgBColor: integer; //背景
    btCryMsgFColor: integer; //前景
    btCryMsgBColor: integer; //背景
    btGreenMsgFColor: integer; //前景
    btGreenMsgBColor: integer; //背景
    btBlueMsgFColor: integer; //前景
    btBlueMsgBColor: integer; //背景
    btRedMsgFColor: integer; //前景
    btRedMsgBColor: integer; //背景
    btYellowMsgFColor: integer; //前景
    btYellowMsgBColor: integer; //背景
    btGuildMsgFColor: integer; //前景

    btGuildMsgBColor: integer; //背景
    btGroupMsgFColor: integer; //前景
    btGroupMsgBColor: integer; //背景
    btCustMsgFColor: integer; //前景
    btCustMsgBColor: integer; //背景
    nMonRandomAddValue: integer;
    nMakeRandomAddValue: integer;
    nWeaponDCAddValueMaxLimit: integer;
    nWeaponDCAddValueRate: integer;
    nWeaponMCAddValueMaxLimit: integer;
    nWeaponMCAddValueRate: integer;
    nWeaponSCAddValueMaxLimit: integer;
    nWeaponSCAddValueRate: integer;
    nDressDCAddRate: integer;
    nDressDCAddValueMaxLimit: integer;
    nDressDCAddValueRate: integer;
    nDressMCAddRate: integer;
    nDressMCAddValueMaxLimit: integer;
    nDressMCAddValueRate: integer;
    nDressSCAddRate: integer;
    nDressSCAddValueMaxLimit: integer;
    nDressSCAddValueRate: integer;
    nNeckLace202124DCAddRate: integer;
    nNeckLace202124DCAddValueMaxLimit: integer;
    nNeckLace202124DCAddValueRate: integer;
    nNeckLace202124MCAddRate: integer;
    nNeckLace202124MCAddValueMaxLimit: integer;
    nNeckLace202124MCAddValueRate: integer;
    nNeckLace202124SCAddRate: integer;
    nNeckLace202124SCAddValueMaxLimit: integer;
    nNeckLace202124SCAddValueRate: integer;
    nNeckLace19DCAddRate: integer;
    nNeckLace19DCAddValueMaxLimit: integer;
    nNeckLace19DCAddValueRate: integer;
    nNeckLace19MCAddRate: integer;
    nNeckLace19MCAddValueMaxLimit: integer;
    nNeckLace19MCAddValueRate: integer;
    nNeckLace19SCAddRate: integer;
    nNeckLace19SCAddValueMaxLimit: integer;
    nNeckLace19SCAddValueRate: integer;
    nArmRing26DCAddRate: integer;
    nArmRing26DCAddValueMaxLimit: integer;
    nArmRing26DCAddValueRate: integer;
    nArmRing26MCAddRate: integer;
    nArmRing26MCAddValueMaxLimit: integer;
    nArmRing26MCAddValueRate: integer;
    nArmRing26SCAddRate: integer;
    nArmRing26SCAddValueMaxLimit: integer;
    nArmRing26SCAddValueRate: integer;
    nRing22DCAddRate: integer;
    nRing22DCAddValueMaxLimit: integer;
    nRing22DCAddValueRate: integer;
    nRing22MCAddRate: integer;
    nRing22MCAddValueMaxLimit: integer;
    nRing22MCAddValueRate: integer;
    nRing22SCAddRate: integer;
    nRing22SCAddValueMaxLimit: integer;
    nRing22SCAddValueRate: integer;
    nRing23DCAddRate: integer;
    nRing23DCAddValueMaxLimit: integer;
    nRing23DCAddValueRate: integer;
    nRing23MCAddRate: integer;
    nRing23MCAddValueMaxLimit: integer;
    nRing23MCAddValueRate: integer;
    nRing23SCAddRate: integer;
    nRing23SCAddValueMaxLimit: integer;
    nRing23SCAddValueRate: integer;
    nHelMetDCAddRate: integer;
    nHelMetDCAddValueMaxLimit: integer;
    nHelMetDCAddValueRate: integer;
    nHelMetMCAddRate: integer;
    nHelMetMCAddValueMaxLimit: integer;
    nHelMetMCAddValueRate: integer;
    nHelMetSCAddRate: integer;
    nHelMetSCAddValueMaxLimit: integer;
    nHelMetSCAddValueRate: integer;
    nUnknowHelMetACAddRate: integer;
    nUnknowHelMetACAddValueMaxLimit: integer;
    nUnknowHelMetMACAddRate: integer;
    nUnknowHelMetMACAddValueMaxLimit: integer;
    nUnknowHelMetDCAddRate: integer;
    nUnknowHelMetDCAddValueMaxLimit: integer;
    nUnknowHelMetMCAddRate: integer;
    nUnknowHelMetMCAddValueMaxLimit: integer;
    nUnknowHelMetSCAddRate: integer;
    nUnknowHelMetSCAddValueMaxLimit: integer;
    nUnknowRingACAddRate: integer;
    nUnknowRingACAddValueMaxLimit: integer;
    nUnknowRingMACAddRate: integer;
    nUnknowRingMACAddValueMaxLimit: integer;
    nUnknowRingDCAddRate: integer;
    nUnknowRingDCAddValueMaxLimit: integer;
    nUnknowRingMCAddRate: integer;
    nUnknowRingMCAddValueMaxLimit: integer;
    nUnknowRingSCAddRate: integer;
    nUnknowRingSCAddValueMaxLimit: integer;
    nUnknowNecklaceACAddRate: integer;
    nUnknowNecklaceACAddValueMaxLimit: integer;
    nUnknowNecklaceMACAddRate: integer;
    nUnknowNecklaceMACAddValueMaxLimit: integer;
    nUnknowNecklaceDCAddRate: integer;
    nUnknowNecklaceDCAddValueMaxLimit: integer;
    nUnknowNecklaceMCAddRate: integer;
    nUnknowNecklaceMCAddValueMaxLimit: integer;
    nUnknowNecklaceSCAddRate: integer;
    nUnknowNecklaceSCAddValueMaxLimit: integer;
    nMonOneDropGoldCount: integer;
    nMakeMineHitRate: integer; //挖矿命中率
    nMakeMineRate: integer; //挖矿率
    nStoneTypeRate: integer;
    nStoneTypeRateMin: integer;
    nGoldStoneMin: integer;
    nGoldStoneMax: integer;
    nSilverStoneMin: integer;
    nSilverStoneMax: integer;
    nSteelStoneMin: integer;
    nSteelStoneMax: integer;
    nBlackStoneMin: integer;
    nBlackStoneMax: integer;
    nStoneMinDura: integer;
    nStoneGeneralDuraRate: integer;
    nStoneAddDuraRate: integer;
    nStoneAddDuraMax: integer;
    nWinLottery6Min: integer;
    nWinLottery6Max: integer;
    nWinLottery5Min: integer;
    nWinLottery5Max: integer;
    nWinLottery4Min: integer;
    nWinLottery4Max: integer;
    nWinLottery3Min: integer;
    nWinLottery3Max: integer;
    nWinLottery2Min: integer;
    nWinLottery2Max: integer;
    nWinLottery1Min: integer;
    nWinLottery1Max: integer; //16180 + 1820;
    nWinLottery1Gold: integer;
    nWinLottery2Gold: integer;
    nWinLottery3Gold: integer;
    nWinLottery4Gold: integer;
    nWinLottery5Gold: integer;
    nWinLottery6Gold: integer;
    nWinLotteryRate: integer;
    nWinLotteryCount: integer;
    nNoWinLotteryCount: integer;
    nWinLotteryLevel1: integer;
    nWinLotteryLevel2: integer;
    nWinLotteryLevel3: integer;
    nWinLotteryLevel4: integer;
    nWinLotteryLevel5: integer;
    nWinLotteryLevel6: integer;
    GlobalVal: array[0..99] of word; //(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    Globalstr: array[0..99] of string;
    GlobalstrA: array[0..299] of string;
    nItemNumber: integer;
    nItemNumberEx: integer;
    nGuildRecallTime: integer;
    nGroupRecallTime: integer;
    boControlDropItem: boolean;
    boInSafeDisableDrop: boolean;
    nCanDropGold: integer;
    nCanDropPrice: integer;
    boSendCustemMsg: boolean;
    boSubkMasterSendMsg: boolean;
    nSuperRepairPriceRate: integer; //特修价格倍数
    nRepairItemDecDura: integer; //普通修理掉持久数(特持久上限减下限再除以此数为减的数值)
    boDieScatterBag: boolean;
    nDieScatterBagRate: integer;
    boDieRedScatterBagAll: boolean;
    nDieDropUseItemRate: integer;
    nDieRedDropUseItemRate: integer;
    boDieDropGold: boolean;
    boKillByHumanDropUseItem: boolean;
    boKillByMonstDropUseItem: boolean;
    boKickExpireHuman: boolean;
    nGuildRankNameLen: integer;
    nGuildMemberMaxLimit: integer;
    nGuildNameLen: integer;
    nAttackPosionRate: integer;
    nAttackPosionTime: integer;
    dwRevivalTime: integer; //复活间隔时间
    boUserMoveCanDupObj: boolean;
    boUserMoveCanOnItem: boolean;
    dwUserMoveTime: LongWord;
    dwPKDieLostExpRate: LongWord;
    nPKDieLostLevelRate: integer;
    btPKFlagNameColor: integer;
    btPKLevel1NameColor: integer;
    btPKLevel2NameColor: integer;
    btAllyAndGuildNameColor: integer;
    btWarGuildNameColor: integer;
    btInFreePKAreaNameColor: integer;
    boSpiritMutiny: boolean;
    boEvilAddItemVal : Boolean;
    nKillMonAddZMZRate : integer;
    nKillMonAddZMZMax  : Integer;
    nAddDarkofZMZ      : Integer;
    nAddDarkofValue    : Integer;
    nAddDarkofRandValue: Integer;
    nDecZMZSpeed       : Integer;
    nEvilDc1           : array[0..4] of Integer;
    nEvilDc2           : array[0..4] of Integer;

    nEvilSc1           : array[0..4] of Integer;
    nEvilSc2           : array[0..4] of Integer;
    nEvilMc1           : array[0..4] of Integer;
    nEvilMc2           : array[0..4] of Integer;


    nEvilDcRate1      : array[0..4] of Integer;
    nEvilDcRate2      : array[0..4] of Integer;

    nEvilScRate1      : array[0..4] of Integer;
    nEvilScRate2      : array[0..4] of Integer;
    nEvilMcRate1      : array[0..4] of Integer;
    nEvilMcRate2      : array[0..4] of Integer;


    dwSpiritMutinyTime: integer;
    nSpiritPowerRate: integer;
    boMasterDieMutiny: boolean;
    nMasterDieMutinyRate: integer;
    nMasterDieMutinyPower: integer;
    nMasterDieMutinySpeed: integer;
    boBBMonAutoChangeColor: boolean;
    dwBBMonAutoChangeColorTime: integer;
    boOldClientShowHiLevel: boolean;
    boShowScriptActionMsg: boolean;
    nRunSocketDieLoopLimit: integer;
    boThreadRun: boolean;
    boShowExceptionMsg: boolean;
    boShowPreFixMsg: boolean;
    nMagicAttackRage: integer; //魔法锁定范围
    nDropItemRage: integer;
    sBoneFamm: string;
    nBoneFammCount: integer;
//    g_Config.
    BoneFammArray: array[0..9] of TRecallMigic;


    sSuperBoneFamm: string;
    nSuperBoneFammCount: integer;
//    g_Config.
    SuperBoneFammArray: array[0..9] of TRecallMigic;


    sDogz: string;
    nDogzCount: integer;
//    g_Config.
    DogzArray: array[0..9] of TRecallMigic;
    nAmyOunsulPoint: integer;
    boDisableInSafeZoneFireCross: boolean;
    boGroupMbAttackPlayObject: boolean;
    dwPosionDecHealthTime: integer;
    nPosionDamagarmor: integer; //中红毒着持久及减防量（实际大小为 12 / 10）
    boLimitSwordLong: boolean;
    nSwordLongPowerRate: integer;
    nFireBoomRage: integer;
    nSnowWindRange: integer;
    nElecBlizzardRange: integer;
    nMagTurnUndeadLevel: integer; //圣言怪物等级限制
    nMagTammingLevel: integer; //诱惑之光怪物等级限制
    nMagTammingTargetLevel: integer; //诱惑怪物相差等级机率，此数字越小机率越大；
    nMagTammingHPRate: integer; //成功机率=怪物最高HP 除以 此倍率，此倍率越大诱惑机率越高
    nMagTammingCount: integer;
    nMabMabeHitRandRate: integer;
    nMabMabeHitMinLvLimit: integer;
    nMabMabeHitSucessRate: integer;
    nMabMabeHitMabeTimeRate: integer;
    sCastleName: string;
    sCastleHomeMap: string;
    nCastleHomeX: integer;
    nCastleHomeY: integer;
    nCastleWarRangeX: integer;
    nCastleWarRangeY: integer;
    nCastleTaxRate: integer;
    boGetAllNpcTax: boolean;
    nHireGuardPrice: integer;
    nHireArcherPrice: integer;
    nCastleGoldMax: integer;
    nCastleOneDayGold: integer;
    nRepairDoorPrice: integer;
    nRepairWallPrice: integer;
    nCastleMemberPriceRate: integer;
    nMaxHitMsgCount: integer;
    nMaxSpellMsgCount: integer;
    nMaxRunMsgCount: integer;
    nMaxWalkMsgCount: integer;
    nMaxTurnMsgCount: integer;
    nMaxSitDonwMsgCount: integer;
    nMaxDigUpMsgCount: integer;
    boSpellSendUpdateMsg: boolean;
    boActionSendActionMsg: boolean;
    boKickOverSpeed: boolean;
    btSpeedControlMode: integer;
    nOverSpeedKickCount: integer;
    dwDropOverSpeed: integer;
    dwHitIntervalTime: integer; //攻击间隔
    dwMagicHitIntervalTime: integer; //魔法间隔
    dwRunIntervalTime: integer; //跑步间隔
    dwWalkIntervalTime: integer; //走路间隔
    dwTurnIntervalTime: integer; //换方向间隔
    boControlActionInterval: boolean;
    boControlWalkHit: boolean;
    boControlRunLongHit: boolean;
    boControlRunHit: boolean;
    boControlRunMagic: boolean;
    dwActionIntervalTime: integer; //组合操作间隔
    dwRunLongHitIntervalTime: integer; //跑位刺杀间隔
    dwRunHitIntervalTime: integer; //跑位攻击间隔
    dwWalkHitIntervalTime: integer; //走位攻击间隔
    dwRunMagicIntervalTime: integer; //跑位魔法间隔
    boDisableStruck: boolean; //不显示人物弯腰动作
    boDisableSelfStruck: boolean; //自己不显示人物弯腰动作
    dwStruckTime: integer; //人物弯腰停留时间
    dwKillMonExpMultiple: integer; //杀怪经验倍数

    dwRequestVersion: integer;

//    dwRequestVersion                    :string;

    boHighLevelKillMonFixExp: boolean;
    boAddUserItemNewValue: boolean;
    sLineNoticePreFix: string;
    sSysMsgPreFix: string;
    sGuildMsgPreFix: string;
    sGroupMsgPreFix: string;
    sHintMsgPreFix: string;
    sGMRedMsgpreFix: string;
    sMonSayMsgpreFix: string;
    sCustMsgpreFix: string;
    sCastleMsgpreFix: string;
    sGuildNotice: string;
    sGuildWar: string;
    sGuildAll: string;
    sGuildMember: string;
    sGuildMemberRank: string;
    sGuildChief: string;
    boKickAllUser: boolean;
    boTestSpeedMode: boolean;
    ClientConf: TClientConf;
    CallEvilConf :TCallEvilConf;
    nWeaponMakeUnLuckRate: integer;
    nWeaponMakeLuckPoint1: integer;
    nWeaponMakeLuckPoint2: integer;
    nWeaponMakeLuckPoint3: integer;
    nWeaponMakeLuckPoint2Rate: integer;
    nWeaponMakeLuckPoint3Rate: integer;
    boCheckUserItemPlace: boolean;


    nClientKey: integer;

    nLevelValueOfTaosHP: integer;
    nLevelValueOfTaosHPRate: real;
    nLevelValueOfTaosMP: integer;
    nLevelValueOfWizardHP: integer;
    nLevelValueOfWizardHPRate: real;
    nLevelValueOfWarrHP: integer;
    nLevelValueOfWarrHPRate: real;
    nProcessMonsterInterval: integer;
    dwNeedExps: TlevelNeedExp;
    boDBSocketConnected: boolean;
    nDBSocketRecvIncLen: integer;
    nDBSocketRecvMaxLen: integer;
    sDBSocketRecvText: string;
    boDBSocketWorking: boolean;
    nDBSocketRecvCount: integer;
    nDBReceiveMaxTime: integer;
    nDBSocketWSAErrCode: integer;
    nDBSocketErrorCount: integer;

    nSkill78PowerRate     : Integer;
    nSkill78SpecialPower  : Integer;
    boSkill78SpecialPower : Boolean;

    nSkill79PowerRate     : Integer;
    nSkill79SpecialPower  : Integer;
    boSkill79SpecialPower : Boolean;

    nSkill91MonLevel      : Integer;
    nSkill91Rate          : Integer;
    nSkill91Power         : Integer;
    nSkill91HumLevel      : Integer;
    boSkill91HumLevel     : Boolean;

    nSkill80PowerRate     : Integer;
    nSkill80SpecialPower  : Integer;
    boSkill80SpecialPower : Boolean;

    nSkill81PowerRate     : Integer;
    nSkill81SpecialPower  : Integer;
    boSkill81SpecialPower : Boolean;

    nSkill83PowerRate     : Integer;
    nSkill83SpecialPower  : Integer;
    boSkill83SpecialPower : Boolean;

    nSkill85PowerRate     : Integer;
    nSkill85SpecialPower  : Integer;
    boSkill85SpecialPower : Boolean;
    sSkill85Mon1          : String;
    sSkill85Mon2          : String;
    sSkill85Mon3          : String;
    sSkill85Mon4          : String;
    sSkill85Mon5          : String;
    //战士属性点控制


  end;
  pTConfig = ^TConfig;

  TThreadInfo = record
    nRunFlag: Integer; //0x00
    boActived: BOOL; //0x04
    dwRunTick: LongWord; //0x08
    Config: pTConfig; //0x0C
    boTerminaled: BOOL; //0x10
    hThreadHandle: THandle; //0x14
    dwThreadID: LongWord; //0x18
    nRunTime: Integer; //0x1C      n1C
    nMaxRunTime: Integer; //0x20   n20
    n24: integer; //0x24
  end;
  pTThreadInfo = ^TThreadInfo;

procedure SetProcessName(sName: string);
procedure CopyStdItemToOStdItem(StdItem: pTStdItem; OStdItem: pTOStdItem);
procedure InitPlugArrayTable();
procedure GetKey;
function AddToProcTable(ProcAddr: Pointer; sProcName: string): Boolean;
function findProcarray(sProcName: string): integer;
function AddToPulgProcTable(sProcName: string): Integer;
function AddToObjTable(Obj: TObject; sObjName: string): Boolean;
function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer;
function GetNextDirection(sx, sy, dx, dy: Integer): byte;
function LoadLineNotice(FileName: string): Boolean;
function LoadLineBanner(FileName: string): Boolean;

function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
procedure MainOutMessage(Msg: string);

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime;
function GetGoldShape(nGold: Integer): Word; //金币在地上显示的外形ID
function GetRandomLook(nBaseLook, nRage: Integer): Integer;
function FilterShowName(sName: string): string;
function FilterItemName(sName: string): string;
function CheckGuildName(sGuildName: string): Boolean;
function CheckUserItems(nIdx: integer; StdItem: pTStdItem): Boolean;
function GetItemNumber(): Integer;
function GetItemNumberEx(): Integer;
function sub_4B2F80(nDir, nRage: Integer): Byte;
function GetValNameNo(sText: string): Integer;
function IsUseItem(nIndex: Integer): Boolean;
function GetMakeItemInfo(sItemName: string): TStringList;
procedure AddLogonCostLog(sMsg: string);
procedure AddGameDataLog(sMsg: string);
procedure TrimStringList(sList: TStringList);
function CanMakeItem(sItemName: string): Boolean;
function CanMoveMap(sMapName: string): Boolean;
function LoadMonSayMsg(): Boolean;
function LoadUserCMd:Integer;
function LoadItemBindIPaddr(): Boolean;
function SaveItemBindIPaddr(): Boolean;
function LoadItemBindAccount(): Boolean;
function SaveItemBindAccount(): Boolean;
function LoadItemBindCharName(): Boolean;
function SaveItemBindCharName(): Boolean;

function LoadItem_Unit(): Boolean;
function SaveItem_Unit(): Boolean;
function SaveAdminList(): Boolean;
function LoadUnMasterList(): Boolean;
function SaveUnMasterList(): Boolean;
function LoadUnForceMasterList(): Boolean;
function SaveUnForceMasterList(): Boolean;
function LoadDisableMoveMap(): Boolean;
function SaveDisableMoveMap(): Boolean;

function GetUseItemName(nIndex: Integer): string;
function GetUseItemIdx(sName: string): Integer;
function LoadMonDropLimitList(): Boolean;
function SaveMonDropLimitList(): Boolean;



function GetBoValue(useritem:PTUserItem;idx:Integer;nIndex:Integer): Boolean;






function LoadTopPlayList(): Boolean;
function TopPlayList(pos: Integer; nType: Integer): pSavePaiHang;
function getPlayListcout(nType: Integer): integer;
function SaveToPlayList(Player: TplayObject): Boolean;
function SavePlayListToFile(): boolean;
function INPlayList(charName: string; nType: Integer): Integer;


function LoadDisableSendMsgList(): Boolean;
function SaveDisableSendMsgList(): Boolean;
function GetDisableSendMsgList(sHumanName: string): Boolean;
function LoadGameLogItemNameList(): Boolean;
function GetGameLogItemNameList(sItemName: string): Byte;
function SaveGameLogItemNameList(): Boolean;
function LoadDenyIPAddrList(): Boolean;

function GetDenyIPAddrList(sIPaddr: string): Boolean;
function SaveDenyIPAddrList(): Boolean;
function LoadDenyAccountList(): Boolean;
function GetDenyAccountList(sAccount: string): Boolean;
function SaveDenyAccountList(): Boolean;
function LoadDenyChrNameList(): Boolean;
function GetDenyChrNameList(sChrName: string): Boolean;
function SaveDenyChrNameList(): Boolean;
function LoadNoClearMonList(): Boolean;
function GetNoClearMonList(sMonName: string): Boolean;
function SaveNoClearMonList(): Boolean;
procedure LoadExp();
procedure LoadGameCommand();
procedure LoadString();
procedure LoadConfig();
function GetRGB(c256: Byte):TColor; stdcall;
procedure SendGameCenterMsg(wIdent: Word; sSendMsg: string);
procedure SendSelfMsg(wIdent: Word; sSendMsg: string);
function GetIPLocal(sIPaddr: string): string;
function IsCheapStuff(tByte: Byte): Boolean;
function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
function GetEvilAppr(nAppr:Integer):pTEvilMonAppr;
procedure LoadQuestion();
var
  RemoteXORKey: Integer = -1;
  LocalXORKey: Integer = -2;
  M2ServerVersion: Single = 2;
  g_nGetLicenseInfo: Integer = -1;
  g_nM2Crc: integer;
  g_dwGameCenterHandle: THandle;
  g_dwSelfHandle: THandle;
  IsDebuggerPresent: function(): Boolean; stdcall;
  CheckVersion: TCheckVersion = nil;
  nCheckVersion: Integer = -1;
  //CertCheck         :TList; //用于检查角色创建释放
  //EventCheck         :TList; //用于检查事件创建释放
{$IF OEMVER = OEM775}
  Level775: TIniFile;
{$IFEND}
  Config: TIniFile;
  CommandConf: TIniFile;
  StringConf: TIniFile;
 // Memo: TMemo;
  ProcArray: TProcArray;
  ObjectArray: TObjectArray;
  PlugProcArray: TProcArray;
  PlugInEngine: TPlugInManage;
  nServerIndex: Integer = 0; //0x004EBC04
  RunSocket: TRunSocket; //0x004EBB84
  MainLogMsgList: TStringList; //0x004EBC60
  LogStringList: TStringList; //0x004EBC64
  LogonCostLogList: TStringList; //0x004EBC68
  g_MapManager: TMapManager; //0x004EBB90
  ItemUnit: TItemUnit; //0x004EBB94
  MagicManager: TMagicManager; //0x004EBB98
  NoticeManager: TNoticeManager; //0x004EBB9C
  g_GuildManager: TGuildManager; //0x004EBBA0
  g_EventManager: TEventManager; //0x004EBBA4
  g_CastleManager: TCastleManager;
  g_QusetionList:TList;
//  g_UserCastle        :TUserCastle;      //0x004EBBA8
  FrontEngine: TFrontEngine; //0x004EBB88
  UserEngine: TUserEngine; //0x004EBB8C
  RobotManage: TRobotManage;
  g_MakeItemList: TStringList; //0x004EBBAC
  g_PetSellInfo : TList;
  g_StartPointList: TGStringList; //0x004EBBB0
  ServerTableList: TList; //0x004EBBB4
  g_DenySayMsgList: TQuickList; //0x004EBBB8
  MiniMapList: TStringList; //0x004EBBBC
  g_UnbindList: TStringList; //0x004EBBC0
  g_bindList: TStringList;
  LineNoticeList: TStringList; //0x004EBBC4
  BannerNotice: TStringList;
  QuestDiaryList: TList; //0x004EBBC8
  ItemEventList: TStringList; //0x004EBBCC
  AbuseTextList: TStringList; //0x004EBBD0
  g_MonSayMsgList: TStringList; //怪物说明信息列表

  g_Item_UnitList: TGStringList; //套装列表
  g_PlantPointList:TGStringList;
  g_ItemRuleList: TGStringList; //物品规则列表
  g_DisableMoveMapList: TGStringList; //禁止移动地图列表
  g_ItemNameList: TGList; //物品别名列表
  g_DisableSendMsgList: TGStringList; //禁止发信息名称列表
  g_MonDropLimitLIst: TGStringList; //怪物爆物品限制
//  g_DisableDealList: TGStringList;
//  g_DisableStorageList: TGStringList;
//  g_DisableYSTakeOnList: TGStringList;
 // g_DisablePlayTakeOnList: TGStringList; //


  g_TopPlayList: TGStringList;
  g_TopPlayListchecktick: dword;
  nUpdateNum: Integer;

  g_ItemBindIPaddr: TGList;
  g_ItemBindAccount: TGList;
  g_ItemBindCharName: TGList;
  g_UnMasterList: TGStringList; //出师记录表
  g_UnForceMasterList: TGStringList; //强行出师记录表
  g_GameLogItemNameList: TGStringList; //游戏日志物品名
  g_boGameLogGold: Boolean;
  g_boGameLogGameGold: Boolean;
  g_boGameLogGamePoint: Boolean;
  g_boGameLogHumanDie: Boolean;
  g_DenyIPAddrList: TGStringList; //IP过滤列表
  g_DenyChrNameList: TGStringList; //角色过滤列表
  g_DenyAccountList: TGStringList; //登录帐号过滤列表
  g_NoClearMonLIst: TGStringList; //不清除怪物列表
  n4EBBD0: Integer;
  g_CheckCode: TCheckCode;
  g_nIdent: Integer;
  g_ProcessMsg: TProcessMessage;
  LogMsgCriticalSection: TRTLCriticalSection; //0x4EBC40
  ProcessMsgCriticalSection: TRTLCriticalSection; //0x4EBC44
  UserDBSection: TRTLCriticalSection;
  ProcessHumanCriticalSection: TRTLCriticalSection;
  ProcessHTimerlistSection: TRTLCriticalSection;
  ProcessStorageSection: TRTLCriticalSection;

  g_EvilApprList:TList;
  g_nTotalHumCount: integer; //0x004EB3C3
  g_boMission: Boolean;
  g_sMissionMap: string;
  g_nMissionX: Integer;
  g_nMissionY: Integer;

  boStartReady: Boolean; //0x4EBC78
  g_bostartup: boolean;

  g_boExitServer: Boolean; //004EBC79
  boFilterWord: Boolean;

  sLogFileName: string; //004EBBFC
  nRunTimeMin: Integer;
  nRunTimeMax: Integer;
  g_nBaseObjTimeMin: Integer;
  g_nBaseObjTimeMax: Integer;
  g_nSockCountMin: Integer;
  g_nSockCountMax: Integer;
  g_nUsrTimeMin: Integer;
  g_nUsrTimeMax: Integer;
  g_nHumCountMin: Integer;
  g_nHumCountMax: Integer;
  g_nMonTimeMin: Integer;
  g_nMonTimeMax: Integer;
  g_nMonGenTime: Integer;
  g_nMonGenTimeMin: Integer;
  g_nMonGenTimeMax: Integer;
  g_nMonProcTime: Integer;
  g_nMonProcTimeMin: Integer;
  g_nMonProcTimeMax: Integer;
  dwUsrRotCountMin: LongWord;
  dwUsrRotCountMax: LongWord;
  dwCheckMachIdCount: LongWord;
  dwCheckMachIdTime: longword;

  g_dwUsrRotCountTick: LongWord; //0x4EBD48          :LongWord;
  g_nProcessHumanLoopTime: Integer; //0x004EBD54    //处理人物列表循环次数
  g_dwHumLimit: LongWord = 30; //0x4EBD98
  g_dwMonLimit: LongWord = 30; //0x4EBD9C
  g_dwZenLimit: LongWord = 5; //0x4EBDA0
  g_dwNpcLimit: LongWord = 5; //0x4EBDA4
  g_dwSocLimit: LongWord = 10; //0x4EBDA8
  g_dwSocCheckTimeOut: LongWord = 2 * 1000; //50;
  nDecLimit: Integer = 20; //0x4EBDAC
  nShiftUsrDataNameNo: Integer;
{$IF OEMVER = OEM775}
  sConfig775FileName: string = '.\775.txt';
{$IFEND}
  sConfigFileName: string = '.\!Setup.txt';
  sExpConfigFileName: string = '.\Exps.ini';
  sCommandFileName: string = '.\Command.ini';
  sStringFileName: string = '.\String.ini';
  g_UserCMDList : TStringList;
  dwRunDBTimeMax: LongWord; //0x004EBC98
  g_dwStartTick: LongWord; //0x004EBD14

  g_dwRunTick: LongWord; //0x4EBD18;
  n4EBD1C: Integer;

  g_nGameTime: Integer;

  g_sMonGenInfo1: string; //0x4EBD58
  g_sMonGenInfo2: string; //0x4EBD78
  g_sProcessName: string;
  g_sOldProcessName: string;
  g_ManageNPC: TNormNpc;

  g_RobotNPC: TNormNpc;
  g_FunctionNPC: TMerchant;
  g_GuildTowerNPC: TMerchant;
  g_SHOPNPC: TMerchant;
  g_DynamicVarList: TList;
  nCurrentMonthly: Integer; //0x004EBD00
  nTotalTimeUsage: Integer; //0x004EBD04
  nLastMonthlyTotalUsage: Integer; //0x004EBD08
  nGrossTotalCnt: Integer; //0x004EBD0C
  nGrossResetCnt: Integer; //0x004EBD10
  n4EBB68: Integer; //0x004EBB68
  n4EBB6C: Integer; //0x004EBB6C
  ColorTable: array[0..255] of TRGBQuad;
  ColorArray: array[0..1023] of Byte = (
    $00, $00, $00, $00, $00, $00, $80, $00, $00, $80, $00, $00, $00, $80, $80, $00,
    $80, $00, $00, $00, $80, $00, $80, $00, $80, $80, $00, $00, $C0, $C0, $C0, $00,
    $97, $80, $55, $00, $C8, $B9, $9D, $00, $73, $73, $7B, $00, $29, $29, $2D, $00,
    $52, $52, $5A, $00, $5A, $5A, $63, $00, $39, $39, $42, $00, $18, $18, $1D, $00,
    $10, $10, $18, $00, $18, $18, $29, $00, $08, $08, $10, $00, $71, $79, $F2, $00,
    $5F, $67, $E1, $00, $5A, $5A, $FF, $00, $31, $31, $FF, $00, $52, $5A, $D6, $00,
    $00, $10, $94, $00, $18, $29, $94, $00, $00, $08, $39, $00, $00, $10, $73, $00,
    $00, $18, $B5, $00, $52, $63, $BD, $00, $10, $18, $42, $00, $99, $AA, $FF, $00,
    $00, $10, $5A, $00, $29, $39, $73, $00, $31, $4A, $A5, $00, $73, $7B, $94, $00,
    $31, $52, $BD, $00, $10, $21, $52, $00, $18, $31, $7B, $00, $10, $18, $2D, $00,
    $31, $4A, $8C, $00, $00, $29, $94, $00, $00, $31, $BD, $00, $52, $73, $C6, $00,
    $18, $31, $6B, $00, $42, $6B, $C6, $00, $00, $4A, $CE, $00, $39, $63, $A5, $00,
    $18, $31, $5A, $00, $00, $10, $2A, $00, $00, $08, $15, $00, $00, $18, $3A, $00,
    $00, $00, $08, $00, $00, $00, $29, $00, $00, $00, $4A, $00, $00, $00, $9D, $00,
    $00, $00, $DC, $00, $00, $00, $DE, $00, $00, $00, $FB, $00, $52, $73, $9C, $00,
    $4A, $6B, $94, $00, $29, $4A, $73, $00, $18, $31, $52, $00, $18, $4A, $8C, $00,
    $11, $44, $88, $00, $00, $21, $4A, $00, $10, $18, $21, $00, $5A, $94, $D6, $00,
    $21, $6B, $C6, $00, $00, $6B, $EF, $00, $00, $77, $FF, $00, $84, $94, $A5, $00,
    $21, $31, $42, $00, $08, $10, $18, $00, $08, $18, $29, $00, $00, $10, $21, $00,
    $18, $29, $39, $00, $39, $63, $8C, $00, $10, $29, $42, $00, $18, $42, $6B, $00,
    $18, $4A, $7B, $00, $00, $4A, $94, $00, $7B, $84, $8C, $00, $5A, $63, $6B, $00,
    $39, $42, $4A, $00, $18, $21, $29, $00, $29, $39, $46, $00, $94, $A5, $B5, $00,
    $5A, $6B, $7B, $00, $94, $B1, $CE, $00, $73, $8C, $A5, $00, $5A, $73, $8C, $00,
    $73, $94, $B5, $00, $73, $A5, $D6, $00, $4A, $A5, $EF, $00, $8C, $C6, $EF, $00,
    $42, $63, $7B, $00, $39, $56, $6B, $00, $5A, $94, $BD, $00, $00, $39, $63, $00,
    $AD, $C6, $D6, $00, $29, $42, $52, $00, $18, $63, $94, $00, $AD, $D6, $EF, $00,
    $63, $8C, $A5, $00, $4A, $5A, $63, $00, $7B, $A5, $BD, $00, $18, $42, $5A, $00,
    $31, $8C, $BD, $00, $29, $31, $35, $00, $63, $84, $94, $00, $4A, $6B, $7B, $00,
    $5A, $8C, $A5, $00, $29, $4A, $5A, $00, $39, $7B, $9C, $00, $10, $31, $42, $00,
    $21, $AD, $EF, $00, $00, $10, $18, $00, $00, $21, $29, $00, $00, $6B, $9C, $00,
    $5A, $84, $94, $00, $18, $42, $52, $00, $29, $5A, $6B, $00, $21, $63, $7B, $00,
    $21, $7B, $9C, $00, $00, $A5, $DE, $00, $39, $52, $5A, $00, $10, $29, $31, $00,
    $7B, $BD, $CE, $00, $39, $5A, $63, $00, $4A, $84, $94, $00, $29, $A5, $C6, $00,
    $18, $9C, $10, $00, $4A, $8C, $42, $00, $42, $8C, $31, $00, $29, $94, $10, $00,
    $10, $18, $08, $00, $18, $18, $08, $00, $10, $29, $08, $00, $29, $42, $18, $00,
    $AD, $B5, $A5, $00, $73, $73, $6B, $00, $29, $29, $18, $00, $4A, $42, $18, $00,
    $4A, $42, $31, $00, $DE, $C6, $63, $00, $FF, $DD, $44, $00, $EF, $D6, $8C, $00,
    $39, $6B, $73, $00, $39, $DE, $F7, $00, $8C, $EF, $F7, $00, $00, $E7, $F7, $00,
    $5A, $6B, $6B, $00, $A5, $8C, $5A, $00, $EF, $B5, $39, $00, $CE, $9C, $4A, $00,
    $B5, $84, $31, $00, $6B, $52, $31, $00, $D6, $DE, $DE, $00, $B5, $BD, $BD, $00,
    $84, $8C, $8C, $00, $DE, $F7, $F7, $00, $18, $08, $00, $00, $39, $18, $08, $00,
    $29, $10, $08, $00, $00, $18, $08, $00, $00, $29, $08, $00, $A5, $52, $00, $00,
    $DE, $7B, $00, $00, $4A, $29, $10, $00, $6B, $39, $10, $00, $8C, $52, $10, $00,
    $A5, $5A, $21, $00, $5A, $31, $10, $00, $84, $42, $10, $00, $84, $52, $31, $00,
    $31, $21, $18, $00, $7B, $5A, $4A, $00, $A5, $6B, $52, $00, $63, $39, $29, $00,
    $DE, $4A, $10, $00, $21, $29, $29, $00, $39, $4A, $4A, $00, $18, $29, $29, $00,
    $29, $4A, $4A, $00, $42, $7B, $7B, $00, $4A, $9C, $9C, $00, $29, $5A, $5A, $00,
    $14, $42, $42, $00, $00, $39, $39, $00, $00, $59, $59, $00, $2C, $35, $CA, $00,
    $21, $73, $6B, $00, $00, $31, $29, $00, $10, $39, $31, $00, $18, $39, $31, $00,
    $00, $4A, $42, $00, $18, $63, $52, $00, $29, $73, $5A, $00, $18, $4A, $31, $00,
    $00, $21, $18, $00, $00, $31, $18, $00, $10, $39, $18, $00, $4A, $84, $63, $00,
    $4A, $BD, $6B, $00, $4A, $B5, $63, $00, $4A, $BD, $63, $00, $4A, $9C, $5A, $00,
    $39, $8C, $4A, $00, $4A, $C6, $63, $00, $4A, $D6, $63, $00, $4A, $84, $52, $00,
    $29, $73, $31, $00, $5A, $C6, $63, $00, $4A, $BD, $52, $00, $00, $FF, $10, $00,
    $18, $29, $18, $00, $4A, $88, $4A, $00, $4A, $E7, $4A, $00, $00, $5A, $00, $00,
    $00, $88, $00, $00, $00, $94, $00, $00, $00, $DE, $00, $00, $00, $EE, $00, $00,
    $00, $FB, $00, $00, $94, $5A, $4A, $00, $B5, $73, $63, $00, $D6, $8C, $7B, $00,
    $D6, $7B, $6B, $00, $FF, $88, $77, $00, $CE, $C6, $C6, $00, $9C, $94, $94, $00,
    $C6, $94, $9C, $00, $39, $31, $31, $00, $84, $18, $29, $00, $84, $00, $18, $00,
    $52, $42, $4A, $00, $7B, $42, $52, $00, $73, $5A, $63, $00, $F7, $B5, $CE, $00,
    $9C, $7B, $8C, $00, $CC, $22, $77, $00, $FF, $AA, $DD, $00, $2A, $B4, $F0, $00,
    $9F, $00, $DF, $00, $B3, $17, $E3, $00, $F0, $FB, $FF, $00, $A4, $A0, $A0, $00,
    $80, $80, $80, $00, $00, $00, $FF, $00, $00, $FF, $00, $00, $00, $FF, $FF, $00,
    $FF, $00, $00, $00, $FF, $00, $FF, $00, $FF, $FF, $00, $00, $FF, $FF, $FF, $00
    );

  g_GMRedMsgCmd: Char = '!';
  g_nGMREDMSGCMD: Integer = 6;

  g_dwSendOnlineTick: LongWord;
  g_HighLevelHuman: TObject = nil;
  g_HighPKPointHuman: TObject = nil;
  g_HighDCHuman: TObject = nil;
  g_HighMCHuman: TOBject = nil;
  g_HighSCHuman: TObject = nil;
  g_HighOnlineHuman: TObject = nil;
  g_dwSpiritMutinyTick: LongWord;

{$IF USECODE = USEREMOTECODE}
  g_Encode6BitBuf: TEncode6BitBuf = (
    $55, $8B, $EC, $83, $C4, $E0, $89, $4D, $F4, $89, $55, $F8, $89, $45, $FC, $33,
    $C0, $89, $45, $EC, $C6, $45, $E5, $00, $33, $C0, $89, $45, $E8, $8B, $45, $F4,
    $48, $85, $C0, $0F, $8C, $C3, $00, $00, $00, $40, $89, $45, $E0, $C7, $45, $F0,
    $00, $00, $00, $00, $8B, $45, $E8, $3B, $45, $08, $0F, $8D, $AC, $00, $00, $00,
    $8B, $45, $FC, $8B, $55, $F0, $8A, $04, $10, $88, $45, $E6, $8B, $4D, $EC, $83,
    $C1, $02, $33, $C0, $8A, $45, $E6, $D3, $E8, $0A, $45, $E5, $24, $3F, $88, $45,
    $E7, $8B, $45, $EC, $83, $C0, $02, $B9, $08, $00, $00, $00, $2B, $C8, $33, $C0,
    $8A, $45, $E6, $D3, $E0, $C1, $E8, $02, $24, $3F, $88, $45, $E5, $83, $45, $EC,
    $02, $83, $7D, $EC, $06, $7D, $13, $8A, $45, $E7, $04, $3C, $8B, $55, $F8, $8B,
    $4D, $E8, $88, $04, $0A, $FF, $45, $E8, $EB, $46, $8B, $45, $08, $48, $3B, $45,
    $E8, $7E, $23, $8A, $45, $E7, $04, $3C, $8B, $55, $F8, $8B, $4D, $E8, $88, $04,
    $0A, $8A, $45, $E5, $04, $3C, $8B, $55, $F8, $8B, $4D, $E8, $88, $44, $0A, $01,
    $83, $45, $E8, $02, $EB, $11, $8A, $45, $E7, $04, $3C, $8B, $55, $F8, $8B, $4D,
    $E8, $88, $04, $0A, $FF, $45, $E8, $33, $C0, $89, $45, $EC, $C6, $45, $E5, $00,
    $FF, $45, $F0, $FF, $4D, $E0, $0F, $85, $48, $FF, $FF, $FF, $83, $7D, $EC, $00,
    $7E, $11, $8A, $45, $E5, $04, $3C, $8B, $55, $F8, $8B, $4D, $E8, $88, $04, $0A,
    $FF, $45, $E8, $8B, $45, $F8, $8B, $55, $E8, $C6, $04, $10, $00, $8B, $E5, $5D,
    $C2, $04, $00, $90);

  g_Decode6BitBuf: TDecode6BitBuf = (
    $55, $8B, $EC, $83, $C4, $DC, $89, $4D, $F4, $89, $55, $F8, $89, $45, $FC, $C7,
    $45, $EC, $02, $00, $00, $00, $33, $C0, $89, $45, $E8, $33, $C0, $89, $45, $E4,
    $C6, $45, $E2, $00, $8B, $45, $F4, $48, $85, $C0, $0F, $8C, $B5, $00, $00, $00,
    $40, $89, $45, $DC, $C7, $45, $F0, $00, $00, $00, $00, $8B, $45, $FC, $8B, $55,
    $F0, $0F, $B6, $04, $10, $83, $E8, $3C, $78, $10, $8B, $45, $FC, $8B, $55, $F0,
    $8A, $04, $10, $2C, $3C, $88, $45, $E3, $EB, $0A, $33, $C0, $89, $45, $E4, $E9,
    $81, $00, $00, $00, $8B, $45, $E4, $3B, $45, $08, $7D, $79, $8B, $45, $E8, $83,
    $C0, $06, $83, $F8, $08, $7C, $43, $B9, $06, $00, $00, $00, $2B, $4D, $EC, $8A,
    $45, $E3, $24, $3F, $25, $FF, $00, $00, $00, $D3, $E8, $0A, $45, $E2, $88, $45,
    $E1, $8B, $45, $F8, $8B, $55, $E4, $8A, $4D, $E1, $88, $0C, $10, $FF, $45, $E4,
    $33, $C0, $89, $45, $E8, $83, $7D, $EC, $06, $7D, $06, $83, $45, $EC, $02, $EB,
    $09, $C7, $45, $EC, $02, $00, $00, $00, $EB, $1F, $8B, $4D, $EC, $8A, $45, $E3,
    $D2, $E0, $8B, $55, $EC, $22, $82, $02, $15, $5E, $00, $88, $45, $E2, $B8, $08,
    $00, $00, $00, $2B, $45, $EC, $01, $45, $E8, $FF, $45, $F0, $FF, $4D, $DC, $0F,
    $85, $56, $FF, $FF, $FF, $8B, $45, $F8, $8B, $55, $E4, $C6, $04, $10, $00, $8B,
    $E5, $5D, $C2, $04, $00);
{$IFEND}
  g_Config: TConfig = (
    nConfigSize: SizeOf(TConfig);
    sServerName: '倚天网游';
    sServerIPaddr: '127.0.0.1';
    sRegServerAddr: '127.0.0.1';
    nRegServerPort: 63000;
    sRegKey: '';
    sWebSite: 'http://www.gameofwoool.cn';
    sBbsSite: 'http://www.gameofwoool.cn';
    sClientDownload: ' ';
    sQQ: '114771847';
    sPhone: '123456789';
    sBankAccount0: '银行信息';
    sBankAccount1: '银行信息';
    sBankAccount2: '银行信息';
    sBankAccount3: '银行信息';
    sBankAccount4: '银行信息';
    sBankAccount5: '银行信息';
    sBankAccount6: '银行信息';
    sBankAccount7: '银行信息';
    sBankAccount8: '银行信息';
    sBankAccount9: '银行信息';
    nServerNumber: 0;
    boVentureServer: False;
    boTestServer: True;
    boServiceMode: False;
    boNonPKServer: False;
    boSafeOffLine: False;
    nTestLevel: 1;
    nTestGold: 0;
    nTestUserLimit: 1000;
    nSendBlock: 1024;
    nCheckBlock: 4069;
    nAvailableBlock: 8000;
    nGateLoad: 0;
    nUserFull: 1000;
    nZenFastStep: 300;
    sGateAddr: '127.0.0.1';
    nGatePort: 5000;
    sDBAddr: '127.0.0.1';
    nDBPort: 6000;
    sIDSAddr: '127.0.0.1';
    nIDSPort: 5600;
    sMsgSrvAddr: '127.0.0.1';
    nMsgSrvPort: 4900;
    sLogServerAddr: '127.0.0.1';
    nLogServerPort: 10000;
    boDiscountForNightTime: False;
    nHalfFeeStart: 2;
    nHalfFeeEnd: 10;
    boViewHackMessage: False;
    boViewAdmissionFailure: False;
    sBaseDir: '.\BaseDir\';
    sGuildDir: '.\GuildDir\List\';
    sGuildFile: '.\GuildDir\List.txt';
    sVentureDir: '.\VentureDir\';
    sConLogDir: '.\ConLogDir\';
    sCastleDir: '.\CastleDir\';
    sCastleFile: '.\CastleDir\List.txt';
    sEnvirDir: '.\Envir\';
    sFriendsDir: '.\Envir\Friends\';
    sMapDir: '.\MapDir\';
    sNoticeDir: '.\Notice\';
    sLogDir: '.\Log\';
    sPlugDir: '.\';
    sClientFile1: 'mir.1';
    sClientFile2: 'mir.2';
    sClientFile3: 'mir.3';

    sClothsMan: '布衣(男)';
    sClothsWoman: '布衣(女)';
    sWoodenSword: '木剑';
    sCandle: '蜡烛';
    sBasicDrug: '金创药(小量)';
    sGoldStone: '金矿';
    sSilverStone: '银矿';
    sSteelStone: '铁矿';
    sCopperStone: '铜矿';
    sBlackStone: '黑铁矿石';
    sZuma: ('逆魔卫士', '逆魔雕像', '逆魔弓箭手', '逆魔侍卫');
    sBee: '白蚁';
    sSeeBee1: '寒荒守护者1';
    sSeeBee2: '寒荒守护者2';
    sSeeBee3: '寒荒守护者3';
    scallboss1: '蛇妖王';
    scallboss2: '禁地魔王';
    scallboss3: '通天教主';
    scallboss4: '铁血魔王';
    scallboss5: '阿修罗神';
    sSpider: '幽灵虫';
    sWomaHorn: '战斗号角';
    sZumaPiece: '魔神雕像';
    sGameGoldName: '元宝';
    sGamePointName: '游戏点';
    sPayMentPointName: '秒卡点';
    ClbADDTrains: 10; //吃豹粮增加的点数
    ClbLevelUpTrains: 100; //每次升级需要的点数
    PushTEBOTime: 2000;
    RushMotaeboTime: 2000;
    nMagPowerDefenceRate: 4;
    nMagBubbleDefenceRate: 8;
    ShowHitHp: 1;
    SafeAreaHint: 1;
    ShowHpPresent: true;
    OffLineSuper: true;
    PlayerSkillTree: true;
    FireHitPowerRate:100;
    NoDoubleFireHit:True;
    PDPowerRate:100;
    PJPowerRate:100;
    MagDefenceUpPerdureEx:100;
    Skill88PowerRate:100;
    DiDingPowerRate:100 ;
    DiDingAllowPK:True ;
    DiDingUseTime:10;
    BatflyMaxRage:18;
    BatflyRate:5;
    DoMotaeboDelay:2000;
    YSSkillTree: true;
    ComSkillNoDecVitaLity:False;

    boUsePaihang: true;
    boUseLingzu:True;


    VitaLityAddSpeed:2;
    boUseSelfDecodeScript: true;
    GoldAddinBag: 0;
    DBSocket: INVALID_SOCKET;
    nHealthFillTime: 300;
    nSpellFillTime: 800;
    nMonUpLvNeedKillBase: 100;
    nMonUpLvRate: 16;
    MonUpLvNeedKillCount: (0, 0, 50, 100, 200, 300, 600, 1200);
    SlaveColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, 249);
//    dwNeedExps              :TLevelNeedExp;
    WideAttack: (7, 1, 2);
    CrsAttack: (7, 1, 2, 3, 4, 5, 6);
    SpitMap: (
    ((0, 0, 1, 0, 0), //DR_UP
    (0, 0, 1, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 1), //DR_UPRIGHT
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_RIGHT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 1),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_DOWNRIGHT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 1, 0),
    (0, 0, 0, 0, 1)),
    ((0, 0, 0, 0, 0), //DR_DOWN
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 1, 0, 0),
    (0, 0, 1, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_DOWNLEFT
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 1, 0, 0, 0),
    (1, 0, 0, 0, 0)),
    ((0, 0, 0, 0, 0), //DR_LEFT
    (0, 0, 0, 0, 0),
    (1, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0)),
    ((1, 0, 0, 0, 0), //DR_UPLEFT
    (0, 1, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0),
    (0, 0, 0, 0, 0))
    );

    sHomeMap: '0';
    nHomeX: 289;
    nHomeY: 618;
    sRedHomeMap: '3';
    nRedHomeX: 845;
    nRedHomeY: 674;
    sRedDieHomeMap: '3';
    nRedDieHomeX: 839;
    nRedDieHomeY: 668;
    dwDecPkPointTime: 2 * 60 * 1000;
    nDecPkPointCount: 1;
    dwPKFlagTime: 60 * 1000;
    nKillHumanAddPKPoint: 100;
    nKillHumanDecLuckPoint: 500;
    dwDecLightItemDrugTime: 500;
    nSafeZoneSize: 10; // 安全区大小
    nStartPointSize: 2;
    dwHumanGetMsgTime: 200;
    nGroupMembersMax: 10;
    nGuildMembersMax: 200;
    sFireBallSkill: '火球术';
    sHealSkill: '治愈术';
    ReNewNameColor: ($FF, $FE, $93, $9A, $E5, $A8, $B4, $FC, $B4, $FC);
    dwReNewNameColorTime: 2000;
    boReNewChangeColor: True;
    boReNewLevelClearExp: True;
    BonusAbilofWarr: (DC: 17; MC: 20; SC: 20; AC: 20; MAC: 20; HP: 1; MP: 3; Hit: 20; Speed: 35; X2: 0);
    BonusAbilofWizard: (DC: 17; MC: 25; SC: 30; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 25; Speed: 35; X2: 0);
    BonusAbilofTaos: (DC: 20; MC: 30; SC: 17; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 30; Speed: 30; X2: 0);
    NakedAbilofWarr: (DC: 512; MC: 2560; SC: 20; AC: 768; MAC: 1280; HP: 0; MP: 0; Hit: 0; Speed: 0; X2: 0);
    NakedAbilofWizard: (DC: 512; MC: 512; SC: 2560; AC: 1280; MAC: 768; HP: 0; MP: 0; Hit: 5; Speed: 0; X2: 0);
    NakedAbilofTaos: (DC: 20; MC: 30; SC: 17; AC: 20; MAC: 15; HP: 2; MP: 1; Hit: 30; Speed: 30; X2: 0);
    nUpgradeWeaponMaxPoint: 20;
    nUpgradeWeaponPrice: 10000;
    dwUPgradeWeaponGetBackTime: 60 * 60 * 1000;
    nClearExpireUpgradeWeaponDays: 8;
    nUpgradeWeaponDCRate: 100;
    nUpgradeWeaponDCTwoPointRate: 30;
    nUpgradeWeaponDCThreePointRate: 200;
    nUpgradeWeaponSCRate: 100;
    nUpgradeWeaponSCTwoPointRate: 30;
    nUpgradeWeaponSCThreePointRate: 200;
    nUpgradeWeaponMCRate: 100;
    nUpgradeWeaponMCTwoPointRate: 30;
    nUpgradeWeaponMCThreePointRate: 200;
    dwProcessMonstersTime: 10;
    dwRegenMonstersTime: 200;
    nMonGenRate: 10;
    nProcessMonRandRate: 5;
    nProcessMonLimitCount: 5;
    nSoftVersionDate: 20120728; //v2.0.0.0
    boCanOldClientLogon: True;
    boUseSafeZoneLight: True;
    nUseSafeZoneLightType: 4;

    dwConsoleShowUserCountTime: 10 * 60 * 1000;
    dwShowLineNoticeTime: 5 * 60 * 1000;
    ShowBannerNoticeTime: 10 * 1000;
    HideBannerNoticeTime: 10 * 1000;


    nLineNoticeColor: 2;
    nStartCastleWarDays: 4;
    nStartCastlewarTime: 20;
    dwShowCastleWarEndMsgTime: 10 * 60 * 1000;
    dwCastleWarTime: 3 * 60 * 60 * 1000;
    dwGetCastleTime: 10 * 60 * 1000;
    dwGuildWarTime: 3 * 60 * 60 * 1000;
    nBuildGuildPrice: 1000000;
    nGuildWarPrice: 30000;
    nMakeDurgPrice: 100;
    nHumanMaxGold: 10000000;
    nHumanTryModeMaxGold: 100000;
    nTryModeLevel: 7;
    boTryModeUseStorage: False;
    nCanShoutMsgLevel: 7;
    boShowMakeItemMsg: False;
    boShutRedMsgShowGMName: False;
    nSayMsgMaxLen: 80;
    dwSayMsgTime: 3 * 1000;
    nSayMsgCount: 2;
    dwDisableSayMsgTime: 60 * 1000;
    nSayRedMsgMaxLen: 255;
    boShowGuildName: True;
    boShowRankLevelName: False;
    boMonSayMsg: False;
    nStartPermission: 0;
    boKillHumanWinLevel: False;
    boKilledLostLevel: False;
    boKillHumanWinExp: False;
    boKilledLostExp: False;
    nKillHumanWinLevel: 1;
    nKilledLostLevel: 1;
    nKillHumanWinExp: 100000;
    nKillHumanLostExp: 100000;
    nHumanLevelDiffer: 10;
    nMonsterPowerRate: 10;
    nItemsPowerRate: 10;
    nItemsACPowerRate: 10;
    boSendOnlineCount: True;
    nSendOnlineCountRate: 10;
    dwSendOnlineTime: 5 * 60 * 1000;
    dwSaveHumanRcdTime: 10 * 60 * 1000;
    dwHumanFreeDelayTime: 5 * 60 * 1000;
    dwMakeGhostTime: 3 * 60 * 1000;
    dwClearDropOnFloorItemTime: 60 * 60 * 1000;
    dwFloorItemCanPickUpTime: 2 * 60 * 1000;
    boPasswordLockSystem: False; //是否启用密码保护系统
    boLockDealAction: False; //是否锁定交易操作
    boLockDropAction: False; //是否锁定扔物品操作
    boLockGetBackItemAction: False; //是否锁定取仓库操作
    boLockHumanLogin: False; //是否锁定走操作
    boLockWalkAction: False; //是否锁定走操作
    boLockRunAction: False; //是否锁定跑操作
    boLockHitAction: False; //是否锁定攻击操作
    boLockSpellAction: False; //是否锁定魔法操作
    boLockSendMsgAction: False; //是否锁定发信息操作
    boLockUserItemAction: False; //是否锁定使用物品操作
    boLockInObModeAction: False; //锁定时进入隐身状态
    nPasswordErrorCountLock: 3; //输入密码错误超过 指定次数则锁定密码
    boPasswordErrorKick: False; //输入密码错误超过限制则踢下线
    nSendRefMsgRange: 12;
    boDecLampDura: True;
    boHungerSystem: False;
    boHungerDecHP: False;
    btShieldRate:10;
    boHungerDecPower: False;
    boDiableHumanRun: True;
    boRunHuman: False;
    boRunMon: False;
    boRunNpc: False;
    boRunGuard: False;
    boWarDisHumRun: False;
    boGMRunAll: False;
    dwTryDealTime: 3000;
    dwDealOKTime: 1000;
    boCanNotGetBackDeal: True;
    boDisableDeal: False;
    boDisableSell :False ;
    boDisablePetSell:False ;
    nMasterOKLevel: 500;
    nMasterRunScript: true;
    nMasterOKCreditPoint: 0;
    nMasterOKBonusPoint: 0;
    boPKLevelProtect: False;
    nPKProtectLevel: 10;
    nRedPKProtectLevel: 10;
    nItemPowerRate: 10000;
    nItemExpRate: 10000;
    nScriptGotoCountLimit: 30;
    btHearMsgFColor: $00; //前景
    btHearMsgBColor: $FF; //背景
    btWhisperMsgFColor: $FC; //前景
    btWhisperMsgBColor: $FF; //背景
    btGMWhisperMsgFColor: $FF; //前景
    btGMWhisperMsgBColor: $38; //背景
    btCryMsgFColor: $0; //前景
    btCryMsgBColor: $97; //背景
    btGreenMsgFColor: $DB; //前景
    btGreenMsgBColor: $FF; //背景
    btBlueMsgFColor: $FF; //前景
    btBlueMsgBColor: $FC; //背景
    btRedMsgFColor: $FF; //前景
    btRedMsgBColor: $38; //背景
    btYellowMsgFColor: $FF; //前景
  //  btYellowMsgBColorMsgBColor: 151; //背景
    btGuildMsgFColor: $DB; //前景
    btGuildMsgBColor: $FF; //背景
    btGroupMsgFColor: $C4; //前景
    btGroupMsgBColor: $FF; //背景
    btCustMsgFColor: $FC; //前景
    btCustMsgBColor: $FF; //背景
    nMonRandomAddValue: 10;
    nMakeRandomAddValue: 10;
    nWeaponDCAddValueMaxLimit: 12;
    nWeaponDCAddValueRate: 15;
    nWeaponMCAddValueMaxLimit: 12;
    nWeaponMCAddValueRate: 15;
    nWeaponSCAddValueMaxLimit: 12;
    nWeaponSCAddValueRate: 15;
    nDressDCAddRate: 40;
    nDressDCAddValueMaxLimit: 6;
    nDressDCAddValueRate: 20;
    nDressMCAddRate: 40;
    nDressMCAddValueMaxLimit: 6;
    nDressMCAddValueRate: 20;
    nDressSCAddRate: 40;
    nDressSCAddValueMaxLimit: 6;
    nDressSCAddValueRate: 20;
    nNeckLace202124DCAddRate: 40;
    nNeckLace202124DCAddValueMaxLimit: 6;
    nNeckLace202124DCAddValueRate: 20;
    nNeckLace202124MCAddRate: 40;
    nNeckLace202124MCAddValueMaxLimit: 6;
    nNeckLace202124MCAddValueRate: 20;
    nNeckLace202124SCAddRate: 40;
    nNeckLace202124SCAddValueMaxLimit: 6;
    nNeckLace202124SCAddValueRate: 20;
    nNeckLace19DCAddRate: 30;
    nNeckLace19DCAddValueMaxLimit: 6;
    nNeckLace19DCAddValueRate: 20;
    nNeckLace19MCAddRate: 30;
    nNeckLace19MCAddValueMaxLimit: 6;
    nNeckLace19MCAddValueRate: 20;
    nNeckLace19SCAddRate: 30;
    nNeckLace19SCAddValueMaxLimit: 6;
    nNeckLace19SCAddValueRate: 20;
    nArmRing26DCAddRate: 30;
    nArmRing26DCAddValueMaxLimit: 6;
    nArmRing26DCAddValueRate: 20;
    nArmRing26MCAddRate: 30;
    nArmRing26MCAddValueMaxLimit: 6;
    nArmRing26MCAddValueRate: 20;
    nArmRing26SCAddRate: 30;
    nArmRing26SCAddValueMaxLimit: 6;
    nArmRing26SCAddValueRate: 20;
    nRing22DCAddRate: 30;
    nRing22DCAddValueMaxLimit: 6;
    nRing22DCAddValueRate: 20;
    nRing22MCAddRate: 30;
    nRing22MCAddValueMaxLimit: 6;
    nRing22MCAddValueRate: 20;
    nRing22SCAddRate: 30;
    nRing22SCAddValueMaxLimit: 6;
    nRing22SCAddValueRate: 20;
    nRing23DCAddRate: 30;
    nRing23DCAddValueMaxLimit: 6;
    nRing23DCAddValueRate: 20;
    nRing23MCAddRate: 30;
    nRing23MCAddValueMaxLimit: 6;
    nRing23MCAddValueRate: 20;
    nRing23SCAddRate: 30;
    nRing23SCAddValueMaxLimit: 6;
    nRing23SCAddValueRate: 20;
    nHelMetDCAddRate: 30;
    nHelMetDCAddValueMaxLimit: 6;
    nHelMetDCAddValueRate: 20;
    nHelMetMCAddRate: 30;
    nHelMetMCAddValueMaxLimit: 6;
    nHelMetMCAddValueRate: 20;
    nHelMetSCAddRate: 30;
    nHelMetSCAddValueMaxLimit: 6;
    nHelMetSCAddValueRate: 20;
    nUnknowHelMetACAddRate: 20;
    nUnknowHelMetACAddValueMaxLimit: 4;
    nUnknowHelMetMACAddRate: 20;
    nUnknowHelMetMACAddValueMaxLimit: 4;
    nUnknowHelMetDCAddRate: 30;
    nUnknowHelMetDCAddValueMaxLimit: 3;
    nUnknowHelMetMCAddRate: 30;
    nUnknowHelMetMCAddValueMaxLimit: 3;
    nUnknowHelMetSCAddRate: 30;
    nUnknowHelMetSCAddValueMaxLimit: 3;
    nUnknowRingACAddRate: 20;
    nUnknowRingACAddValueMaxLimit: 4;
    nUnknowRingMACAddRate: 20;
    nUnknowRingMACAddValueMaxLimit: 4;
    nUnknowRingDCAddRate: 20;
    nUnknowRingDCAddValueMaxLimit: 6;
    nUnknowRingMCAddRate: 20;
    nUnknowRingMCAddValueMaxLimit: 6;
    nUnknowRingSCAddRate: 20;
    nUnknowRingSCAddValueMaxLimit: 6;
    nUnknowNecklaceACAddRate: 20;
    nUnknowNecklaceACAddValueMaxLimit: 5;
    nUnknowNecklaceMACAddRate: 20;
    nUnknowNecklaceMACAddValueMaxLimit: 5;
    nUnknowNecklaceDCAddRate: 30;
    nUnknowNecklaceDCAddValueMaxLimit: 5;
    nUnknowNecklaceMCAddRate: 30;
    nUnknowNecklaceMCAddValueMaxLimit: 5;
    nUnknowNecklaceSCAddRate: 30;
    nUnknowNecklaceSCAddValueMaxLimit: 5;
    nMonOneDropGoldCount: 2000;
    nMakeMineHitRate: 4; //挖矿命中率
    nMakeMineRate: 12; //挖矿率
    nStoneTypeRate: 120;
    nStoneTypeRateMin: 56;
    nGoldStoneMin: 1;
    nGoldStoneMax: 2;
    nSilverStoneMin: 3;
    nSilverStoneMax: 20;
    nSteelStoneMin: 21;
    nSteelStoneMax: 45;
    nBlackStoneMin: 46;
    nBlackStoneMax: 56;
    nStoneMinDura: 3000;
    nStoneGeneralDuraRate: 13000;
    nStoneAddDuraRate: 20;
    nStoneAddDuraMax: 10000;
    nWinLottery6Min: 1;
    nWinLottery6Max: 4999;
    nWinLottery5Min: 14000;
    nWinLottery5Max: 15999;
    nWinLottery4Min: 16000;
    nWinLottery4Max: 16149;
    nWinLottery3Min: 16150;
    nWinLottery3Max: 16169;
    nWinLottery2Min: 16170;
    nWinLottery2Max: 16179;
    nWinLottery1Min: 16180;
    nWinLottery1Max: 16185; //16180 + 1820;
    nWinLottery1Gold: 1000000;
    nWinLottery2Gold: 200000;
    nWinLottery3Gold: 100000;
    nWinLottery4Gold: 10000;
    nWinLottery5Gold: 1000;
    nWinLottery6Gold: 500;
    nWinLotteryRate: 30000;
    nWinLotteryCount: 0;
    nNoWinLotteryCount: 0;
    nWinLotteryLevel1: 0;
    nWinLotteryLevel2: 0;
    nWinLotteryLevel3: 0;
    nWinLotteryLevel4: 0;
    nWinLotteryLevel5: 0;
    nWinLotteryLevel6: 0;
 //   GlobalVal                           :(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
    nItemNumber: 0;
    nItemNumberEx: High(Integer) div 2;
    nGuildRecallTime: 180;
    nGroupRecallTime: 180;
    boControlDropItem: False;
    boInSafeDisableDrop: False;
    nCanDropGold: 1000;
    nCanDropPrice: 500;
    boSendCustemMsg: True;
    boSubkMasterSendMsg: True;
    nSuperRepairPriceRate: 3; //特修价格倍数
    nRepairItemDecDura: 30; //普通修理掉持久数(特持久上限减下限再除以此数为减的数值)
    boDieScatterBag: True;
    nDieScatterBagRate: 3;
    boDieRedScatterBagAll: True;
    nDieDropUseItemRate: 30;
    nDieRedDropUseItemRate: 15;
    boDieDropGold: False;
    boKillByHumanDropUseItem: False;
    boKillByMonstDropUseItem: True;
    boKickExpireHuman: False;
    nGuildRankNameLen: 16;
    nGuildMemberMaxLimit: 200;
    nGuildNameLen: 16;
    nAttackPosionRate: 5;
    nAttackPosionTime: 5;
    dwRevivalTime: 60 * 1000; //复活间隔时间
    boUserMoveCanDupObj: False;
    boUserMoveCanOnItem: True;
    dwUserMoveTime: 10;
    dwPKDieLostExpRate: 1000;
    nPKDieLostLevelRate: 20000;
    btPKFlagNameColor: $2F;
    btPKLevel1NameColor: $FB;
    btPKLevel2NameColor: $F9;
    btAllyAndGuildNameColor: $B4;
    btWarGuildNameColor: $45;
    btInFreePKAreaNameColor: $DD;
    boSpiritMutiny: False;
    boEvilAddItemVal:False;
    nKillMonAddZMZRate : 60;
    nKillMonAddZMZMax  : 10;
    nAddDarkofZMZ      : 1;
    nAddDarkofValue    : 10;
    nAddDarkofRandValue: 5;

    nEvilDc1  :(1,1,2,2,3);
    nEvilDc2  :(1,2,3,5,5);
    nEvilSc1  :(1,1,2,2,3);
    nEvilSc2  :(1,2,3,5,5);
    nEvilMc1  :(1,1,2,2,3);
    nEvilMc2  :(1,2,3,5,5);

    nEvilDcRate1  :(60,50,50,40,40);
    nEvilDcRate2  :(1,1,1,1,1);
    nEvilScRate1  :(60,50,50,40,40);
    nEvilScRate2  :(1,1,1,1,1);
    nEvilMcRate1  :(60,50,50,40,40);
    nEvilMcRate2  :(1,1,1,1,1);
    dwSpiritMutinyTime: 30 * 60 * 1000;
    nSpiritPowerRate: 2;
    boMasterDieMutiny: False;
    nMasterDieMutinyRate: 5;
    nMasterDieMutinyPower: 10;
    nMasterDieMutinySpeed: 5;
    boBBMonAutoChangeColor: False;
    dwBBMonAutoChangeColorTime: 3000;
    boOldClientShowHiLevel: True;
    boShowScriptActionMsg: True;
    nRunSocketDieLoopLimit: 100;
    boThreadRun: False;
    boShowExceptionMsg: False;
    boShowPreFixMsg: True;
    nMagicAttackRage: 8; //魔法锁定范围
    nDropItemRage: 4;
    sBoneFamm: '变异骷髅';
    nBoneFammCount: 1;
    sSuperBoneFamm: '强化骷髅';
    nSuperBoneFammCount: 2;


//    g_Config.BoneFammArray                       :array[0..9] of TRecallMigic;
    sDogz: '神兽';
    nDogzCount: 1;
//    g_Config.DogzArray                           :array[0..9] of TRecallMigic;
    nAmyOunsulPoint: 10;
    boDisableInSafeZoneFireCross: False;
    boGroupMbAttackPlayObject: True;
    dwPosionDecHealthTime: 2500;
    nPosionDamagarmor: 12; //中红毒着持久及减防量（实际大小为 12 / 10）
    boLimitSwordLong: False;
    nSwordLongPowerRate: 100;
    nFireBoomRage: 1;
    nSnowWindRange: 1;
    nElecBlizzardRange: 2;
    nMagTurnUndeadLevel: 50; //圣言怪物等级限制
    nMagTammingLevel: 50; //诱惑之光怪物等级限制
    nMagTammingTargetLevel: 10; //诱惑怪物相差等级机率，此数字越小机率越大；
    nMagTammingHPRate: 100; //成功机率=怪物最高HP 除以 此倍率，此倍率越大诱惑机率越高
    nMagTammingCount: 5;
    nMabMabeHitRandRate: 100;
    nMabMabeHitMinLvLimit: 10;
    nMabMabeHitSucessRate: 21;
    nMabMabeHitMabeTimeRate: 20;
    sCastleName: '沙巴克';
    sCastleHomeMap: '3';
    nCastleHomeX: 644;
    nCastleHomeY: 290;
    nCastleWarRangeX: 100;
    nCastleWarRangeY: 100;
    nCastleTaxRate: 5;
    boGetAllNpcTax: False;
    nHireGuardPrice: 300000;
    nHireArcherPrice: 300000;
    nCastleGoldMax: 10000000;
    nCastleOneDayGold: 2000000;
    nRepairDoorPrice: 2000000;
    nRepairWallPrice: 500000;
    nCastleMemberPriceRate: 80;
    nMaxHitMsgCount: 1;
    nMaxSpellMsgCount: 1;
    nMaxRunMsgCount: 1;
    nMaxWalkMsgCount: 1;
    nMaxTurnMsgCount: 1;
    nMaxSitDonwMsgCount: 1;
    nMaxDigUpMsgCount: 1;
    boSpellSendUpdateMsg: False;
    boActionSendActionMsg: False;
    boKickOverSpeed: False;
    btSpeedControlMode: 0;
    nOverSpeedKickCount: 4;
    dwDropOverSpeed: 10;
    dwHitIntervalTime: 900; //攻击间隔
    dwMagicHitIntervalTime: 800; //魔法间隔
    dwRunIntervalTime: 600; //跑步间隔
    dwWalkIntervalTime: 600; //走路间隔
    dwTurnIntervalTime: 600; //换方向间隔
    boControlActionInterval: True;
    boControlWalkHit: True;
    boControlRunLongHit: True;
    boControlRunHit: True;
    boControlRunMagic: True;
    dwActionIntervalTime: 350; //组合操作间隔
    dwRunLongHitIntervalTime: 800; //跑位刺杀间隔
    dwRunHitIntervalTime: 800; //跑位攻击间隔
    dwWalkHitIntervalTime: 800; //走位攻击间隔
    dwRunMagicIntervalTime: 900; //跑位魔法间隔
    boDisableStruck: False; //不显示人物弯腰动作
    boDisableSelfStruck: False; //自己不显示人物弯腰动作
    dwStruckTime: 100; //人物弯腰停留时间
    dwKillMonExpMultiple: 1; //杀怪经验倍数
{$IF SoftVersion = VERENT}
    dwRequestVersion: 98;
{$ELSE}
    dwRequestVersion: RequestVersion;
{$IFEND}
    boHighLevelKillMonFixExp: False;
    boAddUserItemNewValue: True;
    sLineNoticePreFix: '〖公告〗';
    sSysMsgPreFix: '〖系统〗';
    sGuildMsgPreFix: '〖行会〗';
    sGroupMsgPreFix: '〖组队〗';
    sHintMsgPreFix: '〖提示〗';
    sGMRedMsgpreFix: '〖ＧＭ〗';
    sMonSayMsgpreFix: '〖怪物〗';
    sCustMsgpreFix: '〖祝福〗';
    sCastleMsgpreFix: '〖城主〗';
    sGuildNotice: '公告';
    sGuildWar: '敌对行会';
    sGuildAll: '联盟行会';
    sGuildMember: '行会成员';
    sGuildMemberRank: '行会成员';
    sGuildChief: '掌门人';
    boKickAllUser: False;
    boTestSpeedMode: False;
    ClientConf: (
    boClientCanSet: True;
    boRunHuman: True;
    boRunMon: True;
    boRunNpc: True;
    boWarRunAll: True;
    btDieColor: 5;
    wSpellTime: 500;
    wHitIime: 1400;
    wItemFlashTime: 5 * 100 {5 * 1000};
    btItemSpeed: 25; {60}
    boCanStartRun: True;
    boParalyCanRun: False;
    boParalyCanWalk: False;
    boParalyCanHit: False;
    boParalyCanSpell: False;
    boShowRedHPLable: True;
    boShowHPNumber: True;
    boShowJobLevel: True;
    boDuraAlert: True;
    boMagicLock: True;
    boAutoPuckUpItem: False;
    );

    nWeaponMakeUnLuckRate: 20;
    nWeaponMakeLuckPoint1: 1;
    nWeaponMakeLuckPoint2: 3;
    nWeaponMakeLuckPoint3: 7;
    nWeaponMakeLuckPoint2Rate: 6;
    nWeaponMakeLuckPoint3Rate: 10 + 30;
    boCheckUserItemPlace: True;
{$IF DEMOCLIENT = 1}
    nClientKey: 6534;
{$ELSE}
    nClientKey: 500;
{$IFEND}
    nLevelValueOfTaosHP: 6;
    nLevelValueOfTaosHPRate: 2.5;
    nLevelValueOfTaosMP: 8;
    nLevelValueOfWizardHP: 15;
    nLevelValueOfWizardHPRate: 1.8;
    nLevelValueOfWarrHP: 4;
    nLevelValueOfWarrHPRate: 4.5;
    nProcessMonsterInterval: 2;

    nSkill78PowerRate     : 100;
    nSkill78SpecialPower  : 30;
    boSkill78SpecialPower : True;

    nSkill79PowerRate     : 100;
    nSkill79SpecialPower  : 30;
    boSkill79SpecialPower : True;

    nSkill91MonLevel      : 100;
    nSkill91Rate          : 30;
    nSkill91Power         : 50;
    nSkill91HumLevel      : 3;
    boSkill91HumLevel     : False;

    nSkill80PowerRate     : 100;
    nSkill80SpecialPower  : 30;
    boSkill80SpecialPower : True;

    nSkill81PowerRate     : 100;
    nSkill81SpecialPower  : 30;
    boSkill81SpecialPower : True;

    nSkill83PowerRate     : 100;
    nSkill83SpecialPower  : 30;
    boSkill83SpecialPower : True;

    nSkill85PowerRate     : 100;
    nSkill85SpecialPower  : 30;
    boSkill85SpecialPower : True;
    sSkill85Mon1          : '蛇妖王';
    sSkill85Mon2          : '禁地魔王';
    sSkill85Mon3          : '通天教主';
    sSkill85Mon4          : '铁血魔王';
    sSkill85Mon5          : '阿修罗神';
    );
//===============================================================

  sDBName: string = 'HeroDB'; //BDE 数据源名称
  g_sADODBString: string = 'Provider=Microsoft.Jet.OLEDB.4.0;Data Source=.\Data.mdb;Persist Security Info=False'; //ADO 数据源名称



  g_LevelInfo: array[0..MAXLEVEL] of TLevelInfo;


  g_dwOldNeedExps: TLevelNeedExp = (//
    100, //1
    200, //2
    300, //3
    400, //4
    600, //5
    900, //6
    1200, //7
    1700, //8
    2500, //9
    6000, //10
    8000, //11
    10000, //12
    15000, //13
    30000, //14
    40000, //15
    50000, //16
    70000, //17
    100000, //18
    120000, //19
    140000, //20
    250000, //21
    300000, //22
    350000, //23
    400000, //24
    500000, //25
    700000, //26
    1000000, //27
    1400000, //28
    1800000, //29
    2000000, //30
    2400000, //31
    2800000, //32
    3200000, //33
    3600000, //34
    4000000, //35
    4800000, //36
    5600000, //37
    8200000, //38
    9000000, //39
    12000000, //40
    16000000, //41
    30000000, //42
    50000000, //43
    80000000, //44
    120000000, //45
    480000000, //46
    1000000000, //47
    3000000000, //48
    3500000000, //49
    4000000000, //50
    4000000000, //51
    4000000000, //52
    4000000000, //53
    4000000000, //54
    4000000000, //55
    4000000000, //56
    4000000000, //57
    4000000000, //58
    4000000000, //59
    4000000000, //60
    4000000000, //61
    4000000000, //62
    4000000000, //63
    4000000000, //64
    4000000000, //65
    4000000000, //66
    4000000000, //67
    4000000000, //68
    4000000000, //69
    4000000000, //70
    4000000000, //71
    4000000000, //72
    4000000000, //73
    4000000000, //74
    4000000000, //75
    4000000000, //76
    4000000000, //77
    4000000000, //78
    4000000000, //79
    4000000000, //80
    4000000000, //81
    4000000000, //82
    4000000000, //83
    4000000000, //84
    4000000000, //85
    4000000000, //86
    4000000000, //87
    4000000000, //88
    4000000000, //89
    4000000000, //90
    4000000000, //91
    4000000000, //92
    4000000000, //93
    4000000000, //94
    4000000000, //95
    4000000000, //96
    4000000000, //97
    4000000000, //98
    4000000000, //99
    4000000000, //100
    4000000000, //101
    4000000000, //102
    4000000000, //103
    4000000000, //104
    4000000000, //105
    4000000000, //106
    4000000000, //107
    4000000000, //108
    4000000000, //109
    4000000000, //110
    4000000000, //111
    4000000000, //112
    4000000000, //113
    4000000000, //114
    4000000000, //115
    4000000000, //116
    4000000000, //117
    4000000000, //118
    4000000000, //119
    4000000000, //120
    4000000000, //121
    4000000000, //122
    4000000000, //123
    4000000000, //124
    4000000000, //125
    4000000000, //126
    4000000000, //127
    4000000000, //128
    4000000000, //129
    4000000000, //130
    4000000000, //131
    4000000000, //132
    4000000000, //133
    4000000000, //134
    4000000000, //135
    4000000000, //136
    4000000000, //137
    4000000000, //138
    4000000000, //139
    4000000000, //140
    4000000000, //141
    4000000000, //142
    4000000000, //143
    4000000000, //144
    4000000000, //145
    4000000000, //146
    4000000000, //147
    4000000000, //148
    4000000000, //149
    4000000000, //150
    4000000000, //151
    4000000000, //152
    4000000000, //153
    4000000000, //154
    4000000000, //155
    4000000000, //156
    4000000000, //157
    4000000000, //158
    4000000000, //159
    4000000000, //160
    4000000000, //161
    4000000000, //162
    4000000000, //163
    4000000000, //164
    4000000000, //165
    4000000000, //166
    4000000000, //167
    4000000000, //168
    4000000000, //169
    4000000000, //170
    4000000000, //171
    4000000000, //172
    4000000000, //173
    4000000000, //174
    4000000000, //175
    4000000000, //176
    4000000000, //177
    4000000000, //178
    4000000000, //179
    4000000000, //180
    4000000000, //181
    4000000000, //182
    4000000000, //183
    4000000000, //184
    4000000000, //185
    4000000000, //186
    4000000000, //187
    4000000000, //188
    4000000000, //189
    4000000000, //190
    4000000000, //191
    4000000000, //192
    4000000000, //193
    4000000000, //194
    4000000000, //195
    4000000000, //196
    4000000000, //197
    4000000000, //198
    4000000000, //199
    4000000000, //200
    4000000000, //201
    4000000000, //202
    4000000000, //203
    4000000000, //204
    4000000000, //205
    4000000000, //206
    4000000000, //207
    4000000000, //208
    4000000000, //209
    4000000000, //210
    4000000000, //211
    4000000000, //212
    4000000000, //213
    4000000000, //214
    4000000000, //215
    4000000000, //216
    4000000000, //217
    4000000000, //218
    4000000000, //219
    4000000000, //220
    4000000000, //221
    4000000000, //222
    4000000000, //223
    4000000000, //224
    4000000000, //225
    4000000000, //226
    4000000000, //227
    4000000000, //228
    4000000000, //229
    4000000000, //230
    4000000000, //231
    4000000000, //232
    4000000000, //233
    4000000000, //234
    4000000000, //235
    4000000000, //236
    4000000000, //237
    4000000000, //238
    4000000000, //239
    4000000000, //240
    4000000000, //241
    4000000000, //242
    4000000000, //243
    4000000000, //244
    4000000000, //245
    4000000000, //246
    4000000000, //247
    4000000000, //248
    4000000000, //249
    4000000000, //250
    4000000000, //251
    4000000000, //252
    4000000000, //253
    4000000000, //254
    4000000000, //255
    4000000000, //256
    4000000000, //257
    4000000000, //258
    4000000000, //259
    4000000000, //260
    4000000000, //261
    4000000000, //262
    4000000000, //263
    4000000000, //264
    4000000000, //265
    4000000000, //266
    4000000000, //267
    4000000000, //268
    4000000000, //269
    4000000000, //270
    4000000000, //271
    4000000000, //272
    4000000000, //273
    4000000000, //274
    4000000000, //275
    4000000000, //276
    4000000000, //277
    4000000000, //278
    4000000000, //279
    4000000000, //280
    4000000000, //281
    4000000000, //282
    4000000000, //283
    4000000000, //284
    4000000000, //285
    4000000000, //286
    4000000000, //287
    4000000000, //288
    4000000000, //289
    4000000000, //290
    4000000000, //291
    4000000000, //292
    4000000000, //293
    4000000000, //294
    4000000000, //295
    4000000000, //296
    4000000000, //297
    4000000000, //298
    4000000000, //299
    4000000000, //300
    4000000000, //301
    4000000000, //302
    4000000000, //303
    4000000000, //304
    4000000000, //305
    4000000000, //306
    4000000000, //307
    4000000000, //308
    4000000000, //309
    4000000000, //310
    4000000000, //311
    4000000000, //312
    4000000000, //313
    4000000000, //314
    4000000000, //315
    4000000000, //316
    4000000000, //317
    4000000000, //318
    4000000000, //319
    4000000000, //320
    4000000000, //321
    4000000000, //322
    4000000000, //323
    4000000000, //324
    4000000000, //325
    4000000000, //326
    4000000000, //327
    4000000000, //328
    4000000000, //329
    4000000000, //330
    4000000000, //331
    4000000000, //332
    4000000000, //333
    4000000000, //334
    4000000000, //335
    4000000000, //336
    4000000000, //337
    4000000000, //338
    4000000000, //339
    4000000000, //340
    4000000000, //341
    4000000000, //342
    4000000000, //343
    4000000000, //344
    4000000000, //345
    4000000000, //346
    4000000000, //347
    4000000000, //348
    4000000000, //349
    4000000000, //350
    4000000000, //351
    4000000000, //352
    4000000000, //353
    4000000000, //354
    4000000000, //355
    4000000000, //356
    4000000000, //357
    4000000000, //358
    4000000000, //359
    4000000000, //360
    4000000000, //361
    4000000000, //362
    4000000000, //363
    4000000000, //364
    4000000000, //365
    4000000000, //366
    4000000000, //367
    4000000000, //368
    4000000000, //369
    4000000000, //370
    4000000000, //371
    4000000000, //372
    4000000000, //373
    4000000000, //374
    4000000000, //375
    4000000000, //376
    4000000000, //377
    4000000000, //378
    4000000000, //379
    4000000000, //380
    4000000000, //381
    4000000000, //382
    4000000000, //383
    4000000000, //384
    4000000000, //385
    4000000000, //386
    4000000000, //387
    4000000000, //388
    4000000000, //389
    4000000000, //390
    4000000000, //391
    4000000000, //392
    4000000000, //393
    4000000000, //394
    4000000000, //395
    4000000000, //396
    4000000000, //397
    4000000000, //398
    4000000000, //399
    4000000000, //400
    4000000000, //401
    4000000000, //402
    4000000000, //403
    4000000000, //404
    4000000000, //405
    4000000000, //406
    4000000000, //407
    4000000000, //408
    4000000000, //409
    4000000000, //410
    4000000000, //411
    4000000000, //412
    4000000000, //413
    4000000000, //414
    4000000000, //415
    4000000000, //416
    4000000000, //417
    4000000000, //418
    4000000000, //419
    4000000000, //420
    4000000000, //421
    4000000000, //422
    4000000000, //423
    4000000000, //424
    4000000000, //425
    4000000000, //426
    4000000000, //427
    4000000000, //428
    4000000000, //429
    4000000000, //430
    4000000000, //431
    4000000000, //432
    4000000000, //433
    4000000000, //434
    4000000000, //435
    4000000000, //436
    4000000000, //437
    4000000000, //438
    4000000000, //439
    4000000000, //440
    4000000000, //441
    4000000000, //442
    4000000000, //443
    4000000000, //444
    4000000000, //445
    4000000000, //446
    4000000000, //447
    4000000000, //448
    4000000000, //449
    4000000000, //450
    4000000000, //451
    4000000000, //452
    4000000000, //453
    4000000000, //454
    4000000000, //455
    4000000000, //456
    4000000000, //457
    4000000000, //458
    4000000000, //459
    4000000000, //460
    4000000000, //461
    4000000000, //462
    4000000000, //463
    4000000000, //464
    4000000000, //465
    4000000000, //466
    4000000000, //467
    4000000000, //468
    4000000000, //469
    4000000000, //470
    4000000000, //471
    4000000000, //472
    4000000000, //473
    4000000000, //474
    4000000000, //475
    4000000000, //476
    4000000000, //477
    4000000000, //478
    4000000000, //479
    4000000000, //480
    4000000000, //481
    4000000000, //482
    4000000000, //483
    4000000000, //484
    4000000000, //485
    4000000000, //486
    4000000000, //487
    4000000000, //488
    4000000000, //489
    4000000000, //490
    4000000000, //491
    4000000000, //492
    4000000000, //493
    4000000000, //494
    4000000000, //495
    4000000000, //496
    4000000000, //497
    4000000000, //498
    4000000000, //499
    4000000000, //500
    4000000000 //501
    );


//===============================================================

//===============================================================
//游戏命令方面参数
  g_GameCommand: TGameCommand = (
    DATA: (sCmd: '查看时间'; nPerMissionMin: 0; nPerMissionMax: 10);
    PRVMSG: (sCmd: '拒绝'; nPerMissionMin: 0; nPerMissionMax: 10);
    ALLOWMSG: (sCmd: '拒绝私聊'; nPerMissionMin: 0; nPerMissionMax: 10);
    LETSHOUT: (sCmd: '拒绝组队聊天'; nPerMissionMin: 0; nPerMissionMax: 10);
    LETTRADE: (sCmd: '禁止交易'; nPerMissionMin: 0; nPerMissionMax: 10);
    LETGUILD: (sCmd: '加入门派'; nPerMissionMin: 0; nPerMissionMax: 10);
    ENDGUILD: (sCmd: '退出门派'; nPerMissionMin: 0; nPerMissionMax: 10);
    BANGUILDCHAT: (sCmd: '禁止全行会聊天'; nPerMissionMin: 0; nPerMissionMax: 10);
    AUTHALLY: (sCmd: '允许联盟'; nPerMissionMin: 0; nPerMissionMax: 10);
    AUTH: (sCmd: '联盟'; nPerMissionMin: 0; nPerMissionMax: 10);
    AUTHCANCEL: (sCmd: '取消联盟'; nPerMissionMin: 0; nPerMissionMax: 10);
    DIARY: (sCmd: 'Diary'; nPerMissionMin: 0; nPerMissionMax: 10);
    USERMOVE: (sCmd: 'Move'; nPerMissionMin: 0; nPerMissionMax: 10);
    SEARCHING: (sCmd: 'Searching'; nPerMissionMin: 0; nPerMissionMax: 10);
    ALLOWGROUPCALL: (sCmd: '允许天地合一'; nPerMissionMin: 0; nPerMissionMax: 10);
    GROUPRECALLL: (sCmd: '天地合一'; nPerMissionMin: 0; nPerMissionMax: 10);
    ALLOWGUILDRECALL: (sCmd: '允许行会合一'; nPerMissionMin: 0; nPerMissionMax: 10);
    GUILDRECALLL: (sCmd: '行会合一'; nPerMissionMin: 0; nPerMissionMax: 10);
    UNLOCKSTORAGE: (sCmd: '仓库开锁'; nPerMissionMin: 0; nPerMissionMax: 10);
    UNLOCK: (sCmd: '开锁'; nPerMissionMin: 0; nPerMissionMax: 10);
    LOCK: (sCmd: '锁定仓库'; nPerMissionMin: 0; nPerMissionMax: 10);
    PASSWORDLOCK: (sCmd: 'PasswordLock'; nPerMissionMin: 0; nPerMissionMax: 10);
    SETPASSWORD: (sCmd: 'SetPassword'; nPerMissionMin: 0; nPerMissionMax: 10);
    CHGPASSWORD: (sCmd: 'ChgPassword'; nPerMissionMin: 0; nPerMissionMax: 10);
    CLRPASSWORD: (sCmd: 'ClrPassword'; nPerMissionMin: 10; nPerMissionMax: 10);
    UNPASSWORD: (sCmd: 'UnPassword'; nPerMissionMin: 0; nPerMissionMax: 10);
    MEMBERFUNCTION: (sCmd: 'MemberFunc'; nPerMissionMin: 0; nPerMissionMax: 10);
    MEMBERFUNCTIONEX: (sCmd: 'MemberFuncEx'; nPerMissionMin: 0; nPerMissionMax: 10);
    MEMBERFUNCTIONEX1: (sCmd: 'MemberFuncEx1'; nPerMissionMin: 0; nPerMissionMax: 10);
    DEAR: (sCmd: 'Dear'; nPerMissionMin: 0; nPerMissionMax: 10);
    ALLOWDEARRCALL: (sCmd: 'AllowDearRecall'; nPerMissionMin: 0; nPerMissionMax: 10);
    DEARRECALL: (sCmd: 'DearRecall'; nPerMissionMin: 0; nPerMissionMax: 10);
    MASTER: (sCmd: 'Master'; nPerMissionMin: 0; nPerMissionMax: 10);
    ALLOWMASTERRECALL: (sCmd: 'AllowMasterRecall'; nPerMissionMin: 0; nPerMissionMax: 10);
    MASTERECALL: (sCmd: 'MasterRecall'; nPerMissionMin: 0; nPerMissionMax: 10);
    ATTACKMODE: (sCmd: 'AttackMode'; nPerMissionMin: 0; nPerMissionMax: 10);
    REST: (sCmd: 'Rest'; nPerMissionMin: 0; nPerMissionMax: 10);
    TAKEONHORSE: (sCmd: '骑马'; nPerMissionMin: 0; nPerMissionMax: 10);
    TAKEOFHORSE: (sCmd: '下马'; nPerMissionMin: 0; nPerMissionMax: 10);
    HUMANLOCAL: (sCmd: 'HumanLocal'; nPerMissionMin: 3; nPerMissionMax: 10);
    MOVE: (sCmd: 'Move'; nPerMissionMin: 3; nPerMissionMax: 6);
    POSITIONMOVE: (sCmd: 'PositionMove'; nPerMissionMin: 3; nPerMissionMax: 6);
    INFO: (sCmd: 'Info'; nPerMissionMin: 3; nPerMissionMax: 10);
    MOBLEVEL: (sCmd: 'MobLevel'; nPerMissionMin: 3; nPerMissionMax: 10);
    MOBCOUNT: (sCmd: 'MobCount'; nPerMissionMin: 3; nPerMissionMax: 10);
    HUMANCOUNT: (sCmd: 'HumanCount'; nPerMissionMin: 3; nPerMissionMax: 10);
    MAP: (sCmd: 'Map'; nPerMissionMin: 3; nPerMissionMax: 10);
    KICK: (sCmd: 'Kick'; nPerMissionMin: 10; nPerMissionMax: 10);
    TING: (sCmd: 'Ting'; nPerMissionMin: 10; nPerMissionMax: 10);
    SUPERTING: (sCmd: 'SuperTing'; nPerMissionMin: 10; nPerMissionMax: 10);
    MAPMOVE: (sCmd: 'MapMove'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHUTUP: (sCmd: 'Shutup'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELEASESHUTUP: (sCmd: 'ReleaseShutup'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHUTUPLIST: (sCmd: 'ShutupList'; nPerMissionMin: 10; nPerMissionMax: 10);
    GAMEMASTER: (sCmd: 'GameMaster'; nPerMissionMin: 10; nPerMissionMax: 10);
    OBSERVER: (sCmd: 'Observer'; nPerMissionMin: 10; nPerMissionMax: 10);
    SUEPRMAN: (sCmd: 'Superman'; nPerMissionMin: 10; nPerMissionMax: 10);
    LEVEL: (sCmd: 'Level'; nPerMissionMin: 10; nPerMissionMax: 10);
    SABUKWALLGOLD: (sCmd: 'SabukWallGold'; nPerMissionMin: 10; nPerMissionMax: 10);
    RECALL: (sCmd: 'Recall'; nPerMissionMin: 10; nPerMissionMax: 10);
    REGOTO: (sCmd: 'ReGoto'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWFLAG: (sCmd: 'showflag'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWOPEN: (sCmd: 'showopen'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWUNIT: (sCmd: 'showunit'; nPerMissionMin: 10; nPerMissionMax: 10);
    ATTACK: (sCmd: 'Attack'; nPerMissionMin: 10; nPerMissionMax: 10);
    MOB: (sCmd: 'Mob'; nPerMissionMin: 10; nPerMissionMax: 10);
    MOBNPC: (sCmd: 'MobNpc'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELNPC: (sCmd: 'DelNpc'; nPerMissionMin: 10; nPerMissionMax: 10);
    NPCSCRIPT: (sCmd: 'NpcScript'; nPerMissionMin: 10; nPerMissionMax: 10);
    RECALLMOB: (sCmd: 'RecallMob'; nPerMissionMin: 10; nPerMissionMax: 10);
    LUCKYPOINT: (sCmd: 'LuckyPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    LOTTERYTICKET: (sCmd: 'LotteryTicket'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADGUILD: (sCmd: 'ReloadGuild'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADLINENOTICE: (sCmd: 'ReloadLineNotice'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADABUSE: (sCmd: 'ReloadAbuse'; nPerMissionMin: 10; nPerMissionMax: 10);
    BACKSTEP: (sCmd: 'Backstep'; nPerMissionMin: 10; nPerMissionMax: 10);
    BALL: (sCmd: 'Ball'; nPerMissionMin: 10; nPerMissionMax: 10);
    FREEPENALTY: (sCmd: 'FreePK'; nPerMissionMin: 10; nPerMissionMax: 10);
    PKPOINT: (sCmd: 'PKpoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    INCPKPOINT: (sCmd: 'IncPkPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGELUCK: (sCmd: 'ChangeLuck'; nPerMissionMin: 10; nPerMissionMax: 10);
    HUNGER: (sCmd: 'Hunger'; nPerMissionMin: 10; nPerMissionMax: 10);
    HAIR: (sCmd: 'hair'; nPerMissionMin: 10; nPerMissionMax: 10);
    TRAINING: (sCmd: 'Training'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELETESKILL: (sCmd: 'DeleteSkill'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEJOB: (sCmd: 'ChangeJob'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEGENDER: (sCmd: 'ChangeGender'; nPerMissionMin: 10; nPerMissionMax: 10);
    NAMECOLOR: (sCmd: 'NameColor'; nPerMissionMin: 10; nPerMissionMax: 10);
    MISSION: (sCmd: 'Mission'; nPerMissionMin: 10; nPerMissionMax: 10);
    MOBPLACE: (sCmd: 'MobPlace'; nPerMissionMin: 10; nPerMissionMax: 10);
    TRANSPARECY: (sCmd: 'Transparency'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELETEITEM: (sCmd: 'DeleteItem'; nPerMissionMin: 10; nPerMissionMax: 10);
    LEVEL0: (sCmd: 'Level0'; nPerMissionMin: 10; nPerMissionMax: 10);
    CLEARMISSION: (sCmd: 'ClearMission'; nPerMissionMin: 10; nPerMissionMax: 10);
    SETFLAG: (sCmd: 'setflag'; nPerMissionMin: 10; nPerMissionMax: 10);
    SETOPEN: (sCmd: 'setopen'; nPerMissionMin: 10; nPerMissionMax: 10);
    SETUNIT: (sCmd: 'setunit'; nPerMissionMin: 10; nPerMissionMax: 10);
    RECONNECTION: (sCmd: 'Reconnection'; nPerMissionMin: 10; nPerMissionMax: 10);
    DISABLEFILTER: (sCmd: 'DisableFilter'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHGUSERFULL: (sCmd: 'CHGUSERFULL'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHGZENFASTSTEP: (sCmd: 'CHGZENFASTSTEP'; nPerMissionMin: 10; nPerMissionMax: 10);
    CONTESTPOINT: (sCmd: 'ContestPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    STARTCONTEST: (sCmd: 'StartContest'; nPerMissionMin: 10; nPerMissionMax: 10);
    ENDCONTEST: (sCmd: 'EndContest'; nPerMissionMin: 10; nPerMissionMax: 10);
    ANNOUNCEMENT: (sCmd: 'Announcement'; nPerMissionMin: 10; nPerMissionMax: 10);
    OXQUIZROOM: (sCmd: 'OXQuizRoom'; nPerMissionMin: 10; nPerMissionMax: 10);
    GSA: (sCmd: 'gsa'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEITEMNAME: (sCmd: 'ChangeItemName'; nPerMissionMin: 10; nPerMissionMax: 10);
    DISABLESENDMSG: (sCmd: 'DisableSendMsg'; nPerMissionMin: 10; nPerMissionMax: 10);
    ENABLESENDMSG: (sCmd: 'EnableSendMsg'; nPerMissionMin: 10; nPerMissionMax: 10);
    DISABLESENDMSGLIST: (sCmd: 'DisableSendMsgList'; nPerMissionMin: 10; nPerMissionMax: 10);
    KILL: (sCmd: 'Kill'; nPerMissionMin: 10; nPerMissionMax: 10);
    MAKE: (sCmd: 'make'; nPerMissionMin: 10; nPerMissionMax: 10);
    SMAKE: (sCmd: 'Supermake'; nPerMissionMin: 10; nPerMissionMax: 10);
    BONUSPOINT: (sCmd: 'BonusPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELBONUSPOINT: (sCmd: 'DelBonusPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    RESTBONUSPOINT: (sCmd: 'RestBonusPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    FIREBURN: (sCmd: 'FireBurn'; nPerMissionMin: 10; nPerMissionMax: 10);
    TESTFIRE: (sCmd: 'TestFire'; nPerMissionMin: 10; nPerMissionMax: 10);
    TESTSTATUS: (sCmd: 'TestStatus'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELGOLD: (sCmd: 'DelGold'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADDGOLD: (sCmd: 'AddGold'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELGAMEGOLD: (sCmd: 'DelGamePoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADDGAMEGOLD: (sCmd: 'AddGamePoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    GAMEGOLD: (sCmd: 'GameGold'; nPerMissionMin: 10; nPerMissionMax: 10);
    GAMEPOINT: (sCmd: 'GamePoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    CREDITPOINT: (sCmd: 'CreditPoint'; nPerMissionMin: 10; nPerMissionMax: 10);
    BigBag: (sCmd: 'BigBag'; nPerMissionMin: 10; nPerMissionMax: 10); //增加扩大包裹容量的命令
    TESTGOLDCHANGE: (sCmd: 'Test_GOLD_Change'; nPerMissionMin: 10; nPerMissionMax: 10);
    REFINEWEAPON: (sCmd: 'RefineWeapon'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADADMIN: (sCmd: 'ReloadAdmin'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADNPC: (sCmd: 'ReloadNpc'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADMANAGE: (sCmd: 'ReloadManage'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADROBOTMANAGE: (sCmd: 'ReloadRobotManage'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADROBOT: (sCmd: 'ReloadRobot'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADMONITEMS: (sCmd: 'ReloadMonItems'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADDIARY: (sCmd: 'ReloadDiary'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADITEMDB: (sCmd: 'ReloadItemDB'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADMAGICDB: (sCmd: 'ReloadMagicDB'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADMONSTERDB: (sCmd: 'ReloadMonsterDB'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADMINMAP: (sCmd: 'ReLoadMinMap'; nPerMissionMin: 10; nPerMissionMax: 10);
    REALIVE: (sCmd: 'ReAlive'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADJUESTLEVEL: (sCmd: 'AdjustLevel'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADJUESTEXP: (sCmd: 'AdjustExp'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADDGUILD: (sCmd: 'AddGuild'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELGUILD: (sCmd: 'DelGuild'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGESABUKLORD: (sCmd: 'ChangeSabukLord'; nPerMissionMin: 10; nPerMissionMax: 10);
    FORCEDWALLCONQUESTWAR: (sCmd: 'ForcedWallconquestWar'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADDTOITEMEVENT: (sCmd: 'AddToItemEvent'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADDTOITEMEVENTASPIECES: (sCmd: 'AddToItemEventAsPieces'; nPerMissionMin: 10; nPerMissionMax: 10);
    ITEMEVENTLIST: (sCmd: 'ItemEventList'; nPerMissionMin: 10; nPerMissionMax: 10);
    STARTINGGIFTNO: (sCmd: 'StartingGiftNo'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELETEALLITEMEVENT: (sCmd: 'DeleteAllItemEvent'; nPerMissionMin: 10; nPerMissionMax: 10);
    STARTITEMEVENT: (sCmd: 'StartItemEvent'; nPerMissionMin: 10; nPerMissionMax: 10);
    ITEMEVENTTERM: (sCmd: 'ItemEventTerm'; nPerMissionMin: 10; nPerMissionMax: 10);
    ADJUESTTESTLEVEL: (sCmd: 'AdjustTestLevel'; nPerMissionMin: 10; nPerMissionMax: 10);
    TRAININGSKILL: (sCmd: 'TrainingSkill'; nPerMissionMin: 10; nPerMissionMax: 10);
    OPDELETESKILL: (sCmd: 'OPDeleteSkill'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEWEAPONDURA: (sCmd: 'ChangeWeaponDura'; nPerMissionMin: 10; nPerMissionMax: 10);
    RELOADGUILDALL: (sCmd: 'ReloadGuildAll'; nPerMissionMin: 10; nPerMissionMax: 10);
    WHO: (sCmd: 'Who '; nPerMissionMin: 3; nPerMissionMax: 10);
    TOTAL: (sCmd: 'Total '; nPerMissionMin: 5; nPerMissionMax: 10);
    TESTGA: (sCmd: 'Testga'; nPerMissionMin: 10; nPerMissionMax: 10);
    MAPINFO: (sCmd: 'MapInfo'; nPerMissionMin: 10; nPerMissionMax: 10);
    SBKDOOR: (sCmd: 'SbkDoor'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEDEARNAME: (sCmd: 'DearName'; nPerMissionMin: 10; nPerMissionMax: 10);
    CHANGEMASTERNAME: (sCmd: 'MasterName'; nPerMissionMin: 10; nPerMissionMax: 10);
    STARTQUEST: (sCmd: 'StartQuest'; nPerMissionMin: 10; nPerMissionMax: 10);
    SETPERMISSION: (sCmd: 'SetPermission'; nPerMissionMin: 10; nPerMissionMax: 10);
    CLEARMON: (sCmd: 'ClearMon'; nPerMissionMin: 10; nPerMissionMax: 10);
    RENEWLEVEL: (sCmd: 'ReNewLevel'; nPerMissionMin: 10; nPerMissionMax: 10);
    DENYIPLOGON: (sCmd: 'DenyIPLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    DENYACCOUNTLOGON: (sCmd: 'DenyAccountLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    DENYCHARNAMELOGON: (sCmd: 'DenyCharNameLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELDENYIPLOGON: (sCmd: 'DelDenyIPLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELDENYACCOUNTLOGON: (sCmd: 'DelDenyAccountLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    DELDENYCHARNAMELOGON: (sCmd: 'DelDenyCharNameLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWDENYIPLOGON: (sCmd: 'ShowDenyIPLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWDENYACCOUNTLOGON: (sCmd: 'ShowDenyAccountLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWDENYCHARNAMELOGON: (sCmd: 'ShowDenyCharNameLogon'; nPerMissionMin: 10; nPerMissionMax: 10);
    VIEWWHISPER: (sCmd: 'ViewWhisper'; nPerMissionMin: 10; nPerMissionMax: 10);
    SPIRIT: (sCmd: '祈祷生效'; nPerMissionMin: 10; nPerMissionMax: 10);
    SPIRITSTOP: (sCmd: '停止叛变'; nPerMissionMin: 10; nPerMissionMax: 10);
    SETMAPMODE: (sCmd: 'SetMapMode'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWMAPMODE: (sCmd: 'ShowMapMode'; nPerMissionMin: 10; nPerMissionMax: 10);
    TESTSERVERCONFIG: (sCmd: 'TestServerConfig'; nPerMissionMin: 10; nPerMissionMax: 10);
    SERVERSTATUS: (sCmd: 'ServerStatus'; nPerMissionMin: 10; nPerMissionMax: 10);
    TESTGETBAGITEM: (sCmd: 'TestGetBagItem'; nPerMissionMin: 10; nPerMissionMax: 10);
    CLEARBAG: (sCmd: 'ClearBag'; nPerMissionMin: 10; nPerMissionMax: 10);
    SHOWUSEITEMINFO: (sCmd: 'ShowUseItemInfo'; nPerMissionMin: 10; nPerMissionMax: 10);
    BINDUSEITEM: (sCmd: 'BindUseItem'; nPerMissionMin: 10; nPerMissionMax: 10);
    MOBFIREBURN: (sCmd: 'MobFireBurn'; nPerMissionMin: 10; nPerMissionMax: 10);
    TESTSPEEDMODE: (sCmd: 'TestSpeedMode'; nPerMissionMin: 10; nPerMissionMax: 10);
    LOCKLOGON: (sCmd: 'LockLogin'; nPerMissionMin: 0; nPerMissionMax: 0);
    MakeItemDrop: (sCmd: 'MakeItemDrop'; nPerMissionMin: 10; nPerMissionMax: 0);
    );
  
//===============================================================

//===============================================================
//游戏显示文字内容参数
  sClientSoftVersionError: string = '游戏版本错误！！！';
  sDownLoadNewClientSoft: string = '请到网站上下载最新版本游戏客户端软件。';
  sForceDisConnect: string = '连接被强行中断！！！';
  sClientSoftVersionTooOld: string = '您现在使用的客户端软件版本太老了，大量的游戏效果新将无法使用。';
  sDownLoadAndUseNewClient: string = '为了更好的进行游戏，请下载最新的客户端软件！！！';
  sOnlineUserFull: string = '可允许的玩家数量已满';
  sYouNowIsTryPlayMode: string = '你现在处于测试中，你可以在七级以前使用，但是会限制你的一些功能.';
  g_sNowIsFreePlayMode: string = '当前服务器运行于免费模式.';
  sAttackModeOfAll: string = '[全体攻击模式]';
  sAttackModeOfPeaceful: string = '[和平攻击模式]';
  sAttackModeOfDear: string = '[夫妻攻击模式]';
  sAttackModeOfMaster: string = '[师徒攻击模式]';
  sAttackModeOfGroup: string = '[编组攻击模式]';
  sAttackModeOfGuild: string = '[行会攻击模式]';
  sAttackModeOfRedWhite: string = '[善&恶攻击模式]';
  sStartChangeAttackModeHelp: string = '使用组合快捷键 CTRL-H 更改攻击模式...';
  sStartNoticeMsg: string = '欢迎进入本服务器进行游戏...';

  sThrustingOn: string = '使用刺杀剑法';
  sThrustingOff: string = '不使用刺杀剑法';
  sHalfMoonOn: string = '使用半月弯刀';
  sHalfMoonOff: string = '不使用半月弯刀';
  sCrsHitOn: string = '开启光风斩';
  sCrsHitOff: string = '关闭光风斩';
  sFireSpiritsSummoned: string = '你的武器因精神火球而炙热';
  sFireSpiritsFail: string = '召唤烈火精灵失败';
  sSpiritsGone: string = '精神火球消失';
  sMateDoTooweak: string = '冲撞力不够！！！';

  g_sTheWeaponBroke: string = '武器破碎！！！';
  sTheWeaponRefineSuccessfull: string = '升级成功！！！';


  sYouPoisoned: string = '中毒了！！！';

  sPetRest: string = '属下：休息';
  sPetAttack: string = '属下：攻击';

  sWearNotOfWoMan: string = '非女性用品！！！';
  sWearNotOfMan: string = '非男性用品！！！';
  sHandWeightNot: string = '腕力不够！！！';
  sWearWeightNot: string = '负重力不够！！！';
  g_sItemIsNotThisAccount: string = '此物品不为此帐号所有！！！';
  g_sItemIsNotThisIPaddr: string = '此物品不为此IP所有！！！';
  g_sItemIsNotThisCharName: string = '此物品不为你所有！！！';
  g_sLevelNot: string = '等级不够！！！';
  g_sJobOrLevelNot: string = '职业不对或等级不够！！！';
  g_sJobOrDCNot: string = '职业不对或攻击力不够！！！';
  g_sJobOrMCNot: string = '职业不对或魔法力不够！！！';
  g_sJobOrSCNot: string = '职业不对或道术不够！！！';
  g_sDCNot: string = '攻击力不够！！！';
  g_sMCNot: string = '魔法力不够！！！';
  g_sSCNot: string = '道术不够！！！';
  g_sCreditPointNot: string = '声望点不够！！！';
  g_sReNewLevelNot: string = '转生等级不够！！！';
  g_sGuildNot: string = '加入了行会才可以使用此物品！！！';
  g_sGuildMasterNot: string = '行会掌门才可以使用此物品！！！';
  g_sSabukHumanNot: string = '沙城成员才可以使用此物品！！！';
  g_sSabukMasterManNot: string = '沙城城主才可以使用此物品！！！';
  g_sMemberNot: string = '会员才可以使用此物品！！！';
  g_sMemberTypeNot: string = '指定类型的会员可以使用此物品！！！';
  g_sCanottWearIt: string = '此物品不适使用！！！';

  sCanotUseDrugOnThisMap: string = '此地图不允许使用任何药品！！！';
  sGameMasterMode: string = '已进入管理员模式';
  sReleaseGameMasterMode: string = '已退出管理员模式';
  sObserverMode: string = '已进入隐身模式';
  g_sReleaseObserverMode: string = '已退出隐身模式';
  sSupermanMode: string = '已进入无敌模式';
  sReleaseSupermanMode: string = '已退出无敌模式';
  sYouFoundNothing: string = '未获取任何物品！！！';

  g_sNoPasswordLockSystemMsg: string = '游戏密码保护系统还没有启用！！！';
  g_sAlreadySetPasswordMsg: string = '仓库早已设置了一个密码，如需要修改密码请使用修改密码命令！！！';
  g_sReSetPasswordMsg: string = '请重复输入一次仓库密码：';
  g_sPasswordOverLongMsg: string = '输入的密码长度不正确！！！，密码长度必须在 4 - 7 的范围内，请重新设置密码。';
  g_sReSetPasswordOKMsg: string = '密码设置成功！！，仓库已经自动上锁，请记好您的仓库密码，在取仓库时需要使用此密码开锁。';
  g_sReSetPasswordNotMatchMsg: string = '二次输入的密码不一致，请重新设置密码！！！';
  g_sPleaseInputUnLockPasswordMsg: string = '请输入仓库密码：';
  g_sStorageUnLockOKMsg: string = '密码输入成功！！！，仓库已经开锁。';
  g_sPasswordUnLockOKMsg: string = '密码输入成功！！！，密码系统已经开锁。';
  g_sStorageAlreadyUnLockMsg: string = '仓库早已解锁！！！';
  g_sStorageNoPasswordMsg: string = '仓库还没设置密码！！！';
  g_sUnLockPasswordFailMsg: string = '密码输入错误！！！，请检查好再输入。';
  g_sLockStorageSuccessMsg: string = '仓库加锁成功。';
  g_sStoragePasswordClearMsg: string = '仓库密码已清除！！！';
  g_sPleaseUnloadStoragePasswordMsg: string = '请先解锁密码再使用此命令清除密码！！！';
  g_sStorageAlreadyLockMsg: string = '仓库早已加锁了！！！';
  g_sStoragePasswordLockedMsg: string = '由于密码输入错误超过三次，仓库密码已被锁定！！！';
  g_sSetPasswordMsg: string = '请输入一个长度为 4 - 7 位的仓库密码: ';
  g_sPleaseInputOldPasswordMsg: string = '请输入原仓库密码: ';
  g_sOldPasswordIsClearMsg: string = '密码已清除。';
  g_sPleaseUnLockPasswordMsg: string = '请先解锁仓库密码后再用此命令清除密码！！！';
  g_sNoPasswordSetMsg: string = '仓库还没设置密码，请用设置密码命令设置仓库密码！！！';
  g_sOldPasswordIncorrectMsg: string = '输入的原仓库密码不正确！！！';
  g_sStorageIsLockedMsg: string = '仓库已被加锁，请先输入仓库正确的开锁密码，再取物品！！！';
  g_sActionIsLockedMsg: string = '你当前已启用密码保护系统，请先输入正确的密码，才可以正常游戏！！！';
  g_sPasswordNotSetMsg: string = '对不起，没有设置仓库密码此功能无法使用，设置仓库密码请输入指令 @%s';
  g_sNotPasswordProtectMode: string = '你正处于非保护模式，如想你的装备更加安全，请输入指令 @%s';
  g_sCanotDropGoldMsg: string = '太少的金币不允许扔在地上！！！';
  g_sCanotDropInSafeZoneMsg: string = '安全区不允许扔东西在地上！！！';
  g_sCanotDropItemMsg: string = '当前无法进行此操作！！！';
  g_sCanotUseItemMsg: string = '当前无法进行此操作！！！';
  g_sCanotTryDealMsg: string = '当前无法进行此操作！！！';
  g_sPleaseTryDealLaterMsg: string = '请稍候再交易！！！';
  g_sDealItemsDenyGetBackMsg: string = '交易的金币或物品不可以取回，要取回请取消再重新交易！！！';
  g_sDisableDealItemsMsg: string = '交易功能暂时关闭！！！';
  g_sDealActionCancelMsg: string = '交易取消！！！';
  g_sPoseDisableDealMsg: string = '对方禁止进入交易';
  g_sDealSuccessMsg: string = '交易成功...';
  g_sDealOKTooFast: string = '过早按了成交按钮。';
  g_sYourBagSizeTooSmall: string = '你的背包空间不够，无法装下对方交易给你的物品！！！';
  g_sDealHumanBagSizeTooSmall: string = '交易对方的背包空间不够，无法装下对方交易给你的物品！！！';
  g_sYourGoldLargeThenLimit: string = '你的所带的金币太多，无法装下对方交易给你的金币！！！';
  g_sDealHumanGoldLargeThenLimit: string = '交易对方的所带的金币太多，无法装下对方交易给你的金币！！！';
  g_sYouDealOKMsg: string = '你已经确认交易了。';
  g_sPoseDealOKMsg: string = '对方已经确认交易了。';
  g_sKickClientUserMsg: string = '请不要使用非法外挂软件！！！';

  g_sStartMarryManMsg: string = '[%n]: %s 与 %d 的婚礼现在开始...';
  g_sStartMarryWoManMsg: string = '[%n]: %d 与 %s 的婚礼现在开始...';
  g_sStartMarryManAskQuestionMsg: string = '[%n]: %s 你愿意娶 %d 小姐为妻，并照顾她一生一世吗？';
  g_sStartMarryWoManAskQuestionMsg: string = '[%n]: %d 你愿意娶 %s 小姐为妻，并照顾她一生一世吗？';

  g_sMarryManAnswerQuestionMsg: string = '[%s]: 我愿意！！！，%d 小姐我会尽我一生的时间来照顾您，让您过上快乐美满的日子的。';
  g_sMarryManAskQuestionMsg: string = '[%n]: %d 你愿意嫁给 %s 先生为妻，并照顾他一生一世吗？';

  g_sMarryWoManAnswerQuestionMsg: string = '[%s]: 我愿意！！！，%d 先生我愿意让你来照顾我，保护我。';
  g_sMarryWoManGetMarryMsg: string = '[%n]: 我宣布 %d 先生与 %s 小姐正式成为合法夫妻。';

  g_sMarryWoManDenyMsg: string = '[%s]: %d 你这个好色之徒，谁会愿意嫁给你呀！！！，癞蛤蟆想吃天鹅肉。';
  g_sMarryWoManCancelMsg: string = '[%n]: 真是可惜，二个人这个时候才翻脸，你们培养好感情后再来找我吧！！！';

  g_sfUnMarryManLoginMsg: string = '你的老婆%d已经强行与你脱离了夫妻关系了！！！';
  g_sfUnMarryWoManLoginMsg: string = '你的老公%d已经强行与你脱离了夫妻关系了！！！';

  g_sManLoginDearOnlineSelfMsg: string = '你的老婆%d当前位于%m(%x:%y)。';
  g_sManLoginDearOnlineDearMsg: string = '你的老公%s在:%m(%x:%y)上线了！！！。';

  g_sWoManLoginDearOnlineSelfMsg: string = '你的老公当前位于%m(%x:%y)。';
  g_sWoManLoginDearOnlineDearMsg: string = '你的老婆%s在:%m(%x:%y) 上线了！！！。';

  g_sManLoginDearNotOnlineMsg: string = '你的老婆现在不在线！！！';
  g_sWoManLoginDearNotOnlineMsg: string = '你的老公现在不在线！！！';

  g_sManLongOutDearOnlineMsg: string = '你的老公在:%m(%x:%y)下线了！！！。';
  g_sWoManLongOutDearOnlineMsg: string = '你的老婆在:%m(%x:%y)下线了！！！。';

  g_sYouAreNotMarryedMsg: string = '你都没结婚查什么？';
  g_sYourWifeNotOnlineMsg: string = '你的老婆还没有上线！！！';
  g_sYourHusbandNotOnlineMsg: string = '你的老公还没有上线！！！';

  g_sYourWifeNowLocateMsg: string = '你的老婆现在位于:';
  g_sYourHusbandSearchLocateMsg: string = '你的老公正在找你，他现在位于:';
  g_sYourHusbandNowLocateMsg: string = '你的老公现在位于:';
  g_sYourWifeSearchLocateMsg: string = '你的老婆正在找你，他现在位于:';


  g_sfUnMasterLoginMsg: string = '你的一个徒弟已经背判师门了！！！';
  g_sfUnMasterListLoginMsg: string = '你的师父%d已经将你逐出师门了！！！';

  g_sMasterListOnlineSelfMsg: string = '你的师父%d当前位于%m(%x:%y)。';
  g_sMasterListOnlineMasterMsg: string = '你的徒弟%s在:%m(%x:%y)上线了！！！。';

  g_sMasterOnlineSelfMsg: string = '你的徒弟当前位于%m(%x:%y)。';
  g_sMasterOnlineMasterListMsg: string = '你的师父%s在:%m(%x:%y) 上线了！！！。';

  g_sMasterLongOutMasterListOnlineMsg: string = '你的师父在:%m(%x:%y)下线了！！！。';
  g_sMasterListLongOutMasterOnlineMsg: string = '你的徒弟%s在:%m(%x:%y)下线了！！！。';

  g_sMasterListNotOnlineMsg: string = '你的师父现不在线！！！';
  g_sMasterNotOnlineMsg: string = '你的徒弟现不在线！！！';

  g_sYouAreNotMasterMsg: string = '你都没师徒关系查什么？';
  g_sYourMasterNotOnlineMsg: string = '你的师父还没有上线！！！';
  g_sYourMasterListNotOnlineMsg: string = '你的徒弟还没有上线！！！';

  g_sYourMasterNowLocateMsg: string = '你的师父现在位于:';
  g_sYourMasterListSearchLocateMsg: string = '你的徒弟正在找你，他现在位于:';
  g_sYourMasterListNowLocateMsg: string = '你的徒弟现在位于:';
  g_sYourMasterSearchLocateMsg: string = '你的师父正在找你，他现在位于:';
  g_sYourMasterListUnMasterOKMsg: string = '你的徒弟%d已经圆满出师了！！！';
  g_sYouAreUnMasterOKMsg: string = '你已经出师了！！！';

  g_sUnMasterLoginMsg: string = '你的一个徒弟已经圆满出师了！！！';

  g_sNPCSayUnMasterOKMsg: string = '[%n]: 我宣布%d与%s正式脱离师徒关系。';

  g_sNPCSayForceUnMasterMsg: string = '[%n]: 我宣布%s与%d已经正式脱离师徒关系！！！';


  g_sMyInfo: string; //'『<人物名称>』:  %name 『<当前位置>』:  %map (%x:%y) 『<当前等级>』:  %level 『<金 币 数>』:  %gold 『<PK 点 数>』:  %pk 『<生 命 值>』:  %minhp/%maxhp 『<魔 法 值>』:  %minmp/%maxmp 『<攻 击 力>』:  %mindc/%maxdc 『<魔 法 力>』:  %minmc/%maxmc 『<道 术 力>』:  %minsc/%maxsc 『<登录时间>』:  %logontime 『<在线时长>』:  %logontimelong 分钟';
  g_sSendOnlineCountMsg: string = '当前在线人数: %c';

  g_sOpenedDealMsg: string = '开始交易。';
  g_sSendCustMsgCanNotUseNowMsg: string = '祝福语功能还没有开放！！！';
  g_sSubkMasterMsgCanNotUseNowMsg: string = '城主发信息功能还没有开放！！！';
  g_sWeaponRepairSuccess: string = '武器修复成功...';
  g_sDefenceUpTime: string = '防御力增加%d秒';
  g_sMagDefenceUpTime: string = '抗魔法力增加%d秒'; //'魔法防御力增加%d秒';
  g_sWinLottery1Msg: string = '祝贺您，中了一等奖。';
  g_sWinLottery2Msg: string = '祝贺您，中了二等奖。';
  g_sWinLottery3Msg: string = '祝贺您，中了三等奖。';
  g_sWinLottery4Msg: string = '祝贺您，中了四等奖。';
  g_sWinLottery5Msg: string = '祝贺您，中了五等奖。';
  g_sWinLottery6Msg: string = '祝贺您，中了六等奖。';
  g_sNotWinLotteryMsg: string = '等下次机会吧！！！';
  g_sWeaptonMakeLuck: string = '武器被加幸运了...';
  g_sWeaptonNotMakeLuck: string = '无效！！！';
  g_sTheWeaponIsCursed: string = '你的武器被诅咒了！！！';
  g_sCanotTakeOffItem: string = '无法取下物品！！！';
  g_sJoinGroup: string = '%s 已加入小组.';
  g_sTryModeCanotUseStorage: string = '试玩模式不可以使用仓库功能！！！';
  g_sCanotGetItems: string = '无法携带更多的东西！！！';
  g_sEnableDearRecall: string = '允许夫妻传送！！！';
  g_sDisableDearRecall: string = '禁止夫妻传送！！！';
  g_sEnableMasterRecall: string = '允许师徒传送！！！';
  g_sDisableMasterRecall: string = '禁止师徒传送！！！';
  g_sNowCurrDateTime: string = '当前日期时间: ';
  g_sEnableHearWhisper: string = '[允许私聊]';
  g_sDisableHearWhisper: string = '[禁止私聊]';
  g_sEnableShoutMsg: string = '[允许群聊]';
  g_sDisableShoutMsg: string = '[禁止群聊]';
  g_sEnableDealMsg: string = '[允许交易]';
  g_sDisableDealMsg: string = '[禁止交易]';
  g_sEnableGuildChat: string = '[允许行会聊天]';
  g_sDisableGuildChat: string = '[禁止行会聊天]';
  g_sEnableJoinGuild: string = '[允许加入行会]';
  g_sDisableJoinGuild: string = '[禁止加入行会]';
  g_sEnableAuthAllyGuild: string = '[允许行会联盟]';
  g_sDisableAuthAllyGuild: string = '[禁止行会联盟]';
  g_sEnableGroupRecall: string = '[允许天地合一]';
  g_sDisableGroupRecall: string = '[禁止天地合一]';
  g_sEnableGuildRecall: string = '[允许行会合一]';
  g_sDisableGuildRecall: string = '[禁止行会合一]';
  g_sPleaseInputPassword: string = '请输入密码:';
  g_sTheMapDisableMove: string = '地图%s(%s)不允许传送！！！';
  g_sTheMapNotFound: string = '%s 此地图号不存在！！！';
  g_sYourIPaddrDenyLogon: string = '你当前登录的IP地址已被禁止登录了！！！';
  g_sYourAccountDenyLogon: string = '你当前登录的帐号已被禁止登录了！！！';
  g_sYourCharNameDenyLogon: string = '你当前登录的人物已被禁止登录了！！！';
  g_sCanotPickUpItem: string = '在一定时间以内无法捡起此物品！！！';
  g_sCanotSendmsg: string = '无法发送信息.';
  g_sUserDenyWhisperMsg: string = ' 拒绝私聊！！！';
  g_sUserNotOnLine: string = '  没有在线！！！';
  g_sRevivalRecoverMsg: string = '复活戒指生效，体力恢复.';
  g_sClientVersionTooOld: string = '由于您使用的客户端版本太老了，无法正确显示人物信息！！！';

  g_sCastleGuildName: string = '(%castlename)%guildname[%rankname]';
  g_sNoCastleGuildName: string = '%guildname[%rankname]';
  g_sWarrReNewName: string = '%chrname\*<圣>*';
  g_sWizardReNewName: string = '%chrname\*<神>*';
  g_sTaosReNewName: string = '%chrname\*<尊>*';
  g_sRankLevelName: string = '%s\平民';
  g_sManDearName: string = '%s的老公';
  g_sWoManDearName: string = '%s的老婆';
  g_sMasterName: string = '%s的师父';
  g_sNoMasterName: string = '%s的徒弟';
  g_sHumanShowName: string = '%chrname\%guildname\%dearname\%mastername';

  g_sChangePermissionMsg: string = '当前权限等级为:%d';
  g_sChangeKillMonExpRateMsg: string = '经验倍数:%g 时长%d秒';
  g_sChangePowerRateMsg: string = '攻击力倍数:%g 时长%d秒';
  g_sChangeMemberLevelMsg: string = '当前会员等级为:%d';
  g_sChangeMemberTypeMsg: string = '当前会员类型为:%d';
  g_sScriptChangeHumanHPMsg: string = '当前HP值为:%d';
  g_sScriptChangeHumanMPMsg: string = '当前MP值为:%d';
  g_sScriptGuildAuraePointNoGuild: string = '你还没加入行会！！！';
  g_sScriptGuildAuraePointMsg: string = '你的行会人气度为:%d';
  g_sScriptGuildBuildPointNoGuild: string = '你还没加入行会！！！';
  g_sScriptGuildBuildPointMsg: string = '你的行会的建筑度为:%d';
  g_sScriptGuildFlourishPointNoGuild: string = '你还没加入行会！！！';
  g_sScriptGuildFlourishPointMsg: string = '你的行会的繁荣度为:%d';
  g_sScriptGuildStabilityPointNoGuild: string = '你的行会的建筑度为:%d';
  g_sScriptGuildStabilityPointMsg: string = '你的行会的安定度为:%d';
  g_sScriptChiefItemCountMsg: string = '你的行会的超级装备数为:%d';

  g_sDisableSayMsg: string = '[由于你重复发相同的内容，%d分钟内你将被禁止发言...]';
  g_sOnlineCountMsg: string = '在线数: %d';
  g_sTotalOnlineCountMsg: string = '总在线数: %d';
  g_sYouNeedLevelMsg: string = '你的等级要在%d级以上才能用此功能！！！';
  g_sThisMapDisableSendCyCyMsg: string = '本地图不允许喊话！！！';
  g_sYouCanSendCyCyLaterMsg: string = '%d秒后才可以再发文字！！！';
  g_sYouIsDisableSendMsg: string = '禁止聊天！！！';
  g_sYouMurderedMsg: string = '你犯了谋杀罪！！！';
  g_sYouKilledByMsg: string = '你被%s杀害了！！！';
  g_sYouProtectedByLawOfDefense: string = '[你受到正当规则保护。]';
  g_sYourUseItemIsNul: string = '你的%s处没有放上装备！！！';
  g_sYourUseItemIsCHANGENAME: string = '你的%s处的装备名字已经修改好了！！！';
  g_sLocalip: string = ''; //通过DBSERVER 获得本地IP
  g_sIpFromweb: string = '';
  g_TimerTrycount: Integer = 0;
  g_svision: string = '';

  g_dbConnect: boolean = false;
 // g_nAFTEpE                       :Integer;
resourcestring
  g_sGameLogMsg1 = '%d'#9'%s'#9'%d'#9'%d'#9'%s'#9'%s'#9'%d'#9'%s'#9'%s';
  g_sHumanDieEvent = '人物死亡事件';
  g_sHitOverSpeed = '[攻击超速] %s 间隔:%d 数量:%d';
  g_sRunOverSpeed = '[跑步超速] %s 间隔:%d 数量:%d';
  g_sWalkOverSpeed = '[行走超速] %s 间隔:%d 数量:%d';
  g_sSpellOverSpeed = '[魔法超速] %s 间隔:%d 数量:%d';
  g_sBunOverSpeed = '[游戏超速] %s 间隔:%d 数量:%d';

  g_sGameCommandPermissionTooLow = '权限不够！！！';
  g_sGameCommandParamUnKnow = '命令格式: @%s %s';
  g_sGameCommandMoveHelpMsg = '地图号';
  g_sGameCommandPositionMoveHelpMsg = '地图号 座标X 座标Y';
  g_sGameCommandPositionMoveCanotMoveToMap = '无法移动到地图: %s X:%s Y:%s';
  g_sGameCommandInfoHelpMsg = '人物名称';
//  g_sGameCommandHumanNotOnLine             :String = '%s 现在没在线！！！';
  g_sNowNotOnLineOrOnOtherServer = '%s 现在不在线，或在其它服务器上！！！';
  g_sGameCommandMobCountHelpMsg = '地图号';
  g_sGameCommandMobCountMapNotFound = '指定的地图不存在！！！';
  g_sGameCommandMobCountMonsterCount = '怪物数量：%d';
  g_sGameCommandHumanCountHelpMsg = '地图号';
  g_sGameCommandKickHumanHelpMsg = '人物名称';
  g_sGameCommandTingHelpMsg = '人物名称';
  g_sGameCommandSuperTingHelpMsg = '人物名称 范围(0-10)';
  g_sGameCommandMapMoveHelpMsg = '源地图  目标地图';
  g_sGameCommandMapMoveMapNotFound = '地图%s不存在！！！';
  g_sGameCommandShutupHelpMsg = '人物名称  时间长度(分钟)';
  g_sGameCommandShutupHumanMsg = '%s 已被禁言%d分钟';
  g_sGameCommandGamePointHelpMsg = '人物名称 控制符(+,-,=) 游戏点数(1-100000000)';
  g_sGameCommandGamePointHumanMsg = '你的游戏点已增加%d点，当前总点数为%d点。';
  g_sGameCommandGamePointGMMsg = '%s的游戏点已增加%d点，当前总点数为%d点。';

  g_sGameCommandCreditPointHelpMsg = '人物名称 控制符(+,-,=) 声望点数(0-255)';
  g_sGameCommandCreditPointHumanMsg = '你的声望点已增加%d点，当前总声望点数为%d点。';
  g_sGameCommandCreditPointGMMsg = '%s的声望点已增加%d点，当前总声望点数为%d点。';

  g_sGameCommandGameGoldHelpMsg = ' 人物名称 控制符(+,-,=) 游戏币(1-200000000)';
  g_sGameCommandGameGoldHumanMsg = '你的%s已增加%d，当前拥有%d%s。';
  g_sGameCommandGameGoldGMMsg = '%s的%s已增加%d，当前拥有%d%s。';

  g_sGameCommandMapInfoMsg = '地图名称: %s(%s)';
  g_sGameCommandMapInfoSizeMsg = '地图大小: X(%d) Y(%d)';

  g_sGameCommandShutupReleaseHelpMsg = '人物名称';
  g_sGameCommandShutupReleaseCanSendMsg = '你已经恢复聊天功能！！！';
  g_sGameCommandShutupReleaseHumanCanSendMsg = '%s 已经恢复聊天。';
  g_sGameCommandShutupListIsNullMsg = '禁言列表为空！！！';

  g_sGameCommandLevelConsoleMsg = '[等级调整] %s (%d -> %d)';
  g_sGameCommandSbkGoldHelpMsg = '城堡名称 控制符(=、-、+) 金币数(1-100000000)';
  g_sGameCommandSbkGoldCastleNotFoundMsg = '城堡%s未找到！！！';
  g_sGameCommandSbkGoldShowMsg = '%s的金币数为: %d 今天收入: %d';
  g_sGameCommandRecallHelpMsg = '人物名称';
  g_sGameCommandReGotoHelpMsg = '人物名称';
  g_sGameCommandShowHumanFlagHelpMsg = '人物名称 标识号';
  g_sGameCommandShowHumanFlagONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanFlagOFFMsg = '%s: [%d] = OFF';

  g_sGameCommandShowHumanUnitHelpMsg = '人物名称 单元号';
  g_sGameCommandShowHumanUnitONMsg = '%s: [%d] = ON';
  g_sGameCommandShowHumanUnitOFFMsg = '%s: [%d] = OFF';
  g_sGameCommandMobHelpMsg = '怪物名称 数量 等级';
  g_sGameCommandMobMsg = '怪物名称不正确或其它未问题！！！';
  g_sGameCommandMobNpcHelpMsg = 'NPC名称 脚本文件名 外形(数字) 属沙城(0,1)';
  g_sGameCommandNpcScriptHelpMsg = '？？？？';
  g_sGameCommandDelNpcMsg = '命令使用方法不正确，必须与NPC面对面，才能使用此命令！！！';
  g_sGameCommandRecallMobHelpMsg = '怪物名称 数量 等级';
  g_sGameCommandLuckPointHelpMsg = '人物名称 控制符 幸运点数';

  g_sGameCommandLuckPointMsg = '%s 的幸运点数为:%d/%g 幸运值为:%d';
  g_sGameCommandLotteryTicketMsg = '已中彩票数:%d 未中彩票数:%d 一等奖:%d 二等奖:%d 三等奖:%d 四等奖:%d 五等奖:%d 六等奖:%d ';
  g_sGameCommandReloadGuildHelpMsg = '行会名称';
  g_sGameCommandReloadGuildOnMasterserver = '此命令只能在主游戏服务器上执行！！！';
  g_sGameCommandReloadGuildNotFoundGuildMsg = '未找到行会%s！！！';
  g_sGameCommandReloadGuildSuccessMsg = '行会%s重加载成功...';

  g_sGameCommandReloadLineNoticeSuccessMsg = '重新加载公告设置信息完成。';
  g_sGameCommandReloadLineNoticeFailMsg = '重新加载公告设置信息失败！！！';
  g_sGameCommandFreePKHelpMsg = '人物名称';
  g_sGameCommandFreePKHumanMsg = '你的PK值已经被清除...';
  g_sGameCommandFreePKMsg = '%s的PK值已经被清除...';
  g_sGameCommandPKPointHelpMsg = '人物名称';
  g_sGameCommandPKPointMsg = '%s的PK点数为:%d';
  g_sGameCommandIncPkPointHelpMsg = '人物名称 PK点数';
  g_sGameCommandIncPkPointAddPointMsg = '%s的PK值已增加%d点...';
  g_sGameCommandIncPkPointDecPointMsg = '%s的PK值已减少%d点...';
  g_sGameCommandHumanLocalHelpMsg = '人物名称';
  g_sGameCommandHumanLocalMsg = '%s来自:%s';
  g_sGameCommandPrvMsgHelpMsg = '人物名称';
  g_sGameCommandPrvMsgUnLimitMsg = '%s 已从禁止私聊列表中删除...';
  g_sGameCommandPrvMsgLimitMsg = '%s 已被加入禁止私聊列表...';
  g_sGamecommandMakeHelpMsg = ' 物品名称  数量';
  g_sGamecommandMakeItemNameOrPerMissionNot = '输入的物品名称不正确，或权限不够！！！';
  g_sGamecommandMakeInCastleWarRange = '攻城区域，禁止使用此功能！！！';
  g_sGamecommandMakeInSafeZoneRange = '非安全区，禁止使用此功能！！！';
  g_sGamecommandMakeItemNameNotFound = '%s 物品名称不正确！！！';
  g_sGamecommandSuperMakeHelpMsg = '身上没指定物品！！！';
  g_sGameCommandViewWhisperHelpMsg = ' 人物名称';
  g_sGameCommandViewWhisperMsg1 = '已停止侦听%s的私聊信息...';
  g_sGameCommandViewWhisperMsg2 = '正在侦听%s的私聊信息...';
  g_sGameCommandReAliveHelpMsg = ' 人物名称';
  g_sGameCommandReAliveMsg = '%s 已获重生.';
  g_sGameCommandChangeJobHelpMsg = ' 人物名称 职业类型(Warr Wizard Taos)';
  g_sGameCommandChangeJobMsg = '%s 的职业更改成功。';
  g_sGameCommandChangeJobHumanMsg = '职业更改成功。';
  g_sGameCommandTestGetBagItemsHelpMsg = '(用于测试升级武器方面参数)';
  g_sGameCommandShowUseItemInfoHelpMsg = '人物名称';
  g_sGameCommandBindUseItemHelpMsg = '人物名称 物品类型 绑定方法';
  g_sGameCommandBindUseItemNoItemMsg = '%s的%s没有戴物品！！！';
  g_sGameCommandBindUseItemAlreadBindMsg = '%s的%s上的物品早已绑定过了！！！';
  g_sGameCommandMobFireBurnHelpMsg = '命令格式: %s %s %s %s %s %s %s';
  g_sGameCommandMobFireBurnMapNotFountMsg = '地图%s 不存在';

resourcestring
  U_DRESSNAME = '衣服';
  U_WEAPONNAME = '武器';
  U_RIGHTHANDNAME = '照明物';
  U_NECKLACENAME = '项链';
  U_HELMETNAME = '头盔';
  U_ARMRINGLNAME = '左手镯';
  U_ARMRINGRNAME = '右手镯';
  U_RINGLNAME = '左戒指';
  U_RINGRNAME = '右戒指';

  U_BOOTSNAME = '鞋子'; ////hint 鞋子
  U_BELTNAME = '腰带'; //    腰带

  U_CHARMNAME = '宝石'; //    宝石
  U_BUJUKNAME = '物品'; //    物品    毒物
//===============================================================
var
 // IPLocal:TIPLocal = nil;
  nIPLocal: Integer = -1;
 {$IF  VERWD=0}
  ENcode, Decode: _ENcode;
  MyGetTime: _GetTime;
  HardID: _HardID;
  GetCrc: _GetCrc;
  InitHandle: _Init;
  DllHandle: Integer;
 {$IFEND}
  HardIDStr: string;
  RegIDStr:String;
  RegTimeStr:String;
  QQWry: TQQWry ;
  g_NPC:TMerchant;
implementation

uses HUtil32, EDcode, LocalDB;
var
  nAddGameDataLog: Integer = -1;
  PN_GETRGB, PN_GAMEDATALOG: string;

procedure SetProcessName(sName: string);
begin
//  g_sOldProcessName:=g_sProcessName;
//  g_sProcessName:=sName;
end;

procedure CopyStdItemToOStdItem(StdItem: pTStdItem; OStdItem: pTOStdItem);
begin
  OStdItem.Name := StdItem.Name;
  OStdItem.StdMode := StdItem.StdMode;
  OStdItem.Shape := StdItem.Shape;
  OStdItem.Weight := StdItem.Weight;
  OStdItem.AniCount := StdItem.AniCount;
  OStdItem.Source := StdItem.Source;
  OStdItem.Reserved := StdItem.Reserved;
  OStdItem.NeedIdentify := StdItem.NeedIdentify;
  OStdItem.Looks := StdItem.Looks;
  OStdItem.DuraMax := StdItem.DuraMax;
  OStdItem.AC := stditem^.AC;
  OStdItem.MAC := stditem^.MAC;
  OStdItem.DC := stditem^.DC;
  OStdItem.MC := stditem^.MC;
  OStdItem.SC := stditem^.SC;
  OStdItem.Need := StdItem.Need;
  OStdItem.NeedLevel := StdItem.NeedLevel;
  OStdItem.Price := StdItem.Price;
end;

procedure GetKey;
begin
end;

procedure InitPlugArrayTable();
begin
{$IF DEBUG = 0}
  asm
    jz @@Start
    jnz @@Start
    db 0C3h
    db 0E8h
    db 0EBh
    db 007h
    @@Start:
  end;
{$IFEND}
  SetProcTable(@TRunSocket.DemoRun, PChar(DeCodeStringmir('QAEqWaIkTriaY>uNYRt')) {'TRunSocket.Run'}, length('TRunSocket.Run'));
{$IF DEBUG = 0}
  asm
    jz @@Start
    jnz @@Start
    db 0E8h
    @@Start:
  end;
{$IFEND}
  SetProcTable(@TUserEngine.DemoRun, PChar(DeCodeStringmir('QAQoUSEAWbYeWbPjPcQj')) {'TUserEngine.Run'}, length('TUserEngine.Run'));
{$IF DEBUG = 0}
  asm
    jz @@Start
    jnz @@Start
    db 0E8h
    @@Start:
  end;
{$IFEND}
end;

function AddToPulgProcTable(sProcName: string): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := Low(PlugProcArray) to High(PlugProcArray) do
  begin
    if PlugProcArray[I].sProcName = '' then
    begin
      PlugProcArray[I].sProcName := sProcName;
      Result := I;
      break;
    end;
  end;
end;

function AddToProcTable(ProcAddr: Pointer; sProcName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  for I := Low(ProcArray) to High(ProcArray) do
  begin
    if ProcArray[I].nProcAddr = nil then
    begin
      ProcArray[I].nProcAddr := ProcAddr;
      ProcArray[I].sProcName := sProcName;
      Result := True;
      break;
    end;
  end;
end;

function findProcarray(sProcName: string): integer;
var
  I: Integer;
begin
  Result := -1;
  for I := Low(ProcArray) to High(ProcArray) do
  begin
    if ProcArray[I].sProcName = sProcName then
    begin
     // ProcArray[I].nProcAddr:=ProcAddr;

      Result := i;
      break;
    end;
  end;
end;




function AddToObjTable(Obj: TObject; sObjName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  for I := Low(ObjectArray) to High(ObjectArray) do
  begin
    if ObjectArray[I].Obj = nil then
    begin
      ObjectArray[I].Obj := Obj;
      ObjectArray[I].sObjcName := sObjName;
      Result := True;
      break;
    end;
  end;
end;


//004E40B0

function LoadLineNotice(FileName: string): Boolean;
var
  i: integer;
  sText: string;
begin
  Result := False;
  if FileExists(FileName) then
  begin
    LineNoticeList.LoadFromFile(FileName);
    i := 0;
    while (True) do
    begin
      if LineNoticeList.Count <= i then
        break;
      sText := Trim(LineNoticeList.Strings[i]);
      if sText = '' then
      begin
        LineNoticeList.Delete(i);
        Continue;
      end;
      LineNoticeList.Strings[i] := sText;
      Inc(i);
    end;
    Result := True;
  end;
end;

function LoadLineBanner(FileName: string): Boolean;
var
  i: integer;
  sText: string;
begin
  Result := False;
  if FileExists(FileName) then
  begin
    BannerNotice.LoadFromFile(FileName);
    i := 0;
    while (True) do
    begin
      if BannerNotice.Count <= i then
        break;
      sText := Trim(BannerNotice.Strings[i]);
      if sText = '' then
      begin
        BannerNotice.Delete(i);
        Continue;
      end;
      BannerNotice.Strings[i] := sText;
      Inc(i);
    end;
    Result := True;
  end;
end;

function GetMultiServerAddrPort(btServerIndex: Byte; var sIPaddr: string; var nPort: Integer): Boolean;
begin
  Result := False;
//  ServerTableList
end;

procedure MainOutMessage(Msg: string);
begin

 if not g_Config.boShowExceptionMsg then
  begin
    if (length(Msg) > 2) and ((Msg[2] = 'E') or (Msg[1] = 'A')) then
      exit;
  end;
  EnterCriticalSection(LogMsgCriticalSection);
  try
    MainLogMsgList.Add(DateTimeToStr(Now) + ' ' + Msg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;
function GetExVersionNO(nVersionDate: Integer; var nOldVerstionDate: Integer): Integer;
begin
  Result := 0;
  nOldVerstionDate := 0;
  if nVersionDate < 20081014 then
  begin
    Result := 1000;
  end;

  nOldVerstionDate := nVersionDate;
end;

function GetNextDirection(sx, sy, dx, dy: Integer): byte; //004B2C38
var
  flagx, flagy: integer;
begin
  Result := DR_DOWN;
  if sx < dx then
    flagx := 1
  else
    if sx = dx then
      flagx := 0
    else
      flagx := -1;
  if abs(sy - dy) > 2
    then
    if (sx >= dx - 1) and (sx <= dx + 1) then
      flagx := 0;

  if sy < dy then
    flagy := 1
  else
    if sy = dy then
      flagy := 0
    else
      flagy := -1;
  if abs(sx - dx) > 2 then
    if (sy > dy - 1) and (sy <= dy + 1) then
      flagy := 0;

  if (flagx = 0) and (flagy = -1) then
    Result := DR_UP;
  if (flagx = 1) and (flagy = -1) then
    Result := DR_UPRIGHT;
  if (flagx = 1) and (flagy = 0) then
    Result := DR_RIGHT;
  if (flagx = 1) and (flagy = 1) then
    Result := DR_DOWNRIGHT;
  if (flagx = 0) and (flagy = 1) then
    Result := DR_DOWN;
  if (flagx = -1) and (flagy = 1) then
    Result := DR_DOWNLEFT;
  if (flagx = -1) and (flagy = 0) then
    Result := DR_LEFT;
  if (flagx = -1) and (flagy = -1) then
    Result := DR_UPLEFT;
end;

function CheckUserItems(nIdx: integer; StdItem: pTStdItem): Boolean; //004B2D70
begin
  Result := False;
  case nIdx of
    U_DRESS:
      if StdItem.StdMode in [10, 11] then
        Result := True;
    U_WEAPON:
      if (StdItem.StdMode = 5) or (StdItem.StdMode = 6) then
        Result := True;
    U_RIGHTHAND:
      if (StdItem.StdMode = 29) or (StdItem.StdMode = 30) or (StdItem.StdMode = 33) then
        Result := True; //带马牌的位置
    U_NECKLACE:
      if (StdItem.StdMode = 19) or (StdItem.StdMode = 20) or (StdItem.StdMode = 21) then
        Result := True;
    U_HELMET:
      if StdItem.StdMode = 15 then
        Result := True; //头盔
    U_ARMRINGL:
      if (StdItem.StdMode = 24) or (StdItem.StdMode = 34) or (StdItem.StdMode = 25) or (StdItem.StdMode = 26) then
        Result := True; //放毒物品  (StdItem.StdMode = 25)
    U_ARMRINGR:
      if (StdItem.StdMode = 24) or (StdItem.StdMode = 26) then
        Result := True;
    U_RINGL,
      U_RINGR:
      if (StdItem.StdMode = 22) or (StdItem.StdMode = 23) then
        Result := True;
    U_BOOTS:
      if (StdItem.StdMode = 81) or (StdItem.StdMode = 51) then
        Result := True; //鞋子
    U_BELT:
      if (StdItem.StdMode = 58) or (StdItem.StdMode = 64) then
        Result := True; //腰带
    U_CHARM:
      if (StdItem.StdMode = 59) or (StdItem.StdMode = 82) then
        Result := True; ////hint 宝石
    U_BUJUK:
      if (StdItem.StdMode = 25) or (StdItem.StdMode = 34) or (StdItem.StdMode = 33) then
        Result := True; //毒物 =25 (StdItem.StdMode = 26) or
    U_Shield:
      if (StdItem.StdMode = 12) then
        Result := True; //毒物 =25 (StdItem.StdMode = 26) or
    14:
      if StdItem.StdMode=13 then
        Result:=True;
      
  end;
end;

function AddDateTimeOfDay(DateTime: TDateTime; nDay: Integer): TDateTime; //00455DD4

begin
  if nDay > 0 then
  begin
    Result:=DateTime+nDay;
  end
  else
  begin
    Result := DateTime;
  end;

end;

function GetGoldShape(nGold: Integer): Word; ////hint
//00455E98
begin
  Result := 112;
  if nGold >= 30 then
    Result := 113;
  if nGold >= 70 then
    Result := 114;
  if nGold >= 300 then
    Result := 115;
  if nGold >= 1000 then
    Result := 116;
  Result := Result + 113;
end;

function GetRandomLook(nBaseLook, nRage: Integer): Integer; //00455EEC
begin
  Result := nBaseLook + Random(nRage);
end;

function CheckGuildName(sGuildName: string): Boolean; //00455BF4
var
  I: Integer;
begin
  Result := True;
  if length(sGuildName) > g_Config.nGuildNameLen then
  begin
    Result := False;
    exit;
  end;
  for I := 1 to length(sGuildname) do
  begin
    if (sGuildName[I] < '0' {30}) or
      (sGuildName[I] = '/' {2F}) or
      (sGuildName[I] = '\' {5C}) or
      (sGuildName[I] = ':' {3A}) or
      (sGuildName[I] = '*') or
      (sGuildName[I] = ' ') or
      (sGuildName[I] = '"') or
      (sGuildName[I] = '''') or
      (sGuildName[I] = '<' {3C}) or
      (sGuildName[I] = '|' {7C}) or
      (sGuildName[I] = '?' {3F}) or
      (sGuildName[I] = '>' {3E}) then
    begin
      Result := False;
    end;
  end;
end;

function GetItemNumber(): Integer; //004E3E34
begin
  Inc(g_Config.nItemNumber);
  if g_Config.nItemNumber > (High(Integer) div 2 - 1) then
  begin
    g_Config.nItemNumber := 1;
  end;
  Result := g_Config.nItemNumber;
end;

function GetItemNumberEx(): Integer;
begin
  Inc(g_Config.nItemNumberEx);
  if g_Config.nItemNumberEx < High(Integer) div 2 then
    g_Config.nItemNumberEx := High(Integer) div 2;

  if g_Config.nItemNumberEx > (High(Integer) - 1) then
  begin
    g_Config.nItemNumberEx := High(Integer) div 2;
  end;
  Result := g_Config.nItemNumberEx;
end;

function FilterShowName(sName: string): string;
var
  I: Integer;
  sC: string;
  bo11: Boolean;
begin
  Result := '';
  sC := '';

  bo11 := False;
  while (sName<>'') and (sName[Length(sName)] in ['0'..'9'])do
     Delete(sName,Length(sName),1);
    Result := sName;
end;
function FilterItemName(sName: string): string;
var
  i,n: Integer;
  sC: string;
  bo11: Boolean;
begin
  Result := '';
  sC := '';

  bo11 := False;
  for I :=  length(sName) downto 1 do
  begin
    if ((sName[i] >= '0') and (sName[i] <= '9'))  then
    begin
       bo11:=True;
       Continue;
    end
    else
    begin
     n:=i;
      break;
    end;
  end;
  if bo11 then
    Result:=Copy(sName,1,n)
  else
    Result:=sName;
end;
function sub_4B2F80(nDir, nRage: Integer): Byte;
begin
  Result := (nDir + nRage) mod 8;
end;

function GetValNameNo(sText: string): Integer; //0049ABF0
var
  nValNo: integer;
begin
  
  Val(sText,Result,nValNo);
  if nValNo=0 then
  begin
    Result:=1000;
    exit;
  end;
  Result := 2000;
  if length(sText) >= 2 then
  begin
    if UpCase(sText[1]) = 'P' then
    begin
      nValNo := Str_ToInt(sText[2], -1);
      if nValNo < 10 then
        Result := nValNo;
    end;
    if UpCase(sText[1]) = 'G' then
    begin
      if length(sText) = 3 then
      begin
        nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
        if nValNo < 100 then
          Result := nValNo + 100;

      end
      else
      begin
        nValNo := Str_ToInt(sText[2], -1);
        if nValNo < 10 then
          Result := nValNo + 100;
      end;
    end;
    if UpCase(sText[1]) = 'A' then
    begin
       Delete(stext,1,1);
       nValNo:=Str_ToInt(sText,-1);
       if (nValNo>=0) and(nValNo<300) then
           Result:=3000+nValNo;
       Exit;

    end;


    if UpCase(sText[1]) = 'M' then
    begin
      if length(sText) = 3 then
      begin
        nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
        if nValNo < 100 then
          Result := nValNo + 300;
      end
      else
      begin
        nValNo := Str_ToInt(sText[2], -1);
        if nValNo < 10 then
          Result := nValNo + 300;
      end;
    end;
    if UpCase(sText[1]) = 'I' then
    begin
      if length(sText) = 3 then
      begin
        nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
        if nValNo < 100 then
          Result := nValNo + 400;
      end
      else
      begin
        nValNo := Str_ToInt(sText[2], -1);
        if nValNo < 10 then
          Result := nValNo + 400;
      end;
    end;
    if UpCase(sText[1]) = 'D' then
    begin
      nValNo := Str_ToInt(sText[2], -1);
      if nValNo < 10 then
        Result := nValNo + 200;
    end;


    if UpCase(sText[1]) = 'S' then
    begin
      if length(sText) >= 3 then
      begin
        Delete(sText, 1, 1) ;
        nValNo := Str_ToInt(sText, -1);
        if nValNo < 100 then
          Result := nValNo + 500
        else
          if nValNo<200 then
          Result:=nValNo+5000;
      end
      else
      begin
        nValNo := Str_ToInt(sText[2], -1);
        if nValNo < 10 then
          Result := nValNo + 500;
      end;
    end;

    if UpCase(sText[1]) = 'T' then
    begin
      if length(sText) = 3 then
      begin
        nValNo := Str_ToInt(Copy(sText, 2, 2), -1);
        if nValNo < 100 then
          Result := nValNo + 600;

      end
      else
      begin
        nValNo := Str_ToInt(sText[2], -1);
        if nValNo < 10 then
          Result := nValNo + 600;
      end;
    end;

  end;
end;

function IsUseItem(nIndex: Integer): Boolean; //004B2E94
var
  StdItem: pTStdItem;
begin
  StdItem := UserEngine.GetStdItem(nIndex);
  if StdItem.StdMode in [19, 20, 21, 22, 23, 24, 26] then
    Result := True
  else
    Result := False;

end;

function GetMakeItemInfo(sItemName: string): TStringList;
var
  I: Integer;
begin
  Result := nil;
  for I := 0 to g_MakeItemList.Count - 1 do
  begin
    if g_MakeItemList.Strings[I] = sItemName then
    begin
      Result := TStringList(g_MakeItemList.Objects[I]);
      break;
    end;
  end;
end;

procedure AddGameDataLog(sMsg: string);
begin
  //调用插件中的日志处理函数，返回值为True 时直接退出函数，False 时使用默认函数处理游戏日志
{  if (nAddGameDataLog >= 0) and Assigned(PlugProcArray[nAddGameDataLog].nProcAddr) then begin
   if TGameDataLog(PlugProcArray[nAddGameDataLog].nProcAddr)(PChar(sMsg),length(sMsg)) then
     exit;
  end;
  }
  EnterCriticalSection(LogMsgCriticalSection);
  try
    LogStringList.Add(sMsg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;

procedure AddLogonCostLog(sMsg: string); //004E437C
begin
  EnterCriticalSection(LogMsgCriticalSection);
  try
    LogonCostLogList.Add(sMsg);
  finally
    LeaveCriticalSection(LogMsgCriticalSection);
  end;
end;

procedure TrimStringList(sList: TStringList); //0x00455D48
var
  n8: Integer;
  sC: string;
begin
  n8 := 0;
  while (True) do
  begin
    if (sList.Count) <= n8 then
      break;
    sC := Trim(sList.Strings[n8]);
    if sC = '' then
    begin
      sList.Delete(n8);
      Continue;
    end;
    Inc(n8);
  end;
end;

function CanMakeItem(sItemName: string): Boolean;
var
  I: Integer;
  pItemRule : pTItemRule;
begin
  Result:=True;
  g_ItemRuleList.Lock;
  try
    for I := 0 to g_ItemRuleList.Count - 1 do
    begin

      if CompareText(g_ItemRuleList.Strings[I], sItemName) = 0 then
      begin
        pItemRule:=pTitemRule(g_ItemRuleList.Objects[i]);
        if pItemRule.boDisableMake then
           Result := False;

        Break;
      end;
    end;
  finally
    g_ItemRuleList.UnLock;
  end;

end;

function CanMoveMap(sMapName: string): Boolean;
var
  I: Integer;
begin
  Result := True;
  g_DisableMoveMapList.Lock;
  try
    for I := 0 to g_DisableMoveMapList.Count - 1 do
    begin
      if CompareText(g_DisableMoveMapList.Strings[I], sMapName) = 0 then
      begin
        Result := False;
        break;
      end;
    end;
  finally
    g_DisableMoveMapList.UnLock;
  end;
end;
function LoadUserCMd:Integer;
var
   i : Integer;
  LoadList: TStringList;
  sLineText, sUserCMD,sUserCMDIndex: string;
  index,code:Integer;
  sFileName:String;
begin
  sFileName :=g_Config.sEnvirDir +  'UserCmd.txt';
  if FileExists(sFileName) then
  begin
      g_UserCMDList.Clear;
        LoadList := TStringList.Create;
      LoadList.LoadFromFile(sFileName);
     for I := 0 to LoadList.Count - 1 do
      begin
        sLineText := Trim(LoadList.Strings[I]);
        if sLineText='' then Continue;
        
        if sLineText[1] = ';' then
          Continue;
        sUserCMDIndex := GetValidStr3(sLineText, sUserCMD, [' ', ',', #9]);
        sUserCMDIndex:=Trim(sUserCMDIndex);
        Val(sUserCMDIndex,index,code);
        if code<1 then
        begin
          g_UserCMDList.AddObject(UpperCase(sUserCMD),TObject(index));
        end;
      end;
      LoadList.Free;
  end;
end;
function LoadItemBindIPaddr(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindIPaddr.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_ItemBindIPaddr.Lock;
    try
      for I := 0 to g_ItemBindIPaddr.Count - 1 do
      begin
        Dispose(pTItemBind(g_ItemBindIPaddr.Items[I]));
      end;
      g_ItemBindIPaddr.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        sLineText := Trim(LoadList.Strings[I]);
        if sLineText[1] = ';' then
          Continue;
        sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
        nMakeIndex := Str_ToInt(sMakeIndex, -1);
        nItemIndex := Str_ToInt(sItemIndex, -1);
        if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then
        begin
          New(ItemBind);
          ItemBind.nMakeIdex := nMakeIndex;
          ItemBind.nItemIdx := nItemIndex;
          ItemBind.sBindName := sBindName;
          g_ItemBindIPaddr.Add(ItemBind);
        end;
      end;
    finally
      g_ItemBindIPaddr.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemBindIPaddr(): Boolean;
var
  I: integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindIPaddr.txt';
  SaveList := TStringList.Create;
  g_ItemBindIPaddr.Lock;
  try
    for I := 0 to g_ItemBindIPaddr.Count - 1 do
    begin
      ItemBind := g_ItemBindIPaddr.Items[I];
      SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
    end;
  finally
    g_ItemBindIPaddr.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;

function LoadItemBindAccount(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindAccount.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_ItemBindAccount.Lock;
    try
      for I := 0 to g_ItemBindAccount.Count - 1 do
      begin
        Dispose(pTItemBind(g_ItemBindAccount.Items[I]));
      end;
      g_ItemBindAccount.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        sLineText := Trim(LoadList.Strings[I]);
        if sLineText[1] = ';' then
          Continue;
        sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
        nMakeIndex := Str_ToInt(sMakeIndex, -1);
        nItemIndex := Str_ToInt(sItemIndex, -1);
        if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then
        begin
          New(ItemBind);
          ItemBind.nMakeIdex := nMakeIndex;
          ItemBind.nItemIdx := nItemIndex;
          ItemBind.sBindName := sBindName;
          g_ItemBindAccount.Add(ItemBind);
        end;
      end;
    finally
      g_ItemBindAccount.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemBindAccount(): Boolean;
var
  I: integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindAccount.txt';
  SaveList := TStringList.Create;
  g_ItemBindAccount.Lock;
  try
    for I := 0 to g_ItemBindAccount.Count - 1 do
    begin
      ItemBind := g_ItemBindAccount.Items[I];
      SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
    end;
  finally
    g_ItemBindAccount.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;

function LoadItemBindCharName(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText, sMakeIndex, sItemIndex, sBindName: string;
  nMakeIndex, nItemIndex: Integer;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindChrName.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_ItemBindCharName.Lock;
    try
      for I := 0 to g_ItemBindCharName.Count - 1 do
      begin
        Dispose(pTItemBind(g_ItemBindCharName.Items[I]));
      end;
      g_ItemBindCharName.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        sLineText := Trim(LoadList.Strings[I]);
        if sLineText[1] = ';' then
          Continue;
        sLineText := GetValidStr3(sLineText, sItemIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sMakeIndex, [' ', ',', #9]);
        sLineText := GetValidStr3(sLineText, sBindName, [' ', ',', #9]);
        nMakeIndex := Str_ToInt(sMakeIndex, -1);
        nItemIndex := Str_ToInt(sItemIndex, -1);
        if (nMakeIndex > 0) and (nItemIndex > 0) and (sBindName <> '') then
        begin
          New(ItemBind);
          ItemBind.nMakeIdex := nMakeIndex;
          ItemBind.nItemIdx := nItemIndex;
          ItemBind.sBindName := sBindName;
          g_ItemBindCharName.Add(ItemBind);
        end;
      end;
    finally
      g_ItemBindCharName.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveItemBindCharName(): Boolean;
var
  I: integer;
  SaveList: TStringList;
  sFileName: string;
  ItemBind: pTItemBind;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'ItemBindChrName.txt';
  SaveList := TStringList.Create;
  g_ItemBindCharName.Lock;
  try
    for I := 0 to g_ItemBindCharName.Count - 1 do
    begin
      ItemBind := g_ItemBindCharName.Items[I];
      SaveList.Add(IntToStr(ItemBind.nItemIdx) + #9 + IntToStr(ItemBind.nMakeIdex) + #9 + ItemBind.sBindName);
    end;
  finally
    g_ItemBindCharName.UnLock;
  end;
  SaveList.SaveToFile(sFileName);
  SaveList.Free;
  Result := True;
end;
function LoadItem_Unit():Boolean;
var
  pUnit_Item  : pTUnit_Item;
  Unit_Item   : TUnit_Item;
  i,Size      : Integer;
 LoadList: TMemoryStream;
  sFileName: string;
  sList:TStringList;
  pPlantPoint:pTPlantPoint;
  sMap,sTemp,sx,sy,sRand:String;

begin
  Result := False;


  sFileName:=g_Config.sEnvirDir+'PlantPoint.txt';

  sList:=TStringList.Create;
  try
  if FileExists(sFileName) then
  begin
   sList.LoadFromFile(sFileName);
   for I := 0 to sList.Count - 1 do
   Begin
     sTemp:=Trim(sList[i]);
     if sTemp='' then Continue;
     if sTemp[1]=';' then Continue;
     sTemp:=GetValidStr3(sTemp,sMap,[#9,' ']);
     sTemp:=GetValidStr3(sTemp,sX,[#9,' ']);
     sRand:=GetValidStr3(sTemp,sY,[#9,' ']);
     New(pPlantPoint);
     pPlantPoint.sMap:=sMap;
     pPlantPoint.x:=Str_ToInt(sx,0);
     pPlantPoint.y:=Str_ToInt(sy,0);
     pPlantPoint.nRand:=Str_ToInt(sRand,0);
     g_PlantPointList.AddObject(sMap,TObject(pPlantPoint));
   End;

  end
  else
    sList.SaveToFile(sFileName);
  finally
    sList.Free;
  end;

  sFileName := g_Config.sEnvirDir + 'ItemUnit.dat';
    LoadList := TMemoryStream.Create;


  if FileExists(sFileName) then
  begin
    g_Item_UnitList.Lock;
    try
      g_Item_UnitList.Clear;
      LoadList.LoadFromFile(sFileName);
      size:=LoadList.Read(Unit_Item,SizeOf(TUnit_Item));
      while size=SizeOf(TUnit_Item) do
      begin
        New(pUnit_Item);
        pUnit_Item^:=Unit_Item;
        g_Item_UnitList.AddObject(pUnit_Item.Name,TObject(pUnit_Item));
        size:=LoadList.Read(Unit_Item,SizeOf(TUnit_Item));
      end;
    finally
      g_Item_UnitList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;
function SaveItem_Unit:Boolean;
var
  sFileName: string;
  SaveStream : TMemoryStream;
  pUnit_Item : pTUnit_Item;

  i         : Integer;
begin
  sFileName := g_Config.sEnvirDir + 'ItemUnit.dat';
  g_Item_UnitList.Lock;
  try
    SaveStream:=TMemoryStream.Create;
    for I := 0 to g_Item_UnitList.Count - 1 do
    Begin
       pUnit_Item := pTUnit_Item(g_Item_UnitList.Objects[i]);
       SaveStream.Write(pUnit_Item^,SizeOf(TUnit_Item));

    End;
      
    SaveStream.SaveToFile(sFileName);
  finally
    g_Item_UnitList.UnLock;
    SaveStream.Free;
  end;
  Result := True;
end;
//function LoadItemRule(): Boolean;
//var
//  I,size: integer;
//  LoadList: TMemoryStream;
//  sFileName: string;
//  pItemRule : pTItemRule;
//  ItemRule  : TItemRule;
//begin
//  Result := False;
//  sFileName := g_Config.sEnvirDir + 'ItemRule.dat';
//  LoadList := TMemoryStream.Create;
//  if FileExists(sFileName) then
//  begin
//    g_ItemRuleList.Lock;
//    try
//      g_ItemRuleList.Clear;
//      LoadList.LoadFromFile(sFileName);
//      size:=LoadList.Read(ItemRule,SizeOf(TItemrule));
//      while size=SizeOf(TItemrule) do
//      begin
//        New(pItemRule);
//        pItemRule^:=ItemRule;
//        g_ItemRuleList.AddObject(pItemRule.Name,TObject(pItemRule));
//        size:=LoadList.Read(ItemRule,SizeOf(TItemrule));
//      end;
//    finally
//      g_ItemRuleList.UnLock;
//    end;
//    Result := True;
//  end
//  else
//  begin
//    LoadList.SaveToFile(sFileName);
//  end;
//  LoadList.Free;
//end;
//
//function SaveItemRule(): Boolean;
//var
//  sFileName: string;
//  SaveStream : TMemoryStream;
//  pItemRule : pTItemRule;
//  ItemRule  : TItemRule;
//  i         : Integer;
//begin
//  sFileName := g_Config.sEnvirDir + 'ItemRule.dat';
//  g_ItemRuleList.Lock;
//  try
//    SaveStream:=TMemoryStream.Create;
//    for I := 0 to g_ItemRuleList.Count - 1 do
//    Begin
//       pItemRule := pTItemRule(g_ItemRuleList.Objects[i]);
//       SaveStream.Write(pItemRule^,SizeOf(TItemRule));
//
//    End;
//      
//    SaveStream.SaveToFile(sFileName);
//  finally
//    g_ItemRuleList.UnLock;
//    SaveStream.Free;
//  end;
//  Result := True;
//end;

function SaveAdminList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
  sPerMission: string;
  nPerMission: Integer;
  AdminInfo: pTAdminInfo;
begin
  sFileName := g_Config.sEnvirDir + 'AdminList.txt';
  SaveList := TStringList.Create;
  UserEngine.m_AdminList.Lock;
  try
    for I := 0 to UserEngine.m_AdminList.Count - 1 do
    begin
      AdminInfo := pTAdminInfo(UserEngine.m_AdminList.Items[I]);
      nPerMission := AdminInfo.nLv;
      if nPerMission = 10 then
        sPerMission := '*';
      if nPerMission = 9 then
        sPerMission := '1';
      if nPerMission = 8 then
        sPerMission := '2';
      if nPerMission = 7 then
        sPerMission := '3';
      if nPerMission = 6 then
        sPerMission := '4';
      if nPerMission = 5 then
        sPerMission := '5';
      if nPerMission = 4 then
        sPerMission := '6';
      if nPerMission = 3 then
        sPerMission := '7';
      if nPerMission = 2 then
        sPerMission := '8';
      if nPerMission = 1 then
        sPerMission := '9';

     // SaveList.Add(sPerMission + #9 + AdminInfo.sChrName);
     SaveList.Add(sPerMission + #9 + AdminInfo.sChrName + #9 + AdminInfo.sIPaddr);
    end;
    SaveList.SaveToFile(sFileName);
  finally
    UserEngine.m_AdminList.UnLock;
  end;
  Result := True;
end;

function LoadUnMasterList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'UnMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_UnMasterList.Lock;
    try
      g_UnMasterList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_UnMasterList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_UnMasterList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveUnMasterList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'UnMaster.txt';
  g_UnMasterList.Lock;
  try
    g_UnMasterList.SaveToFile(sFileName);
  finally
    g_UnMasterList.UnLock;
  end;
  Result := True;
end;

function LoadUnForceMasterList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'UnForceMaster.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_UnForceMasterList.Lock;
    try
      g_UnForceMasterList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_UnForceMasterList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_UnForceMasterList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveUnForceMasterList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'UnForceMaster.txt';
  g_UnForceMasterList.Lock;
  try
    g_UnForceMasterList.SaveToFile(sFileName);
  finally
    g_UnForceMasterList.UnLock;
  end;
  Result := True;
end;



function LoadDisableMoveMap(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableMoveMap.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_DisableMoveMapList.Lock;
    try
      g_DisableMoveMapList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_DisableMoveMapList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_DisableMoveMapList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveDisableMoveMap(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableMoveMap.txt';
  g_DisableMoveMapList.Lock;
  try
    g_DisableMoveMapList.SaveToFile(sFileName);
  finally
    g_DisableMoveMapList.UnLock;
  end;
  Result := True;
end;



function GetUseItemIdx(sName: string): Integer;
begin
  Result := -1;
  if CompareText(sName, U_DRESSNAME) = 0 then
  begin
    Result := 0;
  end
  else
    if CompareText(sName, U_WEAPONNAME) = 0 then
    begin
      Result := 1;
    end
    else
      if CompareText(sName, U_RIGHTHANDNAME) = 0 then
      begin
        Result := 2;
      end
      else
        if CompareText(sName, U_NECKLACENAME) = 0 then
        begin
          Result := 3;
        end
        else
          if CompareText(sName, U_HELMETNAME) = 0 then
          begin
            Result := 4;
          end
          else
            if CompareText(sName, U_ARMRINGLNAME) = 0 then
            begin
              Result := 5;
            end
            else
              if CompareText(sName, U_ARMRINGRNAME) = 0 then
              begin
                Result := 6;
              end
              else
                if CompareText(sName, U_RINGLNAME) = 0 then
                begin
                  Result := 7;
                end
                else
                  if CompareText(sName, U_RINGRNAME) = 0 then
                  begin
                    Result := 8;
                  end
                  else
                    if CompareText(sName, U_BUJUKNAME) = 0 then
                    begin
                      Result := 12;
                    end
                    else
                      if CompareText(sName, U_BELTNAME) = 0 then
                      begin
                        Result := 10;
                      end
                      else
                        if CompareText(sName, U_BOOTSNAME) = 0 then
                        begin
                          Result := 9;
                        end
                        else
                          if CompareText(sName, U_CHARMNAME) = 0 then
                          begin
                            Result := 11;
                          end;

end;

function GetUseItemName(nIndex: Integer): string;

begin
  case nIndex of //
    0: Result := U_DRESSNAME;
    1: Result := U_WEAPONNAME;
    2: Result := U_RIGHTHANDNAME;
    3: Result := U_NECKLACENAME;
    4: Result := U_HELMETNAME;
    5: Result := U_ARMRINGLNAME;
    6: Result := U_ARMRINGRNAME;
    7: Result := U_RINGLNAME;
    8: Result := U_RINGRNAME;
    9: Result := U_BOOTSNAME;
    10: Result := U_BELTNAME;
    11: Result := U_CHARMNAME;
    12: Result := U_BUJUKNAME;
  end;
end;


function LoadDisableSendMsgList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_DisableSendMsgList.Clear;
    LoadList.LoadFromFile(sFileName);
    for I := 0 to LoadList.Count - 1 do
    begin
      g_DisableSendMsgList.Add(Trim(LoadList.Strings[I]));
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function LoadMonDropLimitList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sLineText: string;
  sFileName: string;
  sItemName, sItemCount: string;
  nItemCount: Integer;
  MonDrop: pTMonDrop;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_MonDropLimitLIst.Clear;
    LoadList.LoadFromFile(sFileName);
    for I := 0 to LoadList.Count - 1 do
    begin
      sLineText := Trim(LoadList.Strings[I]);
      if (sLineText = '') or (sLineText[1] = ';') then
        Continue;
      sLineText := GetValidStr3(sLineText, sItemName, [' ', '/', ',', #9]);
      sLineText := GetValidStr3(sLineText, sItemCount, [' ', '/', ',', #9]);
      nItemCount := Str_ToInt(sItemCount, -1);
      if (sItemName <> '') and (nItemCount >= 0) then
      begin
        New(MonDrop);
        MonDrop.sItemName := sItemName;
        MonDrop.nDropCount := 0;
        MonDrop.nNoDropCount := 0;
        MonDrop.nCountLimit := nItemCount;
        g_MonDropLimitList.AddObject(sItemName, TObject(MonDrop));
      end;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function SaveMonDropLimitList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
  sLineText: string;
  MonDrop: pTMonDrop;
begin
  sFileName := g_Config.sEnvirDir + 'MonDropLimitList.txt';
  LoadList := TStringList.Create;
  for I := 0 to g_MonDropLimitList.Count - 1 do
  begin
    MonDrop := pTMonDrop(g_MonDropLimitList.Objects[I]);
    sLineText := MonDrop.sItemName + #9 + IntToStr(MonDrop.nCountLimit);
    LoadList.Add(sLineText);
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;
              //    g_DisableDropList



function tobesamelength(str: string): string;
begin
  result := str;
  if length(str) < 5 then
  begin
    result := '0' + str;
  end;
  if length(str) < 4 then
  begin
    result := '00' + str;
  end;


end;

     //  g_TopPlayList

function SaveToPlayList(Player: TplayObject): Boolean;
var
  I, j: integer;

  Names, sCharName, addstring: string;
  SavePaiHang, tempSavePaiHang: pSavePaiHang;
  hasdel: boolean;
begin
  nUpdateNum := 100 + random(100);
  g_TopPlayListchecktick := gettickcount;
  result := false;
  g_TopPlayList.Lock;
  try
    j := 0;
    hasdel := false;
    for I := g_TopPlayList.Count - 1 downto 0 do
    begin
      Names := g_TopPlayList.Strings[i];
      Names := GetValidStr3(Names, sCharName, [' ', '\']); //YsJob
      sCharName := Names;
      if sCharName = Player.m_sCharName then
      begin
       {   SavePaiHang:=  pSavePaiHang(g_TopPlayList.Objects[i]);
          SavePaiHang.Level:= Player.m_Abil.Level;
          SavePaiHang.GuildName:='';
          if Player.m_MyGuild <>nil then
              strpcopy(SavePaiHang.GuildName, TGuild(Player.m_MyGuild).sGuildName) ;
          SavePaiHang.PreSent:=round(Player.m_Abil.Exp / Player.m_Abil.MaxExp * 100 ) ;

          result:=true;    }
        g_TopPlayLisT.Delete(i);
        hasdel := true;
        break;
      end;
      inc(j);
    end;
    //  tempSavePaiHang:= pSavePaiHang(g_TopPlayList.Objects[0]);   hasdel or ((j>= g_TopPlayList.Count) and
    if (g_TopPlayList.Count < 1000) then
    begin //没有找到   加入一个新的 BUG。只能加入升级前500名。那500名后再升级的。那就没办法加入排名了。
      new(SavePaiHang);
      fillchar(SavePaiHang^, sizeof(tSavePaiHang), #0);

      strpcopy(SavePaiHang.CharName, Player.m_sCharName);
      SavePaiHang.Level := player.m_Abil.Level;
      SavePaiHang.Job := player.m_btJob;
      SavePaiHang.Sex := player.m_btGender;
      SavePaiHang.GuildName := '无';
      if Player.m_MyGuild <> nil then
        strpcopy(SavePaiHang.GuildName, TGuild(Player.m_MyGuild).sGuildName);
      SavePaiHang.PreSent := round(Player.m_Abil.Exp / Player.m_Abil.MaxExp * 100);

      SavePaiHang.YsJob := player.nysjob;
      if player.sYsname = '' then
        SavePaiHang.YsJob := 99;
      SavePaiHang.YsLevel := player.wyslevel;
      addstring := inttostr(SavePaiHang.level * 100 + SavePaiHang.PreSent);
      addstring := tobesamelength(addstring);
          //  g_TopPlayList.Add(inttostr(SavePaiHang.level*100+SavePaiHang.PreSent));
      g_TopPlayList.AddObject(addstring + '\' + SavePaiHang.CharName, TObject(SavePaiHang));
    end;

  finally
    g_TopPlayList.UnLock;
  end;

end;

function SavePlayListToFile(): boolean;
var
  SaveList: TStringList;
  I, J: Integer;
  SavePaiHang: pSavePaiHang;
  sFileName, LineString: string;
begin

  sFileName := g_Config.sEnvirDir + 'RankList\HeroLevelRankList.txt';
  if not DirectoryExists(g_Config.sEnvirDir + 'RankList') then
     CreateDir(g_Config.sEnvirDir + 'RankList');
  SaveList := TStringList.Create;
  g_TopPlayList.Lock;
  try
    j := 0;
    for I := 0 to g_TopPlayList.Count - 1 do
    begin
      SavePaiHang := pSavePaiHang(g_TopPlayList.Objects[i]);
      if SavePaiHang = nil then
        continue;
      LineString := '';
      LineString := SavePaiHang.CharName;
      LineString := LineString + '  ' + Inttostr(SavePaiHang.Level);
      LineString := LineString + '  ' + Inttostr(SavePaiHang.Job);
      LineString := LineString + '  ' + Inttostr(SavePaiHang.Sex);
      LineString := LineString + '  ' + SavePaiHang.GuildName;
      LineString := LineString + '  ' + Inttostr(SavePaiHang.PreSent);
      LineString := LineString + '  ' + Inttostr(SavePaiHang.YsJob);
      LineString := LineString + '  ' + Inttostr(SavePaiHang.YsLevel);
      SaveList.Add(LineString);
      if i > 1000 then
        break;
    end; //for
    SaveList.SaveToFile(sFileName);

  finally
    g_TopPlayList.UnLock;
  end;
  SaveList.Free;




end;

function LoadTopPlayList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sLineText: string;
  sFileName: string;
  sItemName, sItemIdx: string;
  nItemIdx: Integer;
  SavePaiHang: pSavePaiHang;
  TempString, addstring: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'RankList\HeroLevelRankList.txt';
  if not DirectoryExists(g_Config.sEnvirDir + 'RankList') then
     CreateDir(g_Config.sEnvirDir + 'RankList');
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    LoadList.LoadFromFile(sFileName);
    g_TopPlayList.Lock;
    try
      g_TopPlayList.Clear;
      g_TopPlayList.Sorted := true;
      for I := 0 to LoadList.Count - 1 do
      begin
        sLineText := Trim(LoadList.Strings[I]);
        if (sLineText = '') or (sLineText[1] = ';') then
          Continue;
        new(SavePaiHang);
        fillchar(SavePaiHang^, sizeof(tSavePaiHang), #0);
        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //名字
        strpcopy(SavePaiHang.CharName, TempString);
        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //level
        SavePaiHang.Level := str_toInt(TempString, 0);
        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //job
        SavePaiHang.Job := str_toInt(TempString, 0);

        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //sex
        SavePaiHang.Sex := str_toInt(TempString, 0);

        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //GuildName
        strpcopy(SavePaiHang.GuildName, TempString);
        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //PreSent
        SavePaiHang.PreSent := str_toInt(TempString, 0);

        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //YsJob
        SavePaiHang.YsJob := str_toInt(TempString, 0);

        sLineText := GetValidStr3(sLineText, TempString, [' ', #9]); //YsLevel
        SavePaiHang.YsLevel := str_toInt(TempString, 0);
        addstring := inttostr(SavePaiHang.level * 100 + SavePaiHang.PreSent);
        addstring := tobesamelength(addstring);
          //  g_TopPlayList.Add(inttostr(SavePaiHang.level*100+SavePaiHang.PreSent));
        g_TopPlayList.AddObject(addstring + '\' + SavePaiHang.CharName, TObject(SavePaiHang));

      end;
    finally
      g_TopPlayList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.Add(';保存TopPlaylist ');
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function getPlayListcout(nType: Integer): integer;
var
  i, j: Integer;
  SavePaiHang: pSavePaiHang;
begin
{                             256  全部        $100
                              257  战士
                              258  魔法
                              259  道士
                              260   按等级 =35 级别
                              261          =36 级别
}
  if ntype = 256 then
  begin
    result := g_TopPlayList.Count;
    exit;
  end;
  result := 0;
  g_TopPlayList.Lock;
  try
    j := 0;
    for I := 0 to g_TopPlayList.Count - 1 do
    begin
      SavePaiHang := pSavePaiHang(g_TopPlayList.Objects[i]);
      if SavePaiHang = nil then
        continue;
      if (ntype >= 257) and (ntype <= 259) and (SavePaiHang.Job = (ntype - 257)) then
      begin
        inc(j)
      end;
      if (ntype >= 260) and (SavePaiHang.Level = (ntype - 260 + 35)) then
      begin
        inc(j);
      end;

    end;
    result := j;
  finally
    g_TopPlayList.UnLock;
  end;

end;

function TopPlayList(pos: Integer; nType: Integer): pSavePaiHang;
var
  I, j: integer;
  SavePaiHang: pSavePaiHang;
begin
  result := nil;
  g_TopPlayList.Lock;
  try
    if pos <= g_TopPlayList.Count then
    begin
      if ntype = 256 then
      begin
        result := pSavePaiHang(g_TopPlayList.Objects[g_TopPlayList.Count - pos]);
        exit;
      end;
      j := 0;
      for I := g_TopPlayList.Count - 1 downto 0 do
      begin
        SavePaiHang := pSavePaiHang(g_TopPlayList.Objects[i]);
        if SavePaiHang = nil then
          continue;
        if (ntype >= 257) and (ntype <= 259) and (SavePaiHang.Job = (ntype - 257)) then
        begin
          inc(j)
        end;
        if (ntype >= 260) and (SavePaiHang.Level = (ntype - 260 + 35)) then
        begin
          inc(j);
        end;
        if pos = j then
        begin
          result := SavePaiHang;
          break;
        end;
      end; //for
    end;
  finally
    g_TopPlayList.UnLock;
  end;

end;

function INPlayList(charName: string; nType: Integer): Integer;
var
  I, j: integer;
  SavePaiHang: pSavePaiHang;
  Names, sCharName: string;
begin
  result := 0;
  g_TopPlayList.Lock;
  try
    j := 0;
    for I := g_TopPlayList.Count - 1 downto 0 do
    begin
      Names := g_TopPlayList.Strings[i];
      SavePaiHang := pSavePaiHang(g_TopPlayList.Objects[i]);
      Names := GetValidStr3(Names, sCharName, [' ', '\']); //YsJob
      sCharName := Names;

      if (nType = 256) then
      begin
        inc(j);
        if (sCharName = charName) then
        begin
          result := j;
          break;
        end;

      end;
      if (ntype >= 257) and (ntype <= 259) and (SavePaiHang.Job = (ntype - 257)) then
      begin
        inc(j);
        if (sCharName = charName) then
        begin
          result := j;
          break;
        end;
      end;

      if (ntype >= 260) and (SavePaiHang.Level = (ntype - 260 + 35)) then
      begin
        inc(j);
        if (sCharName = charName) then
        begin
          result := j;
          break;
        end;
      end;


    end;

  finally
    g_TopPlayList.UnLock;
  end;

end;





function GetBoValue(useritem:PTUserItem;idx:Integer;nIndex:Integer): Boolean;
var
  I: Integer;
  ItemName: string ;
  pItemRule : pTItemRule;
begin
  Result := False;
  if nIndex in[0,2,5,13..17,20] then
  begin
    if useritem.DarkProp.btid>0 then //物品绑定
      Result:=True;
  end;
  ItemName:=IntToStr(idx-1);

  g_ItemRuleList.Lock;
  try
    i:=g_ItemRuleList.IndexOf(ItemName);
    if i>=0 then
    begin
       pItemRule := pTItemRule(g_ItemRuleList.Objects[i]);
       Result := pItemRule.bospcode[nIndex];
    end;

  finally
    g_ItemRuleList.UnLock;
  end;
end;

function SaveDisableSendMsgList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'DisableSendMsgList.txt';
  LoadList := TStringList.Create;
  for I := 0 to g_DisableSendMsgList.Count - 1 do
  begin
    LoadList.Add(g_DisableSendMsgList.Strings[I]);
  end;
  LoadList.SaveToFile(sFileName);
  LoadList.Free;
  Result := True;
end;

function GetDisableSendMsgList(sHumanName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  for I := 0 to g_DisableSendMsgList.Count - 1 do
  begin
    if CompareText(sHumanName, g_DisableSendMsgList.Strings[I]) = 0 then
    begin
      Result := True;
      break;
    end;
  end;
end;

function LoadGameLogItemNameList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'GameLogItemNameList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_GameLogItemNameList.Lock;
    try
      g_GameLogItemNameList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_GameLogItemNameList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_GameLogItemNameList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetGameLogItemNameList(sItemName: string): Byte;
var
  I: Integer;
begin
  Result := 0;
  g_GameLogItemNameList.Lock;
  try
    for I := 0 to g_GameLogItemNameList.Count - 1 do
    begin
      if CompareText(sItemName, g_GameLogItemNameList.Strings[I]) = 0 then
      begin
        Result := 1;
        break;
      end;
    end;
  finally
    g_GameLogItemNameList.UnLock;
  end;
end;

function SaveGameLogItemNameList(): Boolean;
var
  sFileName: string;
begin
  sFileName := g_Config.sEnvirDir + 'GameLogItemNameList.txt';
  g_GameLogItemNameList.Lock;
  try
    g_GameLogItemNameList.SaveToFile(sFileName);
  finally
    g_GameLogItemNameList.UnLock;
  end;
  Result := True;
end;

function LoadDenyIPAddrList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyIPAddrList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_DenyIPAddrList.Lock;
    try
      g_DenyIPAddrList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_DenyIPAddrList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_DenyIPAddrList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyIPAddrList(sIPaddr: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyIPAddrList.Lock;
  try
    for I := 0 to g_DenyIPAddrList.Count - 1 do
    begin
      if CompareText(sIPaddr, g_DenyIPAddrList.Strings[I]) = 0 then
      begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyIPAddrList.UnLock;
  end;
end;

function SaveDenyIPAddrList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyIPAddrList.txt';
  SaveList := TStringList.Create;
  g_DenyIPAddrList.Lock;
  try
    for I := 0 to g_DenyIPAddrList.Count - 1 do
    begin
      if Integer(g_DenyIPAddrList.Objects[I]) <> 0 then
      begin
        SaveList.Add(g_DenyIPAddrList.Strings[I]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyIPAddrList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadDenyChrNameList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyChrNameList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_DenyChrNameList.Lock;
    try
      g_DenyChrNameList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_DenyChrNameList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_DenyChrNameList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyChrNameList(sChrName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyChrNameList.Lock;
  try
    for I := 0 to g_DenyChrNameList.Count - 1 do
    begin
      if CompareText(sChrName, g_DenyChrNameList.Strings[I]) = 0 then
      begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyChrNameList.UnLock;
  end;
end;

function SaveDenyChrNameList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyChrNameList.txt';
  SaveList := TStringList.Create;
  g_DenyChrNameList.Lock;
  try
    for I := 0 to g_DenyChrNameList.Count - 1 do
    begin
      if Integer(g_DenyChrNameList.Objects[I]) <> 0 then
      begin
        SaveList.Add(g_DenyChrNameList.Strings[I]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyChrNameList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadDenyAccountList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'DenyAccountList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_DenyAccountList.Lock;
    try
      g_DenyAccountList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_DenyAccountList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_DenyAccountList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetDenyAccountList(sAccount: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_DenyAccountList.Lock;
  try
    for I := 0 to g_DenyAccountList.Count - 1 do
    begin
      if CompareText(sAccount, g_DenyAccountList.Strings[I]) = 0 then
      begin
        Result := True;
        break;
      end;
    end;
  finally
    g_DenyAccountList.UnLock;
  end;
end;

function SaveDenyAccountList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'DenyAccountList.txt';
  SaveList := TStringList.Create;
  g_DenyAccountList.Lock;
  try
    for I := 0 to g_DenyAccountList.Count - 1 do
    begin
      if Integer(g_DenyAccountList.Objects[I]) <> 0 then
      begin
        SaveList.Add(g_DenyAccountList.Strings[I]);
      end;
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_DenyAccountList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadNoClearMonList(): Boolean;
var
  I: integer;
  LoadList: TStringList;
  sFileName: string;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'NoClearMonList.txt';
  LoadList := TStringList.Create;
  if FileExists(sFileName) then
  begin
    g_NoClearMonList.Lock;
    try
      g_NoClearMonList.Clear;
      LoadList.LoadFromFile(sFileName);
      for I := 0 to LoadList.Count - 1 do
      begin
        g_NoClearMonList.Add(Trim(LoadList.Strings[I]));
      end;
    finally
      g_NoClearMonList.UnLock;
    end;
    Result := True;
  end
  else
  begin
    LoadList.SaveToFile(sFileName);
  end;
  LoadList.Free;
end;

function GetNoClearMonList(sMonName: string): Boolean;
var
  I: Integer;
begin
  Result := False;
  g_NoClearMonList.Lock;
  try
    for I := 0 to g_NoClearMonList.Count - 1 do
    begin
      if CompareText(sMonName, g_NoClearMonList.Strings[I]) = 0 then
      begin
        Result := True;
        break;
      end;
    end;
  finally
    g_NoClearMonList.UnLock;
  end;
end;

function SaveNoClearMonList(): Boolean;
var
  I: Integer;
  sFileName: string;
  SaveList: TStringList;
begin
  sFileName := g_Config.sEnvirDir + 'NoClearMonList.txt';
  SaveList := TStringList.Create;
  g_NoClearMonList.Lock;
  try
    for I := 0 to g_NoClearMonList.Count - 1 do
    begin
      SaveList.Add(g_NoClearMonList.Strings[I]);
    end;
    SaveList.SaveToFile(sFileName);
  finally
    g_NoClearMonList.UnLock;
  end;
  SaveList.Free;
  Result := True;
end;

function LoadMonSayMsg(): Boolean;
var
  I, II: integer;
  sStatus, sRate, sColor, sMonName, sSayMsg: string;
  nStatus, nRate, nColor: Integer;
  LoadList: TStringList;
  sLineText: string;
  MonSayMsg: pTMonSayMsg;
  sFileName: string;
  MonSayList: TList;
  boSearch: Boolean;
begin
  Result := False;
  sFileName := g_Config.sEnvirDir + 'MonSayMsg.txt';
  if FileExists(sFileName) then
  begin
    g_MonSayMsgList.Clear;
    LoadList := TStringList.Create;
    LoadList.LoadFromFile(sFileName);
    for I := 0 to LoadList.Count - 1 do
    begin
      sLineText := Trim(LoadList.Strings[I]);
      if (sLineText <> '') and (sLineText[1] < ';') then
      begin
        sLineText := GetValidStr3(sLineText, sStatus, [' ', '/', ',', #9]);
        sLineText := GetValidStr3(sLineText, sRate, [' ', '/', ',', #9]);
        sLineText := GetValidStr3(sLineText, sColor, [' ', '/', ',', #9]);
        sLineText := GetValidStr3(sLineText, sMonName, [' ', '/', ',', #9]);
        sLineText := GetValidStr3(sLineText, sSayMsg, [' ', '/', ',', #9]);
        if (sStatus <> '') and (sRate <> '') and (sColor <> '') and (sMonName <> '') and (sSayMsg <> '') then
        begin
          nStatus := Str_ToInt(sStatus, -1);
          nRate := Str_ToInt(sRate, -1);
          nColor := Str_ToInt(sColor, -1);
          if (nStatus >= 0) and (nRate >= 0) and (nColor >= 0) then
          begin
            New(MonSayMsg);
            case nStatus of
              0: MonSayMsg.State := s_KillHuman;
              1: MonSayMsg.State := s_UnderFire;
              2: MonSayMsg.State := s_Die;
              3: MonSayMsg.State := s_MonGen;
            else
              MonSayMsg.State := s_UnderFire;
            end;
            case nColor of
              0: MonSayMsg.Color := c_Red;
              1: MonSayMsg.Color := c_Green;
              2: MonSayMsg.Color := c_Blue;
              3: MonSayMsg.Color := c_White;
            else
              MonSayMsg.Color := c_White;
            end;
            MonSayMsg.nRate := nRate;
            MonSayMsg.sSayMsg := sSayMsg;
            boSearch := False;
            for II := 0 to g_MonSayMsgList.Count - 1 do
            begin
              if CompareText(g_MonSayMsgList.Strings[II], sMonName) = 0 then
              begin
                TList(g_MonSayMsgList.Objects[II]).Add(MonSayMsg);
                boSearch := True;
                break;
              end;
            end;
            if not boSearch then
            begin
              MonSayList := TList.Create;
              MonSayList.Add(MonSayMsg);
              g_MonSayMsgList.AddObject(sMonName, TObject(MonSayList));
            end;
          end;
        end;
      end;
    end;
    LoadList.Free;
    Result := True;
  end;
end;

procedure LoadExp();
var
  I: Integer;
  LoadInteger: Longint;
  LoadWord:LongWord ;
  LoadString: string;
  ExpConfig:TIniFile;
begin
  ExpConfig:=TIniFile.Create('.\Exps.ini');
  LoadInteger := ExpConfig.ReadInteger('Exp', 'KillMonExpMultiple', -1);
  if LoadInteger < 0 then
  begin
    ExpConfig.WriteInteger('Exp', 'KillMonExpMultiple', g_Config.dwKillMonExpMultiple);
  end
  else
  begin
    g_Config.dwKillMonExpMultiple := ExpConfig.ReadInteger('Exp', 'KillMonExpMultiple', g_Config.dwKillMonExpMultiple);
  end;

  LoadInteger := ExpConfig.ReadInteger('Exp', 'HighLevelKillMonFixExp', -1);
  if LoadInteger < 0 then
  begin
    ExpConfig.WriteBool('Exp', 'HighLevelKillMonFixExp', g_Config.boHighLevelKillMonFixExp);
  end
  else
  begin
    g_Config.boHighLevelKillMonFixExp := ExpConfig.ReadBool('Exp', 'HighLevelKillMonFixExp', g_Config.boHighLevelKillMonFixExp);
  end;

  for I := 1 to high(g_Config.dwNeedExps) do
  begin
    LoadString := ExpConfig.ReadString('Exp', 'Level' + IntToStr(I), '');
    LoadWord := Str_ToWord(LoadString, 0);
    if LoadWord = 0 then
    begin
      ExpConfig.WriteString('Exp', 'Level' + IntToStr(I), IntToStr(g_dwOldNeedExps[I]));
      g_Config.dwNeedExps[I] := g_dwOldNeedExps[I];
    end
    else
    begin
      g_Config.dwNeedExps[I] := LoadWord;
    end;
  end;
  ExpConfig.Free;
end;

procedure LoadGameCommand();
var
  LoadString: string;
  nLoadInteger: Integer;
begin
  LoadString := CommandConf.ReadString('Command', 'Date', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Date', g_GameCommand.DATA.sCmd)
  else
    g_GameCommand.DATA.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Date', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Date', g_GameCommand.DATA.nPermissionMin)
  else
    g_GameCommand.DATA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PrvMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PrvMsg', g_GameCommand.PRVMSG.sCmd)
  else
    g_GameCommand.PRVMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'PrvMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PrvMsg', g_GameCommand.PRVMSG.nPermissionMin)
  else
    g_GameCommand.PRVMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AllowMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowMsg', g_GameCommand.ALLOWMSG.sCmd)
  else
    g_GameCommand.ALLOWMSG.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'AllowMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AllowMsg', g_GameCommand.ALLOWMSG.nPermissionMin)
  else
    g_GameCommand.ALLOWMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LetShout', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetShout', g_GameCommand.LETSHOUT.sCmd)
  else
    g_GameCommand.LETSHOUT.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'LetTrade', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetTrade', g_GameCommand.LETTRADE.sCmd)
  else
    g_GameCommand.LETTRADE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'LetGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LetGuild', g_GameCommand.LETGUILD.sCmd)
  else
    g_GameCommand.LETGUILD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'EndGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EndGuild', g_GameCommand.ENDGUILD.sCmd)
  else
    g_GameCommand.ENDGUILD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'BanGuildChat', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BanGuildChat', g_GameCommand.BANGUILDCHAT.sCmd)
  else
    g_GameCommand.BANGUILDCHAT.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AuthAlly', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AuthAlly', g_GameCommand.AUTHALLY.sCmd)
  else
    g_GameCommand.AUTHALLY.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Auth', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Auth', g_GameCommand.AUTH.sCmd)
  else
    g_GameCommand.AUTH.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AuthCancel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AuthCancel', g_GameCommand.AUTHCANCEL.sCmd)
  else
    g_GameCommand.AUTHCANCEL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'ViewDiary', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ViewDiary', g_GameCommand.DIARY.sCmd)
  else
    g_GameCommand.DIARY.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'UserMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'UserMove', g_GameCommand.USERMOVE.sCmd)
  else
    g_GameCommand.USERMOVE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Searching', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Searching', g_GameCommand.SEARCHING.sCmd)
  else
    g_GameCommand.SEARCHING.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowGroupCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowGroupCall', g_GameCommand.ALLOWGROUPCALL.sCmd)
  else
    g_GameCommand.ALLOWGROUPCALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'GroupCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GroupCall', g_GameCommand.GROUPRECALLL.sCmd)
  else
    g_GameCommand.GROUPRECALLL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowGuildReCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowGuildReCall', g_GameCommand.ALLOWGUILDRECALL.sCmd)
  else
    g_GameCommand.ALLOWGUILDRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'GuildReCall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GuildReCall', g_GameCommand.GUILDRECALLL.sCmd)
  else
    g_GameCommand.GUILDRECALLL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageUnLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageUnLock', g_GameCommand.UNLOCKSTORAGE.sCmd)
  else
    g_GameCommand.UNLOCKSTORAGE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'PasswordUnLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PasswordUnLock', g_GameCommand.UNLOCK.sCmd)
  else
    g_GameCommand.UNLOCK.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageLock', g_GameCommand.LOCK.sCmd)
  else
    g_GameCommand.LOCK.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageSetPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageSetPassword', g_GameCommand.SETPASSWORD.sCmd)
  else
    g_GameCommand.SETPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'PasswordLock', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PasswordLock', g_GameCommand.PASSWORDLOCK.sCmd)
  else
    g_GameCommand.PASSWORDLOCK.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageChgPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageChgPassword', g_GameCommand.CHGPASSWORD.sCmd)
  else
    g_GameCommand.CHGPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'StorageClearPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageClearPassword', g_GameCommand.CLRPASSWORD.sCmd)
  else
    g_GameCommand.CLRPASSWORD.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'StorageClearPassword', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StorageClearPassword', g_GameCommand.CLRPASSWORD.nPermissionMin)
  else
    g_GameCommand.CLRPASSWORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StorageUserClearPassword', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StorageUserClearPassword', g_GameCommand.UNPASSWORD.sCmd)
  else
    g_GameCommand.UNPASSWORD.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MemberFunc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MemberFunc', g_GameCommand.MEMBERFUNCTION.sCmd)
  else
    g_GameCommand.MEMBERFUNCTION.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MemberFuncEx', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MemberFuncEx', g_GameCommand.MEMBERFUNCTIONEX.sCmd)
  else
    g_GameCommand.MEMBERFUNCTIONEX.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MemberFuncEx1', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MemberFuncEx1', g_GameCommand.MEMBERFUNCTIONEX1.sCmd)
  else
    g_GameCommand.MEMBERFUNCTIONEX1.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Dear', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Dear', g_GameCommand.DEAR.sCmd)
  else
    g_GameCommand.DEAR.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Master', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Master', g_GameCommand.MASTER.sCmd)
  else
    g_GameCommand.MASTER.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'DearRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DearRecall', g_GameCommand.DEARRECALL.sCmd)
  else
    g_GameCommand.DEARRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'MasterRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MasterRecall', g_GameCommand.MASTERECALL.sCmd)
  else
    g_GameCommand.MASTERECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowDearRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowDearRecall', g_GameCommand.ALLOWDEARRCALL.sCmd)
  else
    g_GameCommand.ALLOWDEARRCALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AllowMasterRecall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AllowMasterRecall', g_GameCommand.ALLOWMASTERRECALL.sCmd)
  else
    g_GameCommand.ALLOWMASTERRECALL.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'AttackMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AttackMode', g_GameCommand.ATTACKMODE.sCmd)
  else
    g_GameCommand.ATTACKMODE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'Rest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Rest', g_GameCommand.REST.sCmd)
  else
    g_GameCommand.REST.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'TakeOnHorse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TakeOnHorse', g_GameCommand.TAKEONHORSE.sCmd)
  else
    g_GameCommand.TAKEONHORSE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'TakeOffHorse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TakeOffHorse', g_GameCommand.TAKEOFHORSE.sCmd)
  else
    g_GameCommand.TAKEOFHORSE.sCmd := LoadString;

  LoadString := CommandConf.ReadString('Command', 'HumanLocal', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HumanLocal', g_GameCommand.HUMANLOCAL.sCmd)
  else
    g_GameCommand.HUMANLOCAL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HumanLocal', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HumanLocal', g_GameCommand.HUMANLOCAL.nPermissionMin)
  else
    g_GameCommand.HUMANLOCAL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Move', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Move', g_GameCommand.MOVE.sCmd)
  else
    g_GameCommand.MOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MoveMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MoveMin', g_GameCommand.MOVE.nPermissionMin)
  else
    g_GameCommand.MOVE.nPermissionMin := nLoadInteger;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MoveMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MoveMax', g_GameCommand.MOVE.nPermissionMax)
  else
    g_GameCommand.MOVE.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PositionMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PositionMove', g_GameCommand.POSITIONMOVE.sCmd)
  else
    g_GameCommand.POSITIONMOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PositionMoveMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PositionMoveMin', g_GameCommand.POSITIONMOVE.nPermissionMin)
  else
    g_GameCommand.POSITIONMOVE.nPermissionMin := nLoadInteger;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PositionMoveMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PositionMoveMax', g_GameCommand.POSITIONMOVE.nPermissionMax)
  else
    g_GameCommand.POSITIONMOVE.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Info', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Info', g_GameCommand.INFO.sCmd)
  else
    g_GameCommand.INFO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Info', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Info', g_GameCommand.INFO.nPermissionMin)
  else
    g_GameCommand.INFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobLevel', g_GameCommand.MOBLEVEL.sCmd)
  else
    g_GameCommand.MOBLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobLevel', g_GameCommand.MOBLEVEL.nPermissionMin)
  else
    g_GameCommand.MOBLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobCount', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobCount', g_GameCommand.MOBCOUNT.sCmd)
  else
    g_GameCommand.MOBCOUNT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobCount', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobCount', g_GameCommand.MOBCOUNT.nPermissionMin)
  else
    g_GameCommand.MOBCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'HumanCount', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'HumanCount', g_GameCommand.HUMANCOUNT.sCmd)
  else
    g_GameCommand.HUMANCOUNT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'HumanCount', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'HumanCount', g_GameCommand.HUMANCOUNT.nPermissionMin)
  else
    g_GameCommand.HUMANCOUNT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Map', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Map', g_GameCommand.MAP.sCmd)
  else
    g_GameCommand.MAP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Map', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Map', g_GameCommand.MAP.nPermissionMin)
  else
    g_GameCommand.MAP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Kick', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Kick', g_GameCommand.KICK.sCmd)
  else
    g_GameCommand.KICK.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Kick', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Kick', g_GameCommand.KICK.nPermissionMin)
  else
    g_GameCommand.KICK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Ting', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Ting', g_GameCommand.TING.sCmd)
  else
    g_GameCommand.TING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Ting', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Ting', g_GameCommand.TING.nPermissionMin)
  else
    g_GameCommand.TING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperTing', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperTing', g_GameCommand.SUPERTING.sCmd)
  else
    g_GameCommand.SUPERTING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperTing', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperTing', g_GameCommand.SUPERTING.nPermissionMin)
  else
    g_GameCommand.SUPERTING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MapMove', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MapMove', g_GameCommand.MAPMOVE.sCmd)
  else
    g_GameCommand.MAPMOVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MapMove', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MapMove', g_GameCommand.MAPMOVE.nPermissionMin)
  else
    g_GameCommand.MAPMOVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Shutup', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Shutup', g_GameCommand.SHUTUP.sCmd)
  else
    g_GameCommand.SHUTUP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Shutup', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Shutup', g_GameCommand.SHUTUP.nPermissionMin)
  else
    g_GameCommand.SHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReleaseShutup', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReleaseShutup', g_GameCommand.RELEASESHUTUP.sCmd)
  else
    g_GameCommand.RELEASESHUTUP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReleaseShutup', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReleaseShutup', g_GameCommand.RELEASESHUTUP.nPermissionMin)
  else
    g_GameCommand.RELEASESHUTUP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShutupList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShutupList', g_GameCommand.SHUTUPLIST.sCmd)
  else
    g_GameCommand.SHUTUPLIST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShutupList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShutupList', g_GameCommand.SHUTUPLIST.nPermissionMin)
  else
    g_GameCommand.SHUTUPLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GameMaster', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GameMaster', g_GameCommand.GAMEMASTER.sCmd)
  else
    g_GameCommand.GAMEMASTER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GameMaster', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GameMaster', g_GameCommand.GAMEMASTER.nPermissionMin)
  else
    g_GameCommand.GAMEMASTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ObServer', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ObServer', g_GameCommand.OBSERVER.sCmd)
  else
    g_GameCommand.OBSERVER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ObServer', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ObServer', g_GameCommand.OBSERVER.nPermissionMin)
  else
    g_GameCommand.OBSERVER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperMan', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperMan', g_GameCommand.SUEPRMAN.sCmd)
  else
    g_GameCommand.SUEPRMAN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperMan', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperMan', g_GameCommand.SUEPRMAN.nPermissionMin)
  else
    g_GameCommand.SUEPRMAN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Level', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Level', g_GameCommand.LEVEL.sCmd)
  else
    g_GameCommand.LEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Level', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Level', g_GameCommand.LEVEL.nPermissionMin)
  else
    g_GameCommand.LEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SabukWallGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SabukWallGold', g_GameCommand.SABUKWALLGOLD.sCmd)
  else
    g_GameCommand.SABUKWALLGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SabukWallGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SabukWallGold', g_GameCommand.SABUKWALLGOLD.nPermissionMin)
  else
    g_GameCommand.SABUKWALLGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Recall', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Recall', g_GameCommand.RECALL.sCmd)
  else
    g_GameCommand.RECALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Recall', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Recall', g_GameCommand.RECALL.nPermissionMin)
  else
    g_GameCommand.RECALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReGoto', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReGoto', g_GameCommand.REGOTO.sCmd)
  else
    g_GameCommand.REGOTO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReGoto', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReGoto', g_GameCommand.REGOTO.nPermissionMin)
  else
    g_GameCommand.REGOTO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Flag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Flag', g_GameCommand.SHOWFLAG.sCmd)
  else
    g_GameCommand.SHOWFLAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Flag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Flag', g_GameCommand.SHOWFLAG.nPermissionMin)
  else
    g_GameCommand.SHOWFLAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowOpen', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowOpen', g_GameCommand.SHOWOPEN.sCmd)
  else
    g_GameCommand.SHOWOPEN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowOpen', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowOpen', g_GameCommand.SHOWOPEN.nPermissionMin)
  else
    g_GameCommand.SHOWOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowUnit', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowUnit', g_GameCommand.SHOWUNIT.sCmd)
  else
    g_GameCommand.SHOWUNIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowUnit', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowUnit', g_GameCommand.SHOWUNIT.nPermissionMin)
  else
    g_GameCommand.SHOWUNIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Attack', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Attack', g_GameCommand.ATTACK.sCmd)
  else
    g_GameCommand.ATTACK.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Attack', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Attack', g_GameCommand.ATTACK.nPermissionMin)
  else
    g_GameCommand.ATTACK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Mob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Mob', g_GameCommand.MOB.sCmd)
  else
    g_GameCommand.MOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Mob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Mob', g_GameCommand.MOB.nPermissionMin)
  else
    g_GameCommand.MOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobNpc', g_GameCommand.MOBNPC.sCmd)
  else
    g_GameCommand.MOBNPC.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobNpc', g_GameCommand.MOBNPC.nPermissionMin)
  else
    g_GameCommand.MOBNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelNpc', g_GameCommand.DELNPC.sCmd)
  else
    g_GameCommand.DELNPC.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelNpc', g_GameCommand.DELNPC.nPermissionMin)
  else
    g_GameCommand.DELNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'NpcScript', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NpcScript', g_GameCommand.NPCSCRIPT.sCmd)
  else
    g_GameCommand.NPCSCRIPT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'NpcScript', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NpcScript', g_GameCommand.NPCSCRIPT.nPermissionMin)
  else
    g_GameCommand.NPCSCRIPT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RecallMob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RecallMob', g_GameCommand.RECALLMOB.sCmd)
  else
    g_GameCommand.RECALLMOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RecallMob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RecallMob', g_GameCommand.RECALLMOB.nPermissionMin)
  else
    g_GameCommand.RECALLMOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LuckPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LuckPoint', g_GameCommand.LUCKYPOINT.sCmd)
  else
    g_GameCommand.LUCKYPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LuckPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LuckPoint', g_GameCommand.LUCKYPOINT.nPermissionMin)
  else
    g_GameCommand.LUCKYPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LotteryTicket', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LotteryTicket', g_GameCommand.LOTTERYTICKET.sCmd)
  else
    g_GameCommand.LOTTERYTICKET.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LotteryTicket', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LotteryTicket', g_GameCommand.LOTTERYTICKET.nPermissionMin)
  else
    g_GameCommand.LOTTERYTICKET.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadGuild', g_GameCommand.RELOADGUILD.sCmd)
  else
    g_GameCommand.RELOADGUILD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadGuild', g_GameCommand.RELOADGUILD.nPermissionMin)
  else
    g_GameCommand.RELOADGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadLineNotice', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadLineNotice', g_GameCommand.RELOADLINENOTICE.sCmd)
  else
    g_GameCommand.RELOADLINENOTICE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadLineNotice', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadLineNotice', g_GameCommand.RELOADLINENOTICE.nPermissionMin)
  else
    g_GameCommand.RELOADLINENOTICE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadAbuse', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadAbuse', g_GameCommand.RELOADABUSE.sCmd)
  else
    g_GameCommand.RELOADABUSE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadAbuse', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadAbuse', g_GameCommand.RELOADABUSE.nPermissionMin)
  else
    g_GameCommand.RELOADABUSE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BackStep', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BackStep', g_GameCommand.BACKSTEP.sCmd)
  else
    g_GameCommand.BACKSTEP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'BackStep', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BackStep', g_GameCommand.BACKSTEP.nPermissionMin)
  else
    g_GameCommand.BACKSTEP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Ball', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Ball', g_GameCommand.BALL.sCmd)
  else
    g_GameCommand.BALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Ball', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Ball', g_GameCommand.BALL.nPermissionMin)
  else
    g_GameCommand.BALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FreePenalty', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FreePenalty', g_GameCommand.FREEPENALTY.sCmd)
  else
    g_GameCommand.FREEPENALTY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'FreePenalty', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FreePenalty', g_GameCommand.FREEPENALTY.nPermissionMin)
  else
    g_GameCommand.FREEPENALTY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'PkPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'PkPoint', g_GameCommand.PKPOINT.sCmd)
  else
    g_GameCommand.PKPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'PkPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'PkPoint', g_GameCommand.PKPOINT.nPermissionMin)
  else
    g_GameCommand.PKPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'IncPkPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'IncPkPoint', g_GameCommand.INCPKPOINT.sCmd)
  else
    g_GameCommand.INCPKPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'IncPkPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'IncPkPoint', g_GameCommand.INCPKPOINT.nPermissionMin)
  else
    g_GameCommand.INCPKPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeLuck', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeLuck', g_GameCommand.CHANGELUCK.sCmd)
  else
    g_GameCommand.CHANGELUCK.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeLuck', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeLuck', g_GameCommand.CHANGELUCK.nPermissionMin)
  else
    g_GameCommand.CHANGELUCK.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Hunger', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Hunger', g_GameCommand.HUNGER.sCmd)
  else
    g_GameCommand.HUNGER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Hunger', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Hunger', g_GameCommand.HUNGER.nPermissionMin)
  else
    g_GameCommand.HUNGER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Hair', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Hair', g_GameCommand.HAIR.sCmd)
  else
    g_GameCommand.HAIR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Hair', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Hair', g_GameCommand.HAIR.nPermissionMin)
  else
    g_GameCommand.HAIR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Training', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Training', g_GameCommand.TRAINING.sCmd)
  else
    g_GameCommand.TRAINING.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Training', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Training', g_GameCommand.TRAINING.nPermissionMin)
  else
    g_GameCommand.TRAINING.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DeleteSkill', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteSkill', g_GameCommand.DELETESKILL.sCmd)
  else
    g_GameCommand.DELETESKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteSkill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteSkill', g_GameCommand.DELETESKILL.nPermissionMin)
  else
    g_GameCommand.DELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeJob', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeJob', g_GameCommand.CHANGEJOB.sCmd)
  else
    g_GameCommand.CHANGEJOB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeJob', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeJob', g_GameCommand.CHANGEJOB.nPermissionMin)
  else
    g_GameCommand.CHANGEJOB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeGender', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeGender', g_GameCommand.CHANGEGENDER.sCmd)
  else
    g_GameCommand.CHANGEGENDER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeGender', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeGender', g_GameCommand.CHANGEGENDER.nPermissionMin)
  else
    g_GameCommand.CHANGEGENDER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'NameColor', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'NameColor', g_GameCommand.NAMECOLOR.sCmd)
  else
    g_GameCommand.NAMECOLOR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'NameColor', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'NameColor', g_GameCommand.NAMECOLOR.nPermissionMin)
  else
    g_GameCommand.NAMECOLOR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Mission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Mission', g_GameCommand.MISSION.sCmd)
  else
    g_GameCommand.MISSION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Mission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Mission', g_GameCommand.MISSION.nPermissionMin)
  else
    g_GameCommand.MISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MobPlace', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MobPlace', g_GameCommand.MOBPLACE.sCmd)
  else
    g_GameCommand.MOBPLACE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MobPlace', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MobPlace', g_GameCommand.MOBPLACE.nPermissionMin)
  else
    g_GameCommand.MOBPLACE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Transparecy', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Transparecy', g_GameCommand.TRANSPARECY.sCmd)
  else
    g_GameCommand.TRANSPARECY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Transparecy', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Transparecy', g_GameCommand.TRANSPARECY.nPermissionMin)
  else
    g_GameCommand.TRANSPARECY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DeleteItem', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteItem', g_GameCommand.DELETEITEM.sCmd)
  else
    g_GameCommand.DELETEITEM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteItem', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteItem', g_GameCommand.DELETEITEM.nPermissionMin)
  else
    g_GameCommand.DELETEITEM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Level0', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Level0', g_GameCommand.LEVEL0.sCmd)
  else
    g_GameCommand.LEVEL0.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Level0', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Level0', g_GameCommand.LEVEL0.nPermissionMin)
  else
    g_GameCommand.LEVEL0.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ClearMission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearMission', g_GameCommand.CLEARMISSION.sCmd)
  else
    g_GameCommand.CLEARMISSION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearMission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearMission', g_GameCommand.CLEARMISSION.nPermissionMin)
  else
    g_GameCommand.CLEARMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetFlag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetFlag', g_GameCommand.SETFLAG.sCmd)
  else
    g_GameCommand.SETFLAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetFlag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetFlag', g_GameCommand.SETFLAG.nPermissionMin)
  else
    g_GameCommand.SETFLAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetOpen', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetOpen', g_GameCommand.SETOPEN.sCmd)
  else
    g_GameCommand.SETOPEN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetOpen', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetOpen', g_GameCommand.SETOPEN.nPermissionMin)
  else
    g_GameCommand.SETOPEN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetUnit', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetUnit', g_GameCommand.SETUNIT.sCmd)
  else
    g_GameCommand.SETUNIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetUnit', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetUnit', g_GameCommand.SETUNIT.nPermissionMin)
  else
    g_GameCommand.SETUNIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReConnection', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReConnection', g_GameCommand.RECONNECTION.sCmd)
  else
    g_GameCommand.RECONNECTION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReConnection', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReConnection', g_GameCommand.RECONNECTION.nPermissionMin)
  else
    g_GameCommand.RECONNECTION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableFilter', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableFilter', g_GameCommand.DISABLEFILTER.sCmd)
  else
    g_GameCommand.DISABLEFILTER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableFilter', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableFilter', g_GameCommand.DISABLEFILTER.nPermissionMin)
  else
    g_GameCommand.DISABLEFILTER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeUserFull', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeUserFull', g_GameCommand.CHGUSERFULL.sCmd)
  else
    g_GameCommand.CHGUSERFULL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeUserFull', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeUserFull', g_GameCommand.CHGUSERFULL.nPermissionMin)
  else
    g_GameCommand.CHGUSERFULL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeZenFastStep', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeZenFastStep', g_GameCommand.CHGZENFASTSTEP.sCmd)
  else
    g_GameCommand.CHGZENFASTSTEP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeZenFastStep', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeZenFastStep', g_GameCommand.CHGZENFASTSTEP.nPermissionMin)
  else
    g_GameCommand.CHGZENFASTSTEP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ContestPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ContestPoint', g_GameCommand.CONTESTPOINT.sCmd)
  else
    g_GameCommand.CONTESTPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ContestPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ContestPoint', g_GameCommand.CONTESTPOINT.nPermissionMin)
  else
    g_GameCommand.CONTESTPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartContest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartContest', g_GameCommand.STARTCONTEST.sCmd)
  else
    g_GameCommand.STARTCONTEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartContest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartContest', g_GameCommand.STARTCONTEST.nPermissionMin)
  else
    g_GameCommand.STARTCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'EndContest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EndContest', g_GameCommand.ENDCONTEST.sCmd)
  else
    g_GameCommand.ENDCONTEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'EndContest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'EndContest', g_GameCommand.ENDCONTEST.nPermissionMin)
  else
    g_GameCommand.ENDCONTEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Announcement', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Announcement', g_GameCommand.ANNOUNCEMENT.sCmd)
  else
    g_GameCommand.ANNOUNCEMENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Announcement', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Announcement', g_GameCommand.ANNOUNCEMENT.nPermissionMin)
  else
    g_GameCommand.ANNOUNCEMENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OXQuizRoom', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OXQuizRoom', g_GameCommand.OXQUIZROOM.sCmd)
  else
    g_GameCommand.OXQUIZROOM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OXQuizRoom', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OXQuizRoom', g_GameCommand.OXQUIZROOM.nPermissionMin)
  else
    g_GameCommand.OXQUIZROOM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Gsa', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Gsa', g_GameCommand.GSA.sCmd)
  else
    g_GameCommand.GSA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Gsa', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Gsa', g_GameCommand.GSA.nPermissionMin)
  else
    g_GameCommand.GSA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeItemName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeItemName', g_GameCommand.CHANGEITEMNAME.sCmd)
  else
    g_GameCommand.CHANGEITEMNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeItemName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeItemName', g_GameCommand.CHANGEITEMNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEITEMNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableSendMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableSendMsg', g_GameCommand.DISABLESENDMSG.sCmd)
  else
    g_GameCommand.DISABLESENDMSG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableSendMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableSendMsg', g_GameCommand.DISABLESENDMSG.nPermissionMin)
  else
    g_GameCommand.DISABLESENDMSG.nPermissionMin := nLoadInteger;


  LoadString := CommandConf.ReadString('Command', 'EnableSendMsg', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'EnableSendMsg', g_GameCommand.ENABLESENDMSG.sCmd)
  else
    g_GameCommand.ENABLESENDMSG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'EnableSendMsg', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'EnableSendMsg', g_GameCommand.ENABLESENDMSG.nPermissionMin)
  else
    g_GameCommand.ENABLESENDMSG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DisableSendMsgList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DisableSendMsgList', g_GameCommand.DISABLESENDMSGLIST.sCmd)
  else
    g_GameCommand.DISABLESENDMSGLIST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DisableSendMsgList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DisableSendMsgList', g_GameCommand.DISABLESENDMSGLIST.nPermissionMin)
  else
    g_GameCommand.DISABLESENDMSGLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Kill', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Kill', g_GameCommand.KILL.sCmd)
  else
    g_GameCommand.KILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Kill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Kill', g_GameCommand.KILL.nPermissionMin)
  else
    g_GameCommand.KILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Make', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Make', g_GameCommand.MAKE.sCmd)
  else
    g_GameCommand.MAKE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MakeMin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MakeMin', g_GameCommand.MAKE.nPermissionMin)
  else
    g_GameCommand.MAKE.nPermissionMin := nLoadInteger;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MakeMax', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MakeMax', g_GameCommand.MAKE.nPermissionMax)
  else
    g_GameCommand.MAKE.nPermissionMax := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SuperMake', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SuperMake', g_GameCommand.SMAKE.sCmd)
  else
    g_GameCommand.SMAKE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SuperMake', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SuperMake', g_GameCommand.SMAKE.nPermissionMin)
  else
    g_GameCommand.SMAKE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'BonusPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'BonusPoint', g_GameCommand.BONUSPOINT.sCmd)
  else
    g_GameCommand.BONUSPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'BonusPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'BonusPoint', g_GameCommand.BONUSPOINT.nPermissionMin)
  else
    g_GameCommand.BONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelBonuPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelBonuPoint', g_GameCommand.DELBONUSPOINT.sCmd)
  else
    g_GameCommand.DELBONUSPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelBonuPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelBonuPoint', g_GameCommand.DELBONUSPOINT.nPermissionMin)
  else
    g_GameCommand.DELBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RestBonuPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RestBonuPoint', g_GameCommand.RESTBONUSPOINT.sCmd)
  else
    g_GameCommand.RESTBONUSPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RestBonuPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RestBonuPoint', g_GameCommand.RESTBONUSPOINT.nPermissionMin)
  else
    g_GameCommand.RESTBONUSPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'FireBurn', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'FireBurn', g_GameCommand.FIREBURN.sCmd)
  else
    g_GameCommand.FIREBURN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'FireBurn', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'FireBurn', g_GameCommand.FIREBURN.nPermissionMin)
  else
    g_GameCommand.FIREBURN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TestStatus', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestStatus', g_GameCommand.TESTSTATUS.sCmd)
  else
    g_GameCommand.TESTSTATUS.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestStatus', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestStatus', g_GameCommand.TESTSTATUS.nPermissionMin)
  else
    g_GameCommand.TESTSTATUS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGold', g_GameCommand.DELGOLD.sCmd)
  else
    g_GameCommand.DELGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGold', g_GameCommand.DELGOLD.nPermissionMin)
  else
    g_GameCommand.DELGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGold', g_GameCommand.ADDGOLD.sCmd)
  else
    g_GameCommand.ADDGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGold', g_GameCommand.ADDGOLD.nPermissionMin)
  else
    g_GameCommand.ADDGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGameGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGameGold', g_GameCommand.DELGAMEGOLD.sCmd)
  else
    g_GameCommand.DELGAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGameGold', g_GameCommand.DELGAMEGOLD.nPermissionMin)
  else
    g_GameCommand.DELGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGamePoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGamePoint', g_GameCommand.ADDGAMEGOLD.sCmd)
  else
    g_GameCommand.ADDGAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGameGold', g_GameCommand.ADDGAMEGOLD.nPermissionMin)
  else
    g_GameCommand.ADDGAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GameGold', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GameGold', g_GameCommand.GAMEGOLD.sCmd)
  else
    g_GameCommand.GAMEGOLD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GameGold', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GameGold', g_GameCommand.GAMEGOLD.nPermissionMin)
  else
    g_GameCommand.GAMEGOLD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'GamePoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GamePoint', g_GameCommand.GAMEPOINT.sCmd)
  else
    g_GameCommand.GAMEPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GamePoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GamePoint', g_GameCommand.GAMEPOINT.nPermissionMin)
  else
    g_GameCommand.GAMEPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'CreditPoint', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'CreditPoint', g_GameCommand.CREDITPOINT.sCmd)
  else
    g_GameCommand.CREDITPOINT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'CreditPoint', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'CreditPoint', g_GameCommand.CREDITPOINT.nPermissionMin)
  else
    g_GameCommand.CREDITPOINT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TestGoldChange', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestGoldChange', g_GameCommand.TESTGOLDCHANGE.sCmd)
  else
    g_GameCommand.TESTGOLDCHANGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestGoldChange', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestGoldChange', g_GameCommand.TESTGOLDCHANGE.nPermissionMin)
  else
    g_GameCommand.TESTGOLDCHANGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'RefineWeapon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'RefineWeapon', g_GameCommand.REFINEWEAPON.sCmd)
  else
    g_GameCommand.REFINEWEAPON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'RefineWeapon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'RefineWeapon', g_GameCommand.REFINEWEAPON.nPermissionMin)
  else
    g_GameCommand.REFINEWEAPON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadAdmin', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadAdmin', g_GameCommand.RELOADADMIN.sCmd)
  else
    g_GameCommand.RELOADADMIN.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadAdmin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadAdmin', g_GameCommand.RELOADADMIN.nPermissionMin)
  else
    g_GameCommand.RELOADADMIN.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadNpc', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadNpc', g_GameCommand.RELOADNPC.sCmd)
  else
    g_GameCommand.RELOADNPC.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadNpc', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadNpc', g_GameCommand.RELOADNPC.nPermissionMin)
  else
    g_GameCommand.RELOADNPC.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadManage', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadManage', g_GameCommand.RELOADMANAGE.sCmd)
  else
    g_GameCommand.RELOADMANAGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadManage', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadManage', g_GameCommand.RELOADMANAGE.nPermissionMin)
  else
    g_GameCommand.RELOADMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadRobotManage', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadRobotManage', g_GameCommand.RELOADROBOTMANAGE.sCmd)
  else
    g_GameCommand.RELOADROBOTMANAGE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadRobotManage', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadRobotManage', g_GameCommand.RELOADROBOTMANAGE.nPermissionMin)
  else
    g_GameCommand.RELOADROBOTMANAGE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadRobot', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadRobot', g_GameCommand.RELOADROBOT.sCmd)
  else
    g_GameCommand.RELOADROBOT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadRobot', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadRobot', g_GameCommand.RELOADROBOT.nPermissionMin)
  else
    g_GameCommand.RELOADROBOT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadMonitems', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMonitems', g_GameCommand.RELOADMONITEMS.sCmd)
  else
    g_GameCommand.RELOADMONITEMS.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMonitems', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMonitems', g_GameCommand.RELOADMONITEMS.nPermissionMin)
  else
    g_GameCommand.RELOADMONITEMS.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadDiary', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadDiary', g_GameCommand.RELOADDIARY.sCmd)
  else
    g_GameCommand.RELOADDIARY.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadDiary', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadDiary', g_GameCommand.RELOADDIARY.nPermissionMin)
  else
    g_GameCommand.RELOADDIARY.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadItemDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadItemDB', g_GameCommand.RELOADITEMDB.sCmd)
  else
    g_GameCommand.RELOADITEMDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadItemDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadItemDB', g_GameCommand.RELOADITEMDB.nPermissionMin)
  else
    g_GameCommand.RELOADITEMDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadMagicDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMagicDB', g_GameCommand.RELOADMAGICDB.sCmd)
  else
    g_GameCommand.RELOADMAGICDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMagicDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMagicDB', g_GameCommand.RELOADMAGICDB.nPermissionMin)
  else
    g_GameCommand.RELOADMAGICDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadMonsterDB', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadMonsterDB', g_GameCommand.RELOADMONSTERDB.sCmd)
  else
    g_GameCommand.RELOADMONSTERDB.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadMonsterDB', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadMonsterDB', g_GameCommand.RELOADMONSTERDB.nPermissionMin)
  else
    g_GameCommand.RELOADMONSTERDB.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReAlive', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReAlive', g_GameCommand.REALIVE.sCmd)
  else
    g_GameCommand.REALIVE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReAlive', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReAlive', g_GameCommand.REALIVE.nPermissionMin)
  else
    g_GameCommand.REALIVE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AdjuestTLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestTLevel', g_GameCommand.ADJUESTLEVEL.sCmd)
  else
    g_GameCommand.ADJUESTLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestTLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestTLevel', g_GameCommand.ADJUESTLEVEL.nPermissionMin)
  else
    g_GameCommand.ADJUESTLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AdjuestExp', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestExp', g_GameCommand.ADJUESTEXP.sCmd)
  else
    g_GameCommand.ADJUESTEXP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestExp', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestExp', g_GameCommand.ADJUESTEXP.nPermissionMin)
  else
    g_GameCommand.ADJUESTEXP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddGuild', g_GameCommand.ADDGUILD.sCmd)
  else
    g_GameCommand.ADDGUILD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddGuild', g_GameCommand.ADDGUILD.nPermissionMin)
  else
    g_GameCommand.ADDGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelGuild', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelGuild', g_GameCommand.DELGUILD.sCmd)
  else
    g_GameCommand.DELGUILD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelGuild', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelGuild', g_GameCommand.DELGUILD.nPermissionMin)
  else
    g_GameCommand.DELGUILD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeSabukLord', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeSabukLord', g_GameCommand.CHANGESABUKLORD.sCmd)
  else
    g_GameCommand.CHANGESABUKLORD.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeSabukLord', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeSabukLord', g_GameCommand.CHANGESABUKLORD.nPermissionMin)
  else
    g_GameCommand.CHANGESABUKLORD.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ForcedWallConQuestWar', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ForcedWallConQuestWar', g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd)
  else
    g_GameCommand.FORCEDWALLCONQUESTWAR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ForcedWallConQuestWar', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ForcedWallConQuestWar', g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin)
  else
    g_GameCommand.FORCEDWALLCONQUESTWAR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddToItemEvent', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddToItemEvent', g_GameCommand.ADDTOITEMEVENT.sCmd)
  else
    g_GameCommand.ADDTOITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddToItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddToItemEvent', g_GameCommand.ADDTOITEMEVENT.nPermissionMin)
  else
    g_GameCommand.ADDTOITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AddToItemEventAspieces', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AddToItemEventAspieces', g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd)
  else
    g_GameCommand.ADDTOITEMEVENTASPIECES.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AddToItemEventAspieces', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AddToItemEventAspieces', g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin)
  else
    g_GameCommand.ADDTOITEMEVENTASPIECES.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ItemEventList', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ItemEventList', g_GameCommand.ITEMEVENTLIST.sCmd)
  else
    g_GameCommand.ITEMEVENTLIST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ItemEventList', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ItemEventList', g_GameCommand.ITEMEVENTLIST.nPermissionMin)
  else
    g_GameCommand.ITEMEVENTLIST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartIngGiftNO', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartIngGiftNO', g_GameCommand.STARTINGGIFTNO.sCmd)
  else
    g_GameCommand.STARTINGGIFTNO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartIngGiftNO', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartIngGiftNO', g_GameCommand.STARTINGGIFTNO.nPermissionMin)
  else
    g_GameCommand.STARTINGGIFTNO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DeleteAllItemEvent', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DeleteAllItemEvent', g_GameCommand.DELETEALLITEMEVENT.sCmd)
  else
    g_GameCommand.DELETEALLITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DeleteAllItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DeleteAllItemEvent', g_GameCommand.DELETEALLITEMEVENT.nPermissionMin)
  else
    g_GameCommand.DELETEALLITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartItemEvent', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartItemEvent', g_GameCommand.STARTITEMEVENT.sCmd)
  else
    g_GameCommand.STARTITEMEVENT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartItemEvent', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartItemEvent', g_GameCommand.STARTITEMEVENT.nPermissionMin)
  else
    g_GameCommand.STARTITEMEVENT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ItemEventTerm', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ItemEventTerm', g_GameCommand.ITEMEVENTTERM.sCmd)
  else
    g_GameCommand.ITEMEVENTTERM.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ItemEventTerm', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ItemEventTerm', g_GameCommand.ITEMEVENTTERM.nPermissionMin)
  else
    g_GameCommand.ITEMEVENTTERM.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'AdjuestTestLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'AdjuestTestLevel', g_GameCommand.ADJUESTTESTLEVEL.sCmd)
  else
    g_GameCommand.ADJUESTTESTLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'AdjuestTestLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'AdjuestTestLevel', g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin)
  else
    g_GameCommand.ADJUESTTESTLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OpTraining', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OpTraining', g_GameCommand.TRAININGSKILL.sCmd)
  else
    g_GameCommand.TRAININGSKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OpTraining', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OpTraining', g_GameCommand.TRAININGSKILL.nPermissionMin)
  else
    g_GameCommand.TRAININGSKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'OpDeleteSkill', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'OpDeleteSkill', g_GameCommand.OPDELETESKILL.sCmd)
  else
    g_GameCommand.OPDELETESKILL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'OpDeleteSkill', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'OpDeleteSkill', g_GameCommand.OPDELETESKILL.nPermissionMin)
  else
    g_GameCommand.OPDELETESKILL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeWeaponDura', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeWeaponDura', g_GameCommand.CHANGEWEAPONDURA.sCmd)
  else
    g_GameCommand.CHANGEWEAPONDURA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeWeaponDura', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeWeaponDura', g_GameCommand.CHANGEWEAPONDURA.nPermissionMin)
  else
    g_GameCommand.CHANGEWEAPONDURA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReloadGuildAll', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReloadGuildAll', g_GameCommand.RELOADGUILDALL.sCmd)
  else
    g_GameCommand.RELOADGUILDALL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReloadGuildAll', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReloadGuildAll', g_GameCommand.RELOADGUILDALL.nPermissionMin)
  else
    g_GameCommand.RELOADGUILDALL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Who', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Who', g_GameCommand.WHO.sCmd)
  else
    g_GameCommand.WHO.sCmd := LoadString;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'Who', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Who', g_GameCommand.WHO.nPermissionMin)
  else
    g_GameCommand.WHO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'Total', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'Total', g_GameCommand.TOTAL.sCmd)
  else
    g_GameCommand.TOTAL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'Total', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'Total', g_GameCommand.TOTAL.nPermissionMin)
  else
    g_GameCommand.TOTAL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'TestGa', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'TestGa', g_GameCommand.TESTGA.sCmd)
  else
    g_GameCommand.TESTGA.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'TestGa', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'TestGa', g_GameCommand.TESTGA.nPermissionMin)
  else
    g_GameCommand.TESTGA.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'MapInfo', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MapInfo', g_GameCommand.MAPINFO.sCmd)
  else
    g_GameCommand.MAPINFO.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'MapInfo', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MapInfo', g_GameCommand.MAPINFO.nPermissionMin)
  else
    g_GameCommand.MAPINFO.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SbkDoor', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SbkDoor', g_GameCommand.SBKDOOR.sCmd)
  else
    g_GameCommand.SBKDOOR.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SbkDoor', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SbkDoor', g_GameCommand.SBKDOOR.nPermissionMin)
  else
    g_GameCommand.SBKDOOR.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeDearName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeDearName', g_GameCommand.CHANGEDEARNAME.sCmd)
  else
    g_GameCommand.CHANGEDEARNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeDearName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeDearName', g_GameCommand.CHANGEDEARNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEDEARNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ChangeMasterName', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ChangeMasterrName', g_GameCommand.CHANGEMASTERNAME.sCmd)
  else
    g_GameCommand.CHANGEMASTERNAME.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ChangeMasterName', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ChangeMasterName', g_GameCommand.CHANGEMASTERNAME.nPermissionMin)
  else
    g_GameCommand.CHANGEMASTERNAME.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'StartQuest', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'StartQuest', g_GameCommand.STARTQUEST.sCmd)
  else
    g_GameCommand.STARTQUEST.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'StartQuest', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'StartQuest', g_GameCommand.STARTQUEST.nPermissionMin)
  else
    g_GameCommand.STARTQUEST.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetPermission', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetPermission', g_GameCommand.SETPERMISSION.sCmd)
  else
    g_GameCommand.SETPERMISSION.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetPermission', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetPermission', g_GameCommand.SETPERMISSION.nPermissionMin)
  else
    g_GameCommand.SETPERMISSION.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ClearMon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearMon', g_GameCommand.CLEARMON.sCmd)
  else
    g_GameCommand.CLEARMON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearMon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearMon', g_GameCommand.CLEARMON.nPermissionMin)
  else
    g_GameCommand.CLEARMON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ReNewLevel', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ReNewLevel', g_GameCommand.RENEWLEVEL.sCmd)
  else
    g_GameCommand.RENEWLEVEL.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ReNewLevel', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ReNewLevel', g_GameCommand.RENEWLEVEL.nPermissionMin)
  else
    g_GameCommand.RENEWLEVEL.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyIPaddrLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyIPaddrLogon', g_GameCommand.DENYIPLOGON.sCmd)
  else
    g_GameCommand.DENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyIPaddrLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyIPaddrLogon', g_GameCommand.DENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.DENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyAccountLogon', g_GameCommand.DENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.DENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyAccountLogon', g_GameCommand.DENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.DENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DenyCharNameLogon', g_GameCommand.DENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.DENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DenyCharNameLogon', g_GameCommand.DENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.DENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyIPLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyIPLogon', g_GameCommand.DELDENYIPLOGON.sCmd)
  else
    g_GameCommand.DELDENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyIPLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyIPLogon', g_GameCommand.DELDENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyAccountLogon', g_GameCommand.DELDENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.DELDENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyAccountLogon', g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'DelDenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'DelDenyCharNameLogon', g_GameCommand.DELDENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.DELDENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'DelDenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'DelDenyCharNameLogon', g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.DELDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyIPLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyIPLogon', g_GameCommand.SHOWDENYIPLOGON.sCmd)
  else
    g_GameCommand.SHOWDENYIPLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyIPLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyIPLogon', g_GameCommand.SHOWDENYIPLOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYIPLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyAccountLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyAccountLogon', g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd)
  else
    g_GameCommand.SHOWDENYACCOUNTLOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyAccountLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyAccountLogon', g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYACCOUNTLOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShowDenyCharNameLogon', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShowDenyCharNameLogon', g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd)
  else
    g_GameCommand.SHOWDENYCHARNAMELOGON.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShowDenyCharNameLogon', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShowDenyCharNameLogon', g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin)
  else
    g_GameCommand.SHOWDENYCHARNAMELOGON.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ViewWhisper', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ViewWhisper', g_GameCommand.VIEWWHISPER.sCmd)
  else
    g_GameCommand.VIEWWHISPER.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ViewWhisper', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ViewWhisper', g_GameCommand.VIEWWHISPER.nPermissionMin)
  else
    g_GameCommand.VIEWWHISPER.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SpiritStart', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SpiritStart', g_GameCommand.SPIRIT.sCmd)
  else
    g_GameCommand.SPIRIT.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SpiritStart', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SpiritStart', g_GameCommand.SPIRIT.nPermissionMin)
  else
    g_GameCommand.SPIRIT.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SpiritStop', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SpiritStop', g_GameCommand.SPIRITSTOP.sCmd)
  else
    g_GameCommand.SPIRITSTOP.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SpiritStop', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SpiritStop', g_GameCommand.SPIRITSTOP.nPermissionMin)
  else
    g_GameCommand.SPIRITSTOP.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'SetMapMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'SetMapMode', g_GameCommand.SETMAPMODE.sCmd)
  else
    g_GameCommand.SETMAPMODE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'SetMapMode', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'SetMapMode', g_GameCommand.SETMAPMODE.nPermissionMin)
  else
    g_GameCommand.SETMAPMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ShoweMapMode', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ShoweMapMode', g_GameCommand.SHOWMAPMODE.sCmd)
  else
    g_GameCommand.SHOWMAPMODE.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ShoweMapMode', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ShoweMapMode', g_GameCommand.SHOWMAPMODE.nPermissionMin)
  else
    g_GameCommand.SHOWMAPMODE.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'ClearBag', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'ClearBag', g_GameCommand.CLEARBAG.sCmd)
  else
    g_GameCommand.CLEARBAG.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'ClearBag', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'ClearBag', g_GameCommand.CLEARBAG.nPermissionMin)
  else
    g_GameCommand.CLEARBAG.nPermissionMin := nLoadInteger;

  LoadString := CommandConf.ReadString('Command', 'LockLogin', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'LockLogin', g_GameCommand.LOCKLOGON.sCmd)
  else
    g_GameCommand.LOCKLOGON.sCmd := LoadString;
  LoadString := CommandConf.ReadString('Command', 'MakeItemDrop', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'MakeItemDrop', g_GameCommand.MakeItemDrop.sCmd)
  else
    g_GameCommand.MakeItemDrop.sCmd := LoadString;
  nLoadInteger := CommandConf.ReadInteger('Permission', 'LockLogin', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'LockLogin', g_GameCommand.LOCKLOGON.nPermissionMin)
  else
    g_GameCommand.LOCKLOGON.nPermissionMin := nLoadInteger;

  nLoadInteger := CommandConf.ReadInteger('Permission', 'MakeItemDrop', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'MakeItemDrop', g_GameCommand.MakeItemDrop.nPermissionMin)
  else
    g_GameCommand.MakeItemDrop.nPermissionMin := nLoadInteger;
  LoadString := CommandConf.ReadString('Command', 'GMRedMsgCmd', '');
  if LoadString = '' then
    CommandConf.WriteString('Command', 'GMRedMsgCmd', g_GMRedMsgCmd)
  else
    g_GMRedMsgCmd := LoadString[1];
  nLoadInteger := CommandConf.ReadInteger('Permission', 'GMRedMsgCmd', -1);
  if nLoadInteger < 0 then
    CommandConf.WriteInteger('Permission', 'GMRedMsgCmd', g_nGMREDMSGCMD)
  else
    g_nGMREDMSGCMD := nLoadInteger;
end;

procedure LoadString();
  function LoadConfigString(sSection, sIdent, sDefault: string): string;
  var
    sString: string;
  begin
    sString := StringConf.ReadString(sSection, sIdent, '');
    if sString = '' then
    begin
      StringConf.WriteString(sSection, sIdent, sDefault);
      Result := sDefault;
    end
    else
    begin
      Result := sString;
    end;
  end;
var
  LoadString: string;
begin
  LoadString := StringConf.ReadString('String', 'ClientSoftVersionError', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientSoftVersionError', sClientSoftVersionError)
  else
    sClientSoftVersionError := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadNewClientSoft', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DownLoadNewClientSoft', sDownLoadNewClientSoft)
  else
    sDownLoadNewClientSoft := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceDisConnect', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceDisConnect', sForceDisConnect)
  else
    sForceDisConnect := LoadString;

  LoadString := StringConf.ReadString('String', 'ClientSoftVersionTooOld', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientSoftVersionTooOld', sClientSoftVersionTooOld)
  else
    sClientSoftVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'DownLoadAndUseNewClient', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DownLoadAndUseNewClient', sDownLoadAndUseNewClient)
  else
    sDownLoadAndUseNewClient := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineUserFull', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OnlineUserFull', sOnlineUserFull)
  else
    sOnlineUserFull := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNowIsTryPlayMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouNowIsTryPlayMode', sYouNowIsTryPlayMode)
  else
    sYouNowIsTryPlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'NowIsFreePlayMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NowIsFreePlayMode', g_sNowIsFreePlayMode)
  else
    g_sNowIsFreePlayMode := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfAll', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfAll', sAttackModeOfAll)
  else
    sAttackModeOfAll := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfPeaceful', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfPeaceful', sAttackModeOfPeaceful)
  else
    sAttackModeOfPeaceful := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGroup', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGroup', sAttackModeOfGroup)
  else
    sAttackModeOfGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfGuild', sAttackModeOfGuild)
  else
    sAttackModeOfGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'AttackModeOfRedWhite', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AttackModeOfRedWhite', sAttackModeOfRedWhite)
  else
    sAttackModeOfRedWhite := LoadString;

  LoadString := StringConf.ReadString('String', 'StartChangeAttackModeHelp', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartChangeAttackModeHelp', sStartChangeAttackModeHelp)
  else
    sStartChangeAttackModeHelp := LoadString;

  LoadString := StringConf.ReadString('String', 'StartNoticeMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartNoticeMsg', sStartNoticeMsg)
  else
    sStartNoticeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOn', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThrustingOn', sThrustingOn)
  else
    sThrustingOn := LoadString;

  LoadString := StringConf.ReadString('String', 'ThrustingOff', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThrustingOff', sThrustingOff)
  else
    sThrustingOff := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOn', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HalfMoonOn', sHalfMoonOn)
  else
    sHalfMoonOn := LoadString;

  LoadString := StringConf.ReadString('String', 'HalfMoonOff', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HalfMoonOff', sHalfMoonOff)
  else
    sHalfMoonOff := LoadString;

  sCrsHitOn := LoadConfigString('String', 'CrsHitOn', sCrsHitOn);
  sCrsHitOff := LoadConfigString('String', 'CrsHitOff', sCrsHitOff);

  LoadString := StringConf.ReadString('String', 'FireSpiritsSummoned', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FireSpiritsSummoned', sFireSpiritsSummoned)
  else
    sFireSpiritsSummoned := LoadString;

  LoadString := StringConf.ReadString('String', 'FireSpiritsFail', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FireSpiritsFail', sFireSpiritsFail)
  else
    sFireSpiritsFail := LoadString;

  LoadString := StringConf.ReadString('String', 'SpiritsGone', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SpiritsGone', sSpiritsGone)
  else
    sSpiritsGone := LoadString;

  LoadString := StringConf.ReadString('String', 'MateDoTooweak', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MateDoTooweak', sMateDoTooweak)
  else
    sMateDoTooweak := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponBroke', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponBroke', g_sTheWeaponBroke)
  else
    g_sTheWeaponBroke := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponRefineSuccessfull', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponRefineSuccessfull', sTheWeaponRefineSuccessfull)
  else
    sTheWeaponRefineSuccessfull := LoadString;

  LoadString := StringConf.ReadString('String', 'YouPoisoned', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouPoisoned', sYouPoisoned)
  else
    sYouPoisoned := LoadString;

  LoadString := StringConf.ReadString('String', 'PetRest', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PetRest', sPetRest)
  else
    sPetRest := LoadString;

  LoadString := StringConf.ReadString('String', 'PetAttack', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PetAttack', sPetAttack)
  else
    sPetAttack := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfWoMan', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearNotOfWoMan', sWearNotOfWoMan)
  else
    sWearNotOfWoMan := LoadString;

  LoadString := StringConf.ReadString('String', 'WearNotOfMan', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearNotOfMan', sWearNotOfMan)
  else
    sWearNotOfMan := LoadString;

  LoadString := StringConf.ReadString('String', 'HandWeightNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HandWeightNot', sHandWeightNot)
  else
    sHandWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'WearWeightNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WearWeightNot', sWearWeightNot)
  else
    sWearWeightNot := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisAccount', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ItemIsNotThisAccount', g_sItemIsNotThisAccount)
  else
    g_sItemIsNotThisAccount := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisIPaddr', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ItemIsNotThisIPaddr', g_sItemIsNotThisIPaddr)
  else
    g_sItemIsNotThisIPaddr := LoadString;

  LoadString := StringConf.ReadString('String', 'ItemIsNotThisCharName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ItemIsNotThisCharName', g_sItemIsNotThisCharName)
  else
    g_sItemIsNotThisCharName := LoadString;

  LoadString := StringConf.ReadString('String', 'LevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LevelNot', g_sLevelNot)
  else
    g_sLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrLevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JobOrLevelNot', g_sJobOrLevelNot)
  else
    g_sJobOrLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrDCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JobOrDCNot', g_sJobOrDCNot)
  else
    g_sJobOrDCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrMCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JobOrMCNot', g_sJobOrMCNot)
  else
    g_sJobOrMCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'JobOrSCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JobOrSCNot', g_sJobOrSCNot)
  else
    g_sJobOrSCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'DCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DCNot', g_sDCNot)
  else
    g_sDCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MCNot', g_sMCNot)
  else
    g_sMCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SCNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SCNot', g_sSCNot)
  else
    g_sSCNot := LoadString;

  LoadString := StringConf.ReadString('String', 'CreditPointNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CreditPointNot', g_sCreditPointNot)
  else
    g_sCreditPointNot := LoadString;

  LoadString := StringConf.ReadString('String', 'ReNewLevelNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReNewLevelNot', g_sReNewLevelNot)
  else
    g_sReNewLevelNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildNot', g_sGuildNot)
  else
    g_sGuildNot := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMasterNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildMasterNot', g_sGuildMasterNot)
  else
    g_sGuildMasterNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukHumanNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SabukHumanNot', g_sSabukHumanNot)
  else
    g_sSabukHumanNot := LoadString;

  LoadString := StringConf.ReadString('String', 'SabukMasterManNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SabukMasterManNot', g_sSabukMasterManNot)
  else
    g_sSabukMasterManNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MemberNot', g_sMemberNot)
  else
    g_sMemberNot := LoadString;

  LoadString := StringConf.ReadString('String', 'MemberTypeNot', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MemberTypeNot', g_sMemberTypeNot)
  else
    g_sMemberTypeNot := LoadString;

  LoadString := StringConf.ReadString('String', 'CanottWearIt', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanottWearIt', g_sCanottWearIt)
  else
    g_sCanottWearIt := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUseDrugOnThisMap', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUseDrugOnThisMap', sCanotUseDrugOnThisMap)
  else
    sCanotUseDrugOnThisMap := LoadString;

  LoadString := StringConf.ReadString('String', 'GameMasterMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GameMasterMode', sGameMasterMode)
  else
    sGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseGameMasterMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseGameMasterMode', sReleaseGameMasterMode)
  else
    sReleaseGameMasterMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ObserverMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ObserverMode', sObserverMode)
  else
    sObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseObserverMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseObserverMode', g_sReleaseObserverMode)
  else
    g_sReleaseObserverMode := LoadString;

  LoadString := StringConf.ReadString('String', 'SupermanMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SupermanMode', sSupermanMode)
  else
    sSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'ReleaseSupermanMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReleaseSupermanMode', sReleaseSupermanMode)
  else
    sReleaseSupermanMode := LoadString;

  LoadString := StringConf.ReadString('String', 'YouFoundNothing', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouFoundNothing', sYouFoundNothing)
  else
    sYouFoundNothing := LoadString;

  LoadString := StringConf.ReadString('String', 'LineNoticePreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LineNoticePreFix', g_Config.sLineNoticePreFix)
  else
    g_Config.sLineNoticePreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'SysMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SysMsgPreFix', g_Config.sSysMsgPreFix)
  else
    g_Config.sSysMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GuildMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GuildMsgPreFix', g_Config.sGuildMsgPreFix)
  else
    g_Config.sGuildMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GroupMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GroupMsgPreFix', g_Config.sGroupMsgPreFix)
  else
    g_Config.sGroupMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'HintMsgPreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HintMsgPreFix', g_Config.sHintMsgPreFix)
  else
    g_Config.sHintMsgPreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'GMRedMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'GMRedMsgpreFix', g_Config.sGMRedMsgpreFix)
  else
    g_Config.sGMRedMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'MonSayMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MonSayMsgpreFix', g_Config.sMonSayMsgpreFix)
  else
    g_Config.sMonSayMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CustMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CustMsgpreFix', g_Config.sCustMsgpreFix)
  else
    g_Config.sCustMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleMsgpreFix', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleMsgpreFix', g_Config.sCastleMsgpreFix)
  else
    g_Config.sCastleMsgpreFix := LoadString;

  LoadString := StringConf.ReadString('String', 'NoPasswordLockSystemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoPasswordLockSystemMsg', g_sNoPasswordLockSystemMsg)
  else
    g_sNoPasswordLockSystemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'AlreadySetPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'AlreadySetPassword', g_sAlreadySetPasswordMsg)
  else
    g_sAlreadySetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReSetPassword', g_sReSetPasswordMsg)
  else
    g_sReSetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordOverLong', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PasswordOverLong', g_sPasswordOverLongMsg)
  else
    g_sPasswordOverLongMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPasswordOK', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReSetPasswordOK', g_sReSetPasswordOKMsg)
  else
    g_sReSetPasswordOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ReSetPasswordNotMatch', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ReSetPasswordNotMatch', g_sReSetPasswordNotMatchMsg)
  else
    g_sReSetPasswordNotMatchMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputUnLockPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseInputUnLockPassword', g_sPleaseInputUnLockPasswordMsg)
  else
    g_sPleaseInputUnLockPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageUnLockOK', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageUnLockOK', g_sStorageUnLockOKMsg)
  else
    g_sStorageUnLockOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageAlreadyUnLock', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageAlreadyUnLock', g_sStorageAlreadyUnLockMsg)
  else
    g_sStorageAlreadyUnLockMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageNoPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageNoPassword', g_sStorageNoPasswordMsg)
  else
    g_sStorageNoPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnLockPasswordFail', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnLockPasswordFail', g_sUnLockPasswordFailMsg)
  else
    g_sUnLockPasswordFailMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'LockStorageSuccess', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'LockStorageSuccess', g_sLockStorageSuccessMsg)
  else
    g_sLockStorageSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StoragePasswordClearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StoragePasswordClearMsg', g_sStoragePasswordClearMsg)
  else
    g_sStoragePasswordClearMsg := LoadString;
  LoadString := StringConf.ReadString('String', 'PleaseUnloadStoragePasswordMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseUnloadStoragePasswordMsg', g_sPleaseUnloadStoragePasswordMsg)
  else
    g_sPleaseUnloadStoragePasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageAlreadyLock', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageAlreadyLock', g_sStorageAlreadyLockMsg)
  else
    g_sStorageAlreadyLockMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StoragePasswordLocked', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StoragePasswordLocked', g_sStoragePasswordLockedMsg)
  else
    g_sStoragePasswordLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageSetPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageSetPassword', g_sSetPasswordMsg)
  else
    g_sSetPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputOldPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseInputOldPassword', g_sPleaseInputOldPasswordMsg)
  else
    g_sPleaseInputOldPasswordMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordIsClearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PasswordIsClearMsg', g_sOldPasswordIsClearMsg)
  else
    g_sOldPasswordIsClearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NoPasswordSet', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoPasswordSet', g_sNoPasswordSetMsg)
  else
    g_sNoPasswordSetMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OldPasswordIncorrect', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OldPasswordIncorrect', g_sOldPasswordIncorrectMsg)
  else
    g_sOldPasswordIncorrectMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StorageIsLocked', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StorageIsLocked', g_sStorageIsLockedMsg)
  else
    g_sStorageIsLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseTryDealLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseTryDealLaterMsg', g_sPleaseTryDealLaterMsg)
  else
    g_sPleaseTryDealLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealItemsDenyGetBackMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealItemsDenyGetBackMsg', g_sDealItemsDenyGetBackMsg)
  else
    g_sDealItemsDenyGetBackMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealItemsMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealItemsMsg', g_sDisableDealItemsMsg)
  else
    g_sDisableDealItemsMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTryDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotTryDealMsg', g_sCanotTryDealMsg)
  else
    g_sCanotTryDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealActionCancelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealActionCancelMsg', g_sDealActionCancelMsg)
  else
    g_sDealActionCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDisableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PoseDisableDealMsg', g_sPoseDisableDealMsg)
  else
    g_sPoseDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealSuccessMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealSuccessMsg', g_sDealSuccessMsg)
  else
    g_sDealSuccessMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DealOKTooFast', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealOKTooFast', g_sDealOKTooFast)
  else
    g_sDealOKTooFast := LoadString;

  LoadString := StringConf.ReadString('String', 'YourBagSizeTooSmall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourBagSizeTooSmall', g_sYourBagSizeTooSmall)
  else
    g_sYourBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanBagSizeTooSmall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealHumanBagSizeTooSmall', g_sDealHumanBagSizeTooSmall)
  else
    g_sDealHumanBagSizeTooSmall := LoadString;

  LoadString := StringConf.ReadString('String', 'YourGoldLargeThenLimit', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourGoldLargeThenLimit', g_sYourGoldLargeThenLimit)
  else
    g_sYourGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'DealHumanGoldLargeThenLimit', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DealHumanGoldLargeThenLimit', g_sDealHumanGoldLargeThenLimit)
  else
    g_sDealHumanGoldLargeThenLimit := LoadString;

  LoadString := StringConf.ReadString('String', 'YouDealOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouDealOKMsg', g_sYouDealOKMsg)
  else
    g_sYouDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PoseDealOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PoseDealOKMsg', g_sPoseDealOKMsg)
  else
    g_sPoseDealOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'KickClientUserMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'KickClientUserMsg', g_sKickClientUserMsg)
  else
    g_sKickClientUserMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ActionIsLockedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ActionIsLockedMsg', g_sActionIsLockedMsg)
  else
    g_sActionIsLockedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'PasswordNotSetMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PasswordNotSetMsg', g_sPasswordNotSetMsg)
  else
    g_sPasswordNotSetMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NotPasswordProtectMode', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NotPasswordProtectMode', g_sNotPasswordProtectMode)
  else
    g_sNotPasswordProtectMode := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropGoldMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropGoldMsg', g_sCanotDropGoldMsg)
  else
    g_sCanotDropGoldMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropInSafeZoneMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropInSafeZoneMsg', g_sCanotDropInSafeZoneMsg)
  else
    g_sCanotDropInSafeZoneMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else
    g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotDropItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotDropItemMsg', g_sCanotDropItemMsg)
  else
    g_sCanotDropItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotUseItemMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotUseItemMsg', g_sCanotUseItemMsg)
  else
    g_sCanotUseItemMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManMsg', g_sStartMarryManMsg)
  else
    g_sStartMarryManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManMsg', g_sStartMarryWoManMsg)
  else
    g_sStartMarryWoManMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryManAskQuestionMsg', g_sStartMarryManAskQuestionMsg)
  else
    g_sStartMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'StartMarryWoManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'StartMarryWoManAskQuestionMsg', g_sStartMarryWoManAskQuestionMsg)
  else
    g_sStartMarryWoManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAnswerQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAnswerQuestionMsg', g_sMarryManAnswerQuestionMsg)
  else
    g_sMarryManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryManAskQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryManAskQuestionMsg', g_sMarryManAskQuestionMsg)
  else
    g_sMarryManAskQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManAnswerQuestionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManAnswerQuestionMsg', g_sMarryWoManAnswerQuestionMsg)
  else
    g_sMarryWoManAnswerQuestionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManGetMarryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManGetMarryMsg', g_sMarryWoManGetMarryMsg)
  else
    g_sMarryWoManGetMarryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManDenyMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManDenyMsg', g_sMarryWoManDenyMsg)
  else
    g_sMarryWoManDenyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MarryWoManCancelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MarryWoManCancelMsg', g_sMarryWoManCancelMsg)
  else
    g_sMarryWoManCancelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryManLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryManLoginMsg', g_sfUnMarryManLoginMsg)
  else
    g_sfUnMarryManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ForceUnMarryWoManLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ForceUnMarryWoManLoginMsg', g_sfUnMarryWoManLoginMsg)
  else
    g_sfUnMarryWoManLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineSelfMsg', g_sManLoginDearOnlineSelfMsg)
  else
    g_sManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearOnlineDearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearOnlineDearMsg', g_sManLoginDearOnlineDearMsg)
  else
    g_sManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineSelfMsg', g_sWoManLoginDearOnlineSelfMsg)
  else
    g_sWoManLoginDearOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearOnlineDearMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearOnlineDearMsg', g_sWoManLoginDearOnlineDearMsg)
  else
    g_sWoManLoginDearOnlineDearMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLoginDearNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLoginDearNotOnlineMsg', g_sManLoginDearNotOnlineMsg)
  else
    g_sManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLoginDearNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLoginDearNotOnlineMsg', g_sWoManLoginDearNotOnlineMsg)
  else
    g_sWoManLoginDearNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ManLongOutDearOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManLongOutDearOnlineMsg', g_sManLongOutDearOnlineMsg)
  else
    g_sManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManLongOutDearOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManLongOutDearOnlineMsg', g_sWoManLongOutDearOnlineMsg)
  else
    g_sWoManLongOutDearOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMarryedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreNotMarryedMsg', g_sYouAreNotMarryedMsg)
  else
    g_sYouAreNotMarryedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeNotOnlineMsg', g_sYourWifeNotOnlineMsg)
  else
    g_sYourWifeNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandNotOnlineMsg', g_sYourHusbandNotOnlineMsg)
  else
    g_sYourHusbandNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeNowLocateMsg', g_sYourWifeNowLocateMsg)
  else
    g_sYourWifeNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandSearchLocateMsg', g_sYourHusbandSearchLocateMsg)
  else
    g_sYourHusbandSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourHusbandNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourHusbandNowLocateMsg', g_sYourHusbandNowLocateMsg)
  else
    g_sYourHusbandNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourWifeSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourWifeSearchLocateMsg', g_sYourWifeSearchLocateMsg)
  else
    g_sYourWifeSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'FUnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'FUnMasterLoginMsg', g_sfUnMasterLoginMsg)
  else
    g_sfUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterListLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterListLoginMsg', g_sfUnMasterListLoginMsg)
  else
    g_sfUnMasterListLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListOnlineSelfMsg', g_sMasterListOnlineSelfMsg)
  else
    g_sMasterListOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListOnlineMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListOnlineMasterMsg', g_sMasterListOnlineMasterMsg)
  else
    g_sMasterListOnlineMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineSelfMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterOnlineSelfMsg', g_sMasterOnlineSelfMsg)
  else
    g_sMasterOnlineSelfMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterOnlineMasterListMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterOnlineMasterListMsg', g_sMasterOnlineMasterListMsg)
  else
    g_sMasterOnlineMasterListMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterLongOutMasterListOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterLongOutMasterListOnlineMsg', g_sMasterLongOutMasterListOnlineMsg)
  else
    g_sMasterLongOutMasterListOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListLongOutMasterOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListLongOutMasterOnlineMsg', g_sMasterListLongOutMasterOnlineMsg)
  else
    g_sMasterListLongOutMasterOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterListNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterListNotOnlineMsg', g_sMasterListNotOnlineMsg)
  else
    g_sMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterNotOnlineMsg', g_sMasterNotOnlineMsg)
  else
    g_sMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreNotMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreNotMasterMsg', g_sYouAreNotMasterMsg)
  else
    g_sYouAreNotMasterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterNotOnlineMsg', g_sYourMasterNotOnlineMsg)
  else
    g_sYourMasterNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNotOnlineMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListNotOnlineMsg', g_sYourMasterListNotOnlineMsg)
  else
    g_sYourMasterListNotOnlineMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterNowLocateMsg', g_sYourMasterNowLocateMsg)
  else
    g_sYourMasterNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListSearchLocateMsg', g_sYourMasterListSearchLocateMsg)
  else
    g_sYourMasterListSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListNowLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListNowLocateMsg', g_sYourMasterListNowLocateMsg)
  else
    g_sYourMasterListNowLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterSearchLocateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterSearchLocateMsg', g_sYourMasterSearchLocateMsg)
  else
    g_sYourMasterSearchLocateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YourMasterListUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourMasterListUnMasterOKMsg', g_sYourMasterListUnMasterOKMsg)
  else
    g_sYourMasterListUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouAreUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouAreUnMasterOKMsg', g_sYouAreUnMasterOKMsg)
  else
    g_sYouAreUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UnMasterLoginMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UnMasterLoginMsg', g_sUnMasterLoginMsg)
  else
    g_sUnMasterLoginMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayUnMasterOKMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayUnMasterOKMsg', g_sNPCSayUnMasterOKMsg)
  else
    g_sNPCSayUnMasterOKMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'NPCSayForceUnMasterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NPCSayForceUnMasterMsg', g_sNPCSayForceUnMasterMsg)
  else
    g_sNPCSayForceUnMasterMsg := LoadString;




  LoadString := StringConf.ReadString('String', 'MyInfo', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MyInfo', g_sMyInfo)
  else
    g_sMyInfo := LoadString;

  LoadString := StringConf.ReadString('String', 'OpenedDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OpenedDealMsg', g_sOpenedDealMsg)
  else
    g_sOpenedDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendCustMsgCanNotUseNowMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendCustMsgCanNotUseNowMsg', g_sSendCustMsgCanNotUseNowMsg)
  else
    g_sSendCustMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SubkMasterMsgCanNotUseNowMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SubkMasterMsgCanNotUseNowMsg', g_sSubkMasterMsgCanNotUseNowMsg)
  else
    g_sSubkMasterMsgCanNotUseNowMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'SendOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'SendOnlineCountMsg', g_sSendOnlineCountMsg)
  else
    g_sSendOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaponRepairSuccess', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaponRepairSuccess', g_sWeaponRepairSuccess)
  else
    g_sWeaponRepairSuccess := LoadString;

  LoadString := StringConf.ReadString('String', 'DefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DefenceUpTime', g_sDefenceUpTime)
  else
    g_sDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'MagDefenceUpTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MagDefenceUpTime', g_sMagDefenceUpTime)
  else
    g_sMagDefenceUpTime := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery1Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery1Msg', g_sWinLottery1Msg)
  else
    g_sWinLottery1Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery2Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery2Msg', g_sWinLottery2Msg)
  else
    g_sWinLottery2Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery3Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery3Msg', g_sWinLottery3Msg)
  else
    g_sWinLottery3Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery4Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery4Msg', g_sWinLottery4Msg)
  else
    g_sWinLottery4Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery5Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery5Msg', g_sWinLottery5Msg)
  else
    g_sWinLottery5Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'WinLottery6Msg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WinLottery6Msg', g_sWinLottery6Msg)
  else
    g_sWinLottery6Msg := LoadString;

  LoadString := StringConf.ReadString('String', 'NotWinLotteryMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NotWinLotteryMsg', g_sNotWinLotteryMsg)
  else
    g_sNotWinLotteryMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonMakeLuck', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaptonMakeLuck', g_sWeaptonMakeLuck)
  else
    g_sWeaptonMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'WeaptonNotMakeLuck', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WeaptonNotMakeLuck', g_sWeaptonNotMakeLuck)
  else
    g_sWeaptonNotMakeLuck := LoadString;

  LoadString := StringConf.ReadString('String', 'TheWeaponIsCursed', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheWeaponIsCursed', g_sTheWeaponIsCursed)
  else
    g_sTheWeaponIsCursed := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotTakeOffItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotTakeOffItem', g_sCanotTakeOffItem)
  else
    g_sCanotTakeOffItem := LoadString;

  LoadString := StringConf.ReadString('String', 'JoinGroupMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'JoinGroupMsg', g_sJoinGroup)
  else
    g_sJoinGroup := LoadString;

  LoadString := StringConf.ReadString('String', 'TryModeCanotUseStorage', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TryModeCanotUseStorage', g_sTryModeCanotUseStorage)
  else
    g_sTryModeCanotUseStorage := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotGetItemsMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotGetItemsMsg', g_sCanotGetItems)
  else
    g_sCanotGetItems := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDearRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableDearRecall', g_sEnableDearRecall)
  else
    g_sEnableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDearRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDearRecall', g_sDisableDearRecall)
  else
    g_sDisableDearRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableMasterRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableMasterRecall', g_sEnableMasterRecall)
  else
    g_sEnableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableMasterRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableMasterRecall', g_sDisableMasterRecall)
  else
    g_sDisableMasterRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'NowCurrDateTime', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NowCurrDateTime', g_sNowCurrDateTime)
  else
    g_sNowCurrDateTime := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableHearWhisper', g_sEnableHearWhisper)
  else
    g_sEnableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableHearWhisper', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableHearWhisper', g_sDisableHearWhisper)
  else
    g_sDisableHearWhisper := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableShoutMsg', g_sEnableShoutMsg)
  else
    g_sEnableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableShoutMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableShoutMsg', g_sDisableShoutMsg)
  else
    g_sDisableShoutMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableDealMsg', g_sEnableDealMsg)
  else
    g_sEnableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableDealMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableDealMsg', g_sDisableDealMsg)
  else
    g_sDisableDealMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildChat', g_sEnableGuildChat)
  else
    g_sEnableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildChat', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildChat', g_sDisableGuildChat)
  else
    g_sDisableGuildChat := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableJoinGuild', g_sEnableJoinGuild)
  else
    g_sEnableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableJoinGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableJoinGuild', g_sDisableJoinGuild)
  else
    g_sDisableJoinGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableAuthAllyGuild', g_sEnableAuthAllyGuild)
  else
    g_sEnableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableAuthAllyGuild', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableAuthAllyGuild', g_sDisableAuthAllyGuild)
  else
    g_sDisableAuthAllyGuild := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGroupRecall', g_sEnableGroupRecall)
  else
    g_sEnableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGroupRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGroupRecall', g_sDisableGroupRecall)
  else
    g_sDisableGroupRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'EnableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'EnableGuildRecall', g_sEnableGuildRecall)
  else
    g_sEnableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'DisableGuildRecall', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'DisableGuildRecall', g_sDisableGuildRecall)
  else
    g_sDisableGuildRecall := LoadString;

  LoadString := StringConf.ReadString('String', 'PleaseInputPassword', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'PleaseInputPassword', g_sPleaseInputPassword)
  else
    g_sPleaseInputPassword := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapDisableMove', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapDisableMove', g_sTheMapDisableMove)
  else
    g_sTheMapDisableMove := LoadString;

  LoadString := StringConf.ReadString('String', 'TheMapNotFound', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TheMapNotFound', g_sTheMapNotFound)
  else
    g_sTheMapNotFound := LoadString;

  LoadString := StringConf.ReadString('String', 'YourIPaddrDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourIPaddrDenyLogon', g_sYourIPaddrDenyLogon)
  else
    g_sYourIPaddrDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourAccountDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourAccountDenyLogon', g_sYourAccountDenyLogon)
  else
    g_sYourAccountDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'YourCharNameDenyLogon', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YourCharNameDenyLogon', g_sYourCharNameDenyLogon)
  else
    g_sYourCharNameDenyLogon := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotPickUpItem', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotPickUpItem', g_sCanotPickUpItem)
  else
    g_sCanotPickUpItem := LoadString;

  LoadString := StringConf.ReadString('String', 'CanotSendmsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CanotSendmsg', g_sCanotSendmsg)
  else
    g_sCanotSendmsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserDenyWhisperMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserDenyWhisperMsg', g_sUserDenyWhisperMsg)
  else
    g_sUserDenyWhisperMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'UserNotOnLine', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'UserNotOnLine', g_sUserNotOnLine)
  else
    g_sUserNotOnLine := LoadString;

  LoadString := StringConf.ReadString('String', 'RevivalRecoverMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RevivalRecoverMsg', g_sRevivalRecoverMsg)
  else
    g_sRevivalRecoverMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ClientVersionTooOld', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ClientVersionTooOld', g_sClientVersionTooOld)
  else
    g_sClientVersionTooOld := LoadString;

  LoadString := StringConf.ReadString('String', 'CastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'CastleGuildName', g_sCastleGuildName)
  else
    g_sCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoCastleGuildName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoCastleGuildName', g_sNoCastleGuildName)
  else
    g_sNoCastleGuildName := LoadString;

  LoadString := StringConf.ReadString('String', 'WarrReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WarrReNewName', g_sWarrReNewName)
  else
    g_sWarrReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'WizardReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WizardReNewName', g_sWizardReNewName)
  else
    g_sWizardReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'TaosReNewName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TaosReNewName', g_sTaosReNewName)
  else
    g_sTaosReNewName := LoadString;

  LoadString := StringConf.ReadString('String', 'RankLevelName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'RankLevelName', g_sRankLevelName)
  else
    g_sRankLevelName := LoadString;

  LoadString := StringConf.ReadString('String', 'ManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ManDearName', g_sManDearName)
  else
    g_sManDearName := LoadString;

  LoadString := StringConf.ReadString('String', 'WoManDearName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'WoManDearName', g_sWoManDearName)
  else
    g_sWoManDearName := LoadString;

  LoadString := StringConf.ReadString('String', 'MasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'MasterName', g_sMasterName)
  else
    g_sMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'NoMasterName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'NoMasterName', g_sNoMasterName)
  else
    g_sNoMasterName := LoadString;

  LoadString := StringConf.ReadString('String', 'HumanShowName', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'HumanShowName', g_sHumanShowName)
  else
    g_sHumanShowName := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePermissionMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePermissionMsg', g_sChangePermissionMsg)
  else
    g_sChangePermissionMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeKillMonExpRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeKillMonExpRateMsg', g_sChangeKillMonExpRateMsg)
  else
    g_sChangeKillMonExpRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangePowerRateMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangePowerRateMsg', g_sChangePowerRateMsg)
  else
    g_sChangePowerRateMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberLevelMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberLevelMsg', g_sChangeMemberLevelMsg)
  else
    g_sChangeMemberLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ChangeMemberTypeMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ChangeMemberTypeMsg', g_sChangeMemberTypeMsg)
  else
    g_sChangeMemberTypeMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanHPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanHPMsg', g_sScriptChangeHumanHPMsg)
  else
    g_sScriptChangeHumanHPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ScriptChangeHumanMPMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ScriptChangeHumanMPMsg', g_sScriptChangeHumanMPMsg)
  else
    g_sScriptChangeHumanMPMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanotDisableSayMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanotDisableSayMsg', g_sDisableSayMsg)
  else
    g_sDisableSayMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'OnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'OnlineCountMsg', g_sOnlineCountMsg)
  else
    g_sOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'TotalOnlineCountMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'TotalOnlineCountMsg', g_sTotalOnlineCountMsg)
  else
    g_sTotalOnlineCountMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouNeedLevelSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouNeedLevelSendMsg', g_sYouNeedLevelMsg)
  else
    g_sYouNeedLevelMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'ThisMapDisableSendCyCyMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'ThisMapDisableSendCyCyMsg', g_sThisMapDisableSendCyCyMsg)
  else
    g_sThisMapDisableSendCyCyMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouCanSendCyCyLaterMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouCanSendCyCyLaterMsg', g_sYouCanSendCyCyLaterMsg)
  else
    g_sYouCanSendCyCyLaterMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouIsDisableSendMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouIsDisableSendMsg', g_sYouIsDisableSendMsg)
  else
    g_sYouIsDisableSendMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouMurderedMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouMurderedMsg', g_sYouMurderedMsg)
  else
    g_sYouMurderedMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouKilledByMsg', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouKilledByMsg', g_sYouKilledByMsg)
  else
    g_sYouKilledByMsg := LoadString;

  LoadString := StringConf.ReadString('String', 'YouProtectedByLawOfDefense', '');
  if LoadString = '' then
    StringConf.WriteString('String', 'YouProtectedByLawOfDefense', g_sYouProtectedByLawOfDefense)
  else
    g_sYouProtectedByLawOfDefense := LoadString;
  {
  LoadString:=StringConf.ReadString('String','GameCommandPermissionTooLow','');
  if LoadString = '' then
    StringConf.WriteString('String','GameCommandPermissionTooLow',g_sGameCommandPermissionTooLow)
  else g_sGameCommandPermissionTooLow:=LoadString;
  }
end;

procedure LoadConfig();
var
  I: Integer;
  nLoadInteger: Integer;
  nLoadFloat: Double;
  sLoadString: string;
begin
  LoadString();
  LoadGameCommand();
  LoadExp();
  //============================================================================
  if StringConf.ReadString('Guild', 'GuildNotice', '') = '' then
    StringConf.WriteString('Guild', 'GuildNotice', g_Config.sGuildNotice);
  g_Config.sGuildNotice := StringConf.ReadString('Guild', 'GuildNotice', g_Config.sGuildNotice);

  if StringConf.ReadString('Guild', 'GuildWar', '') = '' then
    StringConf.WriteString('Guild', 'GuildWar', g_Config.sGuildWar);
  g_Config.sGuildWar := StringConf.ReadString('Guild', 'GuildWar', g_Config.sGuildWar);

  if StringConf.ReadString('Guild', 'GuildAll', '') = '' then
    StringConf.WriteString('Guild', 'GuildAll', g_Config.sGuildAll);
  g_Config.sGuildAll := StringConf.ReadString('Guild', 'GuildAll', g_Config.sGuildAll);

  if StringConf.ReadString('Guild', 'GuildMember', '') = '' then
    StringConf.WriteString('Guild', 'GuildMember', g_Config.sGuildMember);
  g_Config.sGuildMember := StringConf.ReadString('Guild', 'GuildMember', g_Config.sGuildMember);

  if StringConf.ReadString('Guild', 'GuildMemberRank', '') = '' then
    StringConf.WriteString('Guild', 'GuildMemberRank', g_Config.sGuildMemberRank);
  g_Config.sGuildMemberRank := StringConf.ReadString('Guild', 'GuildMemberRank', g_Config.sGuildMemberRank);

  if StringConf.ReadString('Guild', 'GuildChief', '') = '' then
    StringConf.WriteString('Guild', 'GuildChief', g_Config.sGuildChief);
  g_Config.sGuildChief := StringConf.ReadString('Guild', 'GuildChief', g_Config.sGuildChief);

  //服务器设置
  if Config.ReadInteger('Server', 'ServerIndex', -1) < 0 then
    Config.WriteInteger('Server', 'ServerIndex', nServerIndex);
  nServerIndex := Config.ReadInteger('Server', 'ServerIndex', nServerIndex);

  if Config.ReadString('Server', 'ServerName', '') = '' then
    Config.WriteString('Server', 'ServerName', g_Config.sServerName);
  g_Config.sServerName := Config.ReadString('Server', 'ServerName', g_Config.sServerName);

  if StringConf.ReadString('Server', 'ServerIP', '') = '' then
    StringConf.WriteString('Server', 'ServerIP', g_Config.sServerIPaddr);
  g_Config.sServerIPaddr := StringConf.ReadString('Server', 'ServerIP', g_Config.sServerIPaddr);

  if Config.ReadString('Reg', 'ServerAddr', '') = '' then
    Config.WriteString('Reg', 'ServerAddr', g_Config.sRegServerAddr);
  g_Config.sRegServerAddr := Config.ReadString('Reg', 'ServerAddr', g_Config.sRegServerAddr);

  if Config.ReadString('Reg', 'Key', '') = '' then
    Config.WriteString('Reg', 'Key', g_Config.sRegKey);
  g_Config.sRegKey := Config.ReadString('Reg', 'Key', g_Config.sRegKey);

  if Config.ReadInteger('Reg', 'ServerPort', -1) < 0 then
    Config.WriteInteger('Reg', 'ServerPort', g_Config.nRegServerPort);
  g_Config.nRegServerPort := Config.ReadInteger('Reg', 'ServerPort', g_Config.nRegServerPort);

  if StringConf.ReadString('Server', 'WebSite', '') = '' then
    StringConf.WriteString('Server', 'WebSite', g_Config.sWebSite);
  g_Config.sWebSite := StringConf.ReadString('Server', 'WebSite', g_Config.sWebSite);

  if StringConf.ReadString('Server', 'BbsSite', '') = '' then
    StringConf.WriteString('Server', 'BbsSite', g_Config.sBbsSite);
  g_Config.sBbsSite := StringConf.ReadString('Server', 'BbsSite', g_Config.sBbsSite);

  if StringConf.ReadString('Server', 'ClientDownload', '') = '' then
    StringConf.WriteString('Server', 'ClientDownload', g_Config.sClientDownload);
  g_Config.sClientDownload := StringConf.ReadString('Server', 'ClientDownload', g_Config.sClientDownload);

  if StringConf.ReadString('Server', 'QQ', '') = '' then
    StringConf.WriteString('Server', 'QQ', g_Config.sQQ);
  g_Config.sQQ := StringConf.ReadString('Server', 'QQ', g_Config.sQQ);

  if StringConf.ReadString('Server', 'Phone', '') = '' then
    StringConf.WriteString('Server', 'Phone', g_Config.sPhone);
  g_Config.sPhone := StringConf.ReadString('Server', 'Phone', g_Config.sPhone);

  if StringConf.ReadString('Server', 'BankAccount0', '') = '' then
    StringConf.WriteString('Server', 'BankAccount0', g_Config.sBankAccount0);
  g_Config.sBankAccount0 := StringConf.ReadString('Server', 'BankAccount0', g_Config.sBankAccount0);

  if StringConf.ReadString('Server', 'BankAccount1', '') = '' then
    StringConf.WriteString('Server', 'BankAccount1', g_Config.sBankAccount1);
  g_Config.sBankAccount1 := StringConf.ReadString('Server', 'BankAccount1', g_Config.sBankAccount1);

  if StringConf.ReadString('Server', 'BankAccount2', '') = '' then
    StringConf.WriteString('Server', 'BankAccount2', g_Config.sBankAccount2);
  g_Config.sBankAccount2 := StringConf.ReadString('Server', 'BankAccount2', g_Config.sBankAccount2);

  if StringConf.ReadString('Server', 'BankAccount3', '') = '' then
    StringConf.WriteString('Server', 'BankAccount3', g_Config.sBankAccount3);
  g_Config.sBankAccount3 := StringConf.ReadString('Server', 'BankAccount3', g_Config.sBankAccount3);

  if StringConf.ReadString('Server', 'BankAccount4', '') = '' then
    StringConf.WriteString('Server', 'BankAccount4', g_Config.sBankAccount4);
  g_Config.sBankAccount4 := StringConf.ReadString('Server', 'BankAccount4', g_Config.sBankAccount4);

  if StringConf.ReadString('Server', 'BankAccount5', '') = '' then
    StringConf.WriteString('Server', 'BankAccount5', g_Config.sBankAccount5);
  g_Config.sBankAccount5 := StringConf.ReadString('Server', 'BankAccount5', g_Config.sBankAccount5);

  if StringConf.ReadString('Server', 'BankAccount6', '') = '' then
    StringConf.WriteString('Server', 'BankAccount6', g_Config.sBankAccount6);
  g_Config.sBankAccount6 := StringConf.ReadString('Server', 'BankAccount6', g_Config.sBankAccount6);

  if StringConf.ReadString('Server', 'BankAccount7', '') = '' then
    StringConf.WriteString('Server', 'BankAccount7', g_Config.sBankAccount7);
  g_Config.sBankAccount7 := StringConf.ReadString('Server', 'BankAccount7', g_Config.sBankAccount7);

  if StringConf.ReadString('Server', 'BankAccount8', '') = '' then
    StringConf.WriteString('Server', 'BankAccount8', g_Config.sBankAccount8);
  g_Config.sBankAccount8 := StringConf.ReadString('Server', 'BankAccount8', g_Config.sBankAccount8);

  if StringConf.ReadString('Server', 'BankAccount9', '') = '' then
    StringConf.WriteString('Server', 'BankAccount9', g_Config.sBankAccount9);
  g_Config.sBankAccount9 := StringConf.ReadString('Server', 'BankAccount9', g_Config.sBankAccount9);

  if Config.ReadInteger('Server', 'ServerNumber', -1) < 0 then
    Config.WriteInteger('Server', 'ServerNumber', g_Config.nServerNumber);
  g_Config.nServerNumber := Config.ReadInteger('Server', 'ServerNumber', g_Config.nServerNumber);

  if Config.ReadString('Server', 'VentureServer', '') = '' then
    Config.WriteString('Server', 'VentureServer', BoolToStr(g_Config.boVentureServer));
  g_Config.boVentureServer := CompareText(Config.ReadString('Server', 'VentureServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'TestServer', '') = '' then
    Config.WriteString('Server', 'TestServer', BoolToStr(g_Config.boTestServer));
  g_Config.boTestServer := CompareText(Config.ReadString('Server', 'TestServer', 'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'TestLevel', -1) < 0 then
    Config.WriteInteger('Server', 'TestLevel', g_Config.nTestLevel);
  g_Config.nTestLevel := Config.ReadInteger('Server', 'TestLevel', g_Config.nTestLevel);

  if Config.ReadInteger('Server', 'TestGold', -1) < 0 then
    Config.WriteInteger('Server', 'TestGold', g_Config.nTestGold);
  g_Config.nTestGold := Config.ReadInteger('Server', 'TestGold', g_Config.nTestGold);

  if Config.ReadInteger('Server', 'TestServerUserLimit', -1) < 0 then
    Config.WriteInteger('Server', 'TestServerUserLimit', g_Config.nTestUserLimit);
  g_Config.nTestUserLimit := Config.ReadInteger('Server', 'TestServerUserLimit', g_Config.nTestUserLimit);

  if Config.ReadString('Server', 'ServiceMode', '') = '' then
    Config.WriteString('Server', 'ServiceMode', BoolToStr(g_Config.boServiceMode));
  g_Config.boServiceMode := CompareText(Config.ReadString('Server', 'ServiceMode', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'NonPKServer', '') = '' then
    Config.WriteString('Server', 'NonPKServer', BoolToStr(g_Config.boNonPKServer));
  g_Config.boNonPKServer := CompareText(Config.ReadString('Server', 'NonPKServer', 'FALSE'), 'TRUE') = 0;
  if Config.ReadString('Server', 'SafeOffLine', '') = '' then
    Config.WriteString('Server', 'SafeOffLine', BoolToStr(g_Config.boSafeOffLine));
  g_Config.boSafeOffLine := CompareText(Config.ReadString('Server', 'SafeOffLine', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewHackMessage', '') = '' then
    Config.WriteString('Server', 'ViewHackMessage', BoolToStr(g_Config.boViewHackMessage));
  g_Config.boViewHackMessage := CompareText(Config.ReadString('Server', 'ViewHackMessage', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'ViewAdmissionFailure', '') = '' then
    Config.WriteString('Server', 'ViewAdmissionFailure', BoolToStr(g_Config.boViewAdmissionFailure));
  g_Config.boViewAdmissionFailure := CompareText(Config.ReadString('Server', 'ViewAdmissionFailure', 'FALSE'), 'TRUE') = 0;

  if Config.ReadString('Server', 'DBName', '') = '' then
    Config.WriteString('Server', 'DBName', sDBName);
  sDBName := Config.ReadString('Server', 'DBName', sDBName);

  if Config.ReadString('Server', 'GateAddr', '') = '' then
    Config.WriteString('Server', 'GateAddr', g_Config.sGateAddr);
  g_Config.sGateAddr := Config.ReadString('Server', 'GateAddr', g_Config.sGateAddr);

  if Config.ReadInteger('Server', 'GatePort', -1) < 0 then
    Config.WriteInteger('Server', 'GatePort', g_Config.nGatePort);
  g_Config.nGatePort := Config.ReadInteger('Server', 'GatePort', g_Config.nGatePort);

  if Config.ReadString('Server', 'DBAddr', '') = '' then
    Config.WriteString('Server', 'DBAddr', g_Config.sDBAddr);
  g_Config.sDBAddr := Config.ReadString('Server', 'DBAddr', g_Config.sDBAddr);

  if Config.ReadInteger('Server', 'DBPort', -1) < 0 then
    Config.WriteInteger('Server', 'DBPort', g_Config.nDBPort);
  g_Config.nDBPort := Config.ReadInteger('Server', 'DBPort', g_Config.nDBPort);

  if Config.ReadString('Server', 'IDSAddr', '') = '' then
    Config.WriteString('Server', 'IDSAddr', g_Config.sIDSAddr);
  g_Config.sIDSAddr := Config.ReadString('Server', 'IDSAddr', g_Config.sIDSAddr);

  if Config.ReadInteger('Server', 'IDSPort', -1) < 0 then
    Config.WriteInteger('Server', 'IDSPort', g_Config.nIDSPort);
  g_Config.nIDSPort := Config.ReadInteger('Server', 'IDSPort', g_Config.nIDSPort);

  if Config.ReadString('Server', 'MsgSrvAddr', '') = '' then
    Config.WriteString('Server', 'MsgSrvAddr', g_Config.sMsgSrvAddr);
  g_Config.sMsgSrvAddr := Config.ReadString('Server', 'MsgSrvAddr', g_Config.sMsgSrvAddr);

  if Config.ReadInteger('Server', 'MsgSrvPort', -1) < 0 then
    Config.WriteInteger('Server', 'MsgSrvPort', g_Config.nMsgSrvPort);
  g_Config.nMsgSrvPort := Config.ReadInteger('Server', 'MsgSrvPort', g_Config.nMsgSrvPort);

  if Config.ReadString('Server', 'LogServerAddr', '') = '' then
    Config.WriteString('Server', 'LogServerAddr', g_Config.sLogServerAddr);
  g_Config.sLogServerAddr := Config.ReadString('Server', 'LogServerAddr', g_Config.sLogServerAddr);

  if Config.ReadInteger('Server', 'LogServerPort', -1) < 0 then
    Config.WriteInteger('Server', 'LogServerPort', g_Config.nLogServerPort);
  g_Config.nLogServerPort := Config.ReadInteger('Server', 'LogServerPort', g_Config.nLogServerPort);

  if Config.ReadString('Server', 'DiscountForNightTime', '') = '' then
    Config.WriteString('Server', 'DiscountForNightTime', BoolToStr(g_Config.boDiscountForNightTime));
  g_Config.boDiscountForNightTime := CompareText(Config.ReadString('Server', 'DiscountForNightTime', 'FALSE'), 'TRUE') = 0;

  if Config.ReadInteger('Server', 'HalfFeeStart', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeStart', g_Config.nHalfFeeStart);
  g_Config.nHalfFeeStart := Config.ReadInteger('Server', 'HalfFeeStart', g_Config.nHalfFeeStart);

  if Config.ReadInteger('Server', 'HalfFeeEnd', -1) < 0 then
    Config.WriteInteger('Server', 'HalfFeeEnd', g_Config.nHalfFeeEnd);
  g_Config.nHalfFeeEnd := Config.ReadInteger('Server', 'HalfFeeEnd', g_Config.nHalfFeeEnd);

  if Config.ReadInteger('Server', 'HumLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumLimit', g_dwHumLimit);
  g_dwHumLimit := Config.ReadInteger('Server', 'HumLimit', g_dwHumLimit);

  if Config.ReadInteger('Server', 'MonLimit', -1) < 0 then
    Config.WriteInteger('Server', 'MonLimit', g_dwMonLimit);
  g_dwMonLimit := Config.ReadInteger('Server', 'MonLimit', g_dwMonLimit);

  if Config.ReadInteger('Server', 'ZenLimit', -1) < 0 then
    Config.WriteInteger('Server', 'ZenLimit', g_dwZenLimit);
  g_dwZenLimit := Config.ReadInteger('Server', 'ZenLimit', g_dwZenLimit);

  if Config.ReadInteger('Server', 'NpcLimit', -1) < 0 then
    Config.WriteInteger('Server', 'NpcLimit', g_dwNpcLimit);
  g_dwNpcLimit := Config.ReadInteger('Server', 'NpcLimit', g_dwNpcLimit);

  if Config.ReadInteger('Server', 'SocLimit', -1) < 0 then
    Config.WriteInteger('Server', 'SocLimit', g_dwSocLimit);
  g_dwSocLimit := Config.ReadInteger('Server', 'SocLimit', g_dwSocLimit);

  if Config.ReadInteger('Server', 'DecLimit', -1) < 0 then
    Config.WriteInteger('Server', 'DecLimit', nDecLimit);
  nDecLimit := Config.ReadInteger('Server', 'DecLimit', nDecLimit);

  if Config.ReadInteger('Server', 'SendBlock', -1) < 0 then
    Config.WriteInteger('Server', 'SendBlock', g_Config.nSendBlock);
  g_Config.nSendBlock := Config.ReadInteger('Server', 'SendBlock', g_Config.nSendBlock);

  if Config.ReadInteger('Server', 'CheckBlock', -1) < 0 then
    Config.WriteInteger('Server', 'CheckBlock', g_Config.nCheckBlock);
  g_Config.nCheckBlock := Config.ReadInteger('Server', 'CheckBlock', g_Config.nCheckBlock);

  if Config.ReadInteger('Server', 'SocCheckTimeOut', -1) < 0 then
    Config.WriteInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);
  g_dwSocCheckTimeOut := Config.ReadInteger('Server', 'SocCheckTimeOut', g_dwSocCheckTimeOut);

  if Config.ReadInteger('Server', 'AvailableBlock', -1) < 0 then
    Config.WriteInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);
  g_Config.nAvailableBlock := Config.ReadInteger('Server', 'AvailableBlock', g_Config.nAvailableBlock);

  if Config.ReadInteger('Server', 'GateLoad', -1) < 0 then
    Config.WriteInteger('Server', 'GateLoad', g_Config.nGateLoad);
  g_Config.nGateLoad := Config.ReadInteger('Server', 'GateLoad', g_Config.nGateLoad);

  if Config.ReadInteger('Server', 'UserFull', -1) < 0 then
    Config.WriteInteger('Server', 'UserFull', g_Config.nUserFull);
  g_Config.nUserFull := Config.ReadInteger('Server', 'UserFull', g_Config.nUserFull);

  if Config.ReadInteger('Server', 'ZenFastStep', -1) < 0 then
    Config.WriteInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);
  g_Config.nZenFastStep := Config.ReadInteger('Server', 'ZenFastStep', g_Config.nZenFastStep);

  if Config.ReadInteger('Server', 'ProcessMonstersTime', -1) < 0 then
    Config.WriteInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);
  g_Config.dwProcessMonstersTime := Config.ReadInteger('Server', 'ProcessMonstersTime', g_Config.dwProcessMonstersTime);

  if Config.ReadInteger('Server', 'RegenMonstersTime', -1) < 0 then
    Config.WriteInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);
  g_Config.dwRegenMonstersTime := Config.ReadInteger('Server', 'RegenMonstersTime', g_Config.dwRegenMonstersTime);


  if Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', -1) < 0 then
    Config.WriteInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);
  g_Config.dwHumanGetMsgTime := Config.ReadInteger('Server', 'HumanGetMsgTimeLimit', g_Config.dwHumanGetMsgTime);

{  if (MD5.EncryptString(g_sProductName) <> '82700a24a055c27073062735c233d6e5') or
     (MD5.EncryptString(g_sVersion) <> 'dfd2a178f1728b926f1c748cfb1dfd94') or
     (MD5.EncryptString(g_sProgram) <> 'eb8c6063b27da4f3906e96c4882a20ac') or
     (MD5.EncryptString(g_sWebSite) <> '98802f43ff881556bb02ad2ca116198b') or
     (MD5.EncryptString(g_sBbsSite) <> '34eacca1b042f154e6c8807aa6b11727') then begin
    g_Config.boCheckFail:=True;
  end;      }


  //============================================================================
  //目录设置
  if Config.ReadString('Share', 'BaseDir', '') = '' then
    Config.WriteString('Share', 'BaseDir', g_Config.sBaseDir);
  g_Config.sBaseDir := Config.ReadString('Share', 'BaseDir', g_Config.sBaseDir);

  if Config.ReadString('Share', 'GuildDir', '') = '' then
    Config.WriteString('Share', 'GuildDir', g_Config.sGuildDir);
  g_Config.sGuildDir := Config.ReadString('Share', 'GuildDir', g_Config.sGuildDir);

  if Config.ReadString('Share', 'GuildFile', '') = '' then
    Config.WriteString('Share', 'GuildFile', g_Config.sGuildFile);
  g_Config.sGuildFile := Config.ReadString('Share', 'GuildFile', g_Config.sGuildFile);

  if Config.ReadString('Share', 'VentureDir', '') = '' then
    Config.WriteString('Share', 'VentureDir', g_Config.sVentureDir);
  g_Config.sVentureDir := Config.ReadString('Share', 'VentureDir', g_Config.sVentureDir);

  if Config.ReadString('Share', 'ConLogDir', '') = '' then
    Config.WriteString('Share', 'ConLogDir', g_Config.sConLogDir);
  g_Config.sConLogDir := Config.ReadString('Share', 'ConLogDir', g_Config.sConLogDir);

  if Config.ReadString('Share', 'CastleDir', '') = '' then
    Config.WriteString('Share', 'CastleDir', g_Config.sCastleDir);
  g_Config.sCastleDir := Config.ReadString('Share', 'CastleDir', g_Config.sCastleDir);

  if Config.ReadString('Share', 'CastleFile', '') = '' then
//    Config.WriteString('Share','CastleFile',g_Config.sCastleFile);
    Config.WriteString('Share', 'CastleFile', g_Config.sCastleDir + 'List.txt');
  g_Config.sCastleFile := Config.ReadString('Share', 'CastleFile', g_Config.sCastleFile);

  if Config.ReadString('Share', 'EnvirDir', '') = '' then
    Config.WriteString('Share', 'EnvirDir', g_Config.sEnvirDir);
  g_Config.sEnvirDir := Config.ReadString('Share', 'EnvirDir', g_Config.sEnvirDir);

  if Config.ReadString('Share', 'sFriendsDir', '') = '' then
    Config.WriteString('Share', 'sFriendsDir', g_Config.sFriendsDir);
  g_Config.sFriendsDir := Config.ReadString('Share', 'FriendsDir', g_Config.sFriendsDir);

  if not DirectoryExists(g_Config.sFriendsDir) then
    mkdir(Pchar(g_Config.sFriendsDir));

  if Config.ReadString('Share', 'MapDir', '') = '' then
    Config.WriteString('Share', 'MapDir', g_Config.sMapDir);
  g_Config.sMapDir := Config.ReadString('Share', 'MapDir', g_Config.sMapDir);

  if Config.ReadString('Share', 'NoticeDir', '') = '' then
    Config.WriteString('Share', 'NoticeDir', g_Config.sNoticeDir);
  g_Config.sNoticeDir := Config.ReadString('Share', 'NoticeDir', g_Config.sNoticeDir);

  sLoadString := Config.ReadString('Share', 'LogDir', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'LogDir', g_Config.sLogDir)
  else
    g_Config.sLogDir := sLoadString;

  if Config.ReadString('Share', 'PlugDir', '') = '' then
    Config.WriteString('Share', 'PlugDir', g_Config.sPlugDir);
  g_Config.sPlugDir := Config.ReadString('Share', 'PlugDir', g_Config.sPlugDir);


  //============================================================================
  //名称设置
  if Config.ReadString('Names', 'HealSkill', '') = '' then
    Config.WriteString('Names', 'HealSkill', g_Config.sHealSkill);
  g_Config.sHealSkill := Config.ReadString('Names', 'HealSkill', g_Config.sHealSkill);

  if Config.ReadString('Names', 'FireBallSkill', '') = '' then
    Config.WriteString('Names', 'FireBallSkill', g_Config.sFireBallSkill);
  g_Config.sFireBallSkill := Config.ReadString('Names', 'FireBallSkill', g_Config.sFireBallSkill);

  if Config.ReadString('Names', 'ClothsMan', '') = '' then
    Config.WriteString('Names', 'ClothsMan', g_Config.sClothsMan);
  g_Config.sClothsMan := Config.ReadString('Names', 'ClothsMan', g_Config.sClothsMan);

  if Config.ReadString('Names', 'ClothsWoman', '') = '' then
    Config.WriteString('Names', 'ClothsWoman', g_Config.sClothsWoman);
  g_Config.sClothsWoman := Config.ReadString('Names', 'ClothsWoman', g_Config.sClothsWoman);

  if Config.ReadString('Names', 'WoodenSword', '') = '' then
    Config.WriteString('Names', 'WoodenSword', g_Config.sWoodenSword);
  g_Config.sWoodenSword := Config.ReadString('Names', 'WoodenSword', g_Config.sWoodenSword);

  if Config.ReadString('Names', 'Candle', '') = '' then
    Config.WriteString('Names', 'Candle', g_Config.sCandle);
  g_Config.sCandle := Config.ReadString('Names', 'Candle', g_Config.sCandle);

  if Config.ReadString('Names', 'BasicDrug', '') = '' then
    Config.WriteString('Names', 'BasicDrug', g_Config.sBasicDrug);
  g_Config.sBasicDrug := Config.ReadString('Names', 'BasicDrug', g_Config.sBasicDrug);

  if Config.ReadString('Names', 'GoldStone', '') = '' then
    Config.WriteString('Names', 'GoldStone', g_Config.sGoldStone);
  g_Config.sGoldStone := Config.ReadString('Names', 'GoldStone', g_Config.sGoldStone);

  if Config.ReadString('Names', 'SilverStone', '') = '' then
    Config.WriteString('Names', 'SilverStone', g_Config.sSilverStone);
  g_Config.sSilverStone := Config.ReadString('Names', 'SilverStone', g_Config.sSilverStone);

  if Config.ReadString('Names', 'SteelStone', '') = '' then
    Config.WriteString('Names', 'SteelStone', g_Config.sSteelStone);
  g_Config.sSteelStone := Config.ReadString('Names', 'SteelStone', g_Config.sSteelStone);

  if Config.ReadString('Names', 'CopperStone', '') = '' then
    Config.WriteString('Names', 'CopperStone', g_Config.sCopperStone);
  g_Config.sCopperStone := Config.ReadString('Names', 'CopperStone', g_Config.sCopperStone);

  if Config.ReadString('Names', 'BlackStone', '') = '' then
    Config.WriteString('Names', 'BlackStone', g_Config.sBlackStone);
  g_Config.sBlackStone := Config.ReadString('Names', 'BlackStone', g_Config.sBlackStone);

  if Config.ReadString('Names', 'Zuma1', '') = '' then
    Config.WriteString('Names', 'Zuma1', g_Config.sZuma[0]);
  g_Config.sZuma[0] := Config.ReadString('Names', 'Zuma1', g_Config.sZuma[0]);

  if Config.ReadString('Names', 'Zuma2', '') = '' then
    Config.WriteString('Names', 'Zuma2', g_Config.sZuma[1]);
  g_Config.sZuma[1] := Config.ReadString('Names', 'Zuma2', g_Config.sZuma[1]);

  if Config.ReadString('Names', 'Zuma3', '') = '' then
    Config.WriteString('Names', 'Zuma3', g_Config.sZuma[2]);
  g_Config.sZuma[2] := Config.ReadString('Names', 'Zuma3', g_Config.sZuma[2]);

  if Config.ReadString('Names', 'Zuma4', '') = '' then
    Config.WriteString('Names', 'Zuma4', g_Config.sZuma[3]);
  g_Config.sZuma[3] := Config.ReadString('Names', 'Zuma4', g_Config.sZuma[3]);

  if Config.ReadString('Names', 'Bee', '') = '' then
    Config.WriteString('Names', 'Bee', g_Config.sBee);
  g_Config.sBee := Config.ReadString('Names', 'Bee', g_Config.sBee);

  if Config.ReadString('Names', 'SeeBee1', '') = '' then
    Config.WriteString('Names', 'SeeBee1', g_Config.sSeeBee1);
  g_Config.sSeeBee1 := Config.ReadString('Names', 'SeeBee1', g_Config.sSeeBee1);

  if Config.ReadString('Names', 'SeeBee2', '') = '' then
    Config.WriteString('Names', 'SeeBee2', g_Config.sSeeBee2);
  g_Config.sSeeBee2 := Config.ReadString('Names', 'SeeBee2', g_Config.sSeeBee2);

  if Config.ReadString('Names', 'SeeBee3', '') = '' then
    Config.WriteString('Names', 'SeeBee3', g_Config.sSeeBee3);
  g_Config.sSeeBee3 := Config.ReadString('Names', 'SeeBee3', g_Config.sSeeBee3);

  if Config.ReadString('Names', 'Spider', '') = '' then
    Config.WriteString('Names', 'Spider', g_Config.sSpider);
  g_Config.sSpider := Config.ReadString('Names', 'Spider', g_Config.sSpider);

  if Config.ReadString('Names', 'WomaHorn', '') = '' then
    Config.WriteString('Names', 'WomaHorn', g_Config.sWomaHorn);
  g_Config.sWomaHorn := Config.ReadString('Names', 'WomaHorn', g_Config.sWomaHorn);

  if Config.ReadString('Names', 'ZumaPiece', '') = '' then
    Config.WriteString('Names', 'ZumaPiece', g_Config.sZumaPiece);
  g_Config.sZumaPiece := Config.ReadString('Names', 'ZumaPiece', g_Config.sZumaPiece);

  if Config.ReadString('Names', 'Dogz', '') = '' then
    Config.WriteString('Names', 'Dogz', g_Config.sDogz);
  g_Config.sDogz := Config.ReadString('Names', 'Dogz', g_Config.sDogz);

  if Config.ReadString('Names', 'BoneFamm', '') = '' then
    Config.WriteString('Names', 'BoneFamm', g_Config.sBoneFamm);
  g_Config.sBoneFamm := Config.ReadString('Names', 'BoneFamm', g_Config.sBoneFamm);

  if Config.ReadString('Names', 'SuperBoneFamm', '') = '' then
    Config.WriteString('Names', 'SuperBoneFamm', g_Config.sSuperBoneFamm);
  g_Config.sSuperBoneFamm := Config.ReadString('Names', 'SuperBoneFamm', g_Config.sSuperBoneFamm);


  sLoadString := Config.ReadString('Names', 'GameGold', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GameGold', g_Config.sGameGoldName)
  else
    g_Config.sGameGoldName := sLoadString;

  sLoadString := Config.ReadString('Names', 'GamePoint', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'GamePoint', g_Config.sGamePointName)
  else
    g_Config.sGamePointName := sLoadString;

  sLoadString := Config.ReadString('Names', 'PayMentPointName', '');
  if sLoadString = '' then
    Config.WriteString('Share', 'PayMentPointName', g_Config.sPayMentPointName)
  else
    g_Config.sPayMentPointName := sLoadString;

 // if g_Config.nAppIconCrc <> 1242102148 then
 //   g_Config.boCheckFail:=True;
  //============================================================================
  //游戏设置
  if Config.ReadInteger('Setup', 'ItemNumber', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumber', g_Config.nItemNumber);
  g_Config.nItemNumber := Config.ReadInteger('Setup', 'ItemNumber', g_Config.nItemNumber);

  if Config.ReadInteger('Setup', 'ClbADDTrains', -1) < 0 then
    Config.WriteInteger('Setup', 'ClbADDTrains', g_Config.ClbADDTrains);
  g_Config.ClbADDTrains := Config.ReadInteger('Setup', 'ClbADDTrains', g_Config.ClbADDTrains);

  if Config.ReadInteger('Setup', 'ClbLevelUpTrains', -1) < 0 then
    Config.WriteInteger('Setup', 'ClbLevelUpTrains', g_Config.ClbLevelUpTrains);
  g_Config.ClbLevelUpTrains := Config.ReadInteger('Setup', 'ClbLevelUpTrains', g_Config.ClbADDTrains);
   if g_Config.ClbLevelUpTrains=0 then g_Config.ClbLevelUpTrains:=100;

  if Config.ReadInteger('Setup', 'ItemNumberEx', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);
  g_Config.nItemNumberEx := Config.ReadInteger('Setup', 'ItemNumberEx', g_Config.nItemNumberEx);

  if Config.ReadString('Setup', 'ClientFile1', '') = '' then
    Config.WriteString('Setup', 'ClientFile1', g_Config.sClientFile1);
  g_Config.sClientFile1 := Config.ReadString('Setup', 'ClientFile1', g_Config.sClientFile1);

  if Config.ReadString('Setup', 'ClientFile2', '') = '' then
    Config.WriteString('Setup', 'ClientFile2', g_Config.sClientFile2);
  g_Config.sClientFile2 := Config.ReadString('Setup', 'ClientFile2', g_Config.sClientFile2);

  if Config.ReadString('Setup', 'ClientFile3', '') = '' then
    Config.WriteString('Setup', 'ClientFile3', g_Config.sClientFile3);
  g_Config.sClientFile3 := Config.ReadString('Setup', 'ClientFile3', g_Config.sClientFile3);

  if Config.ReadInteger('Setup', 'MonUpLvNeedKillBase', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvNeedKillBase', g_Config.nMonUpLvNeedKillBase);
  g_Config.nMonUpLvNeedKillBase := Config.ReadInteger('Setup', 'MonUpLvNeedKillBase', g_Config.nMonUpLvNeedKillBase);

  if Config.ReadInteger('Setup', 'MonUpLvRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonUpLvRate', g_Config.nMonUpLvRate);
  g_Config.nMonUpLvRate := Config.ReadInteger('Setup', 'MonUpLvRate', g_Config.nMonUpLvRate);

  for I := Low(g_Config.MonUpLvNeedKillCount) to High(g_Config.MonUpLvNeedKillCount) do
  begin
    if Config.ReadInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), g_Config.MonUpLvNeedKillCount[I]);
    g_Config.MonUpLvNeedKillCount[I] := Config.ReadInteger('Setup', 'MonUpLvNeedKillCount' + IntToStr(I), g_Config.MonUpLvNeedKillCount[I]);
  end;

  for I := Low(g_Config.SlaveColor) to High(g_Config.SlaveColor) do
  begin
    if Config.ReadInteger('Setup', 'SlaveColor' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SlaveColor' + IntToStr(I), g_Config.SlaveColor[I]);
    g_Config.SlaveColor[I] := Config.ReadInteger('Setup', 'SlaveColor' + IntToStr(I), g_Config.SlaveColor[I]);
  end;
  //g_Config.s_EncodeSriptcode:='#;;;#';
  if Config.ReadString('Setup', 'EncodeSriptcode', '') = '' then
    Config.WriteString('Setup', 'EncodeSriptcode', g_aftEncodeSriptcode);
  g_aftEncodeSriptcode := Config.ReadString('Setup', 'EncodeSriptcode', g_aftEncodeSriptcode);
  if (g_aftEncodeSriptcode <> '#;;;#') then
    g_aftEncodeSriptcode := '#WWW' + g_aftEncodeSriptcode + 'GAMEOFWOOOL#';

  if Config.ReadString('Setup', 'HomeMap', '') = '' then
    Config.WriteString('Setup', 'HomeMap', g_Config.sHomeMap);
  g_Config.sHomeMap := Config.ReadString('Setup', 'HomeMap', g_Config.sHomeMap);

  if Config.ReadInteger('Setup', 'HomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeX', g_Config.nHomeX);
  g_Config.nHomeX := Config.ReadInteger('Setup', 'HomeX', g_Config.nHomeX);

  if Config.ReadInteger('Setup', 'HomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'HomeY', g_Config.nHomeY);
  g_Config.nHomeY := Config.ReadInteger('Setup', 'HomeY', g_Config.nHomeY);

  if Config.ReadString('Setup', 'RedHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedHomeMap', g_Config.sRedHomeMap);
  g_Config.sRedHomeMap := Config.ReadString('Setup', 'RedHomeMap', g_Config.sRedHomeMap);

  if Config.ReadInteger('Setup', 'RedHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeX', g_Config.nRedHomeX);
  g_Config.nRedHomeX := Config.ReadInteger('Setup', 'RedHomeX', g_Config.nRedHomeX);

  if Config.ReadInteger('Setup', 'RedHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedHomeY', g_Config.nRedHomeY);
  g_Config.nRedHomeY := Config.ReadInteger('Setup', 'RedHomeY', g_Config.nRedHomeY);

  if Config.ReadString('Setup', 'RedDieHomeMap', '') = '' then
    Config.WriteString('Setup', 'RedDieHomeMap', g_Config.sRedDieHomeMap);
  g_Config.sRedDieHomeMap := Config.ReadString('Setup', 'RedDieHomeMap', g_Config.sRedDieHomeMap);

  if Config.ReadInteger('Setup', 'RedDieHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeX', g_Config.nRedDieHomeX);
  g_Config.nRedDieHomeX := Config.ReadInteger('Setup', 'RedDieHomeX', g_Config.nRedDieHomeX);

  if Config.ReadInteger('Setup', 'RedDieHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'RedDieHomeY', g_Config.nRedDieHomeY);
  g_Config.nRedDieHomeY := Config.ReadInteger('Setup', 'RedDieHomeY', g_Config.nRedDieHomeY);

  nLoadInteger := Config.ReadInteger('Setup', 'HealthFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'HealthFillTime', g_Config.nHealthFillTime)
  else
    g_Config.nHealthFillTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SpellFillTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpellFillTime', g_Config.nSpellFillTime)
  else
    g_Config.nSpellFillTime := nLoadInteger;

  if Config.ReadInteger('Setup', 'DecPkPointTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointTime', g_Config.dwDecPkPointTime);
  g_Config.dwDecPkPointTime := Config.ReadInteger('Setup', 'DecPkPointTime', g_Config.dwDecPkPointTime);

  if Config.ReadInteger('Setup', 'DecPkPointCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DecPkPointCount', g_Config.nDecPkPointCount);
  g_Config.nDecPkPointCount := Config.ReadInteger('Setup', 'DecPkPointCount', g_Config.nDecPkPointCount);

  if Config.ReadInteger('Setup', 'PKFlagTime', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagTime', g_Config.dwPKFlagTime);
  g_Config.dwPKFlagTime := Config.ReadInteger('Setup', 'PKFlagTime', g_Config.dwPKFlagTime);

  if Config.ReadInteger('Setup', 'KillHumanAddPKPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanAddPKPoint', g_Config.nKillHumanAddPKPoint);
  g_Config.nKillHumanAddPKPoint := Config.ReadInteger('Setup', 'KillHumanAddPKPoint', g_Config.nKillHumanAddPKPoint);

  if Config.ReadInteger('Setup', 'KillHumanDecLuckPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanDecLuckPoint', g_Config.nKillHumanDecLuckPoint);
  g_Config.nKillHumanDecLuckPoint := Config.ReadInteger('Setup', 'KillHumanDecLuckPoint', g_Config.nKillHumanDecLuckPoint);

  if Config.ReadInteger('Setup', 'DecLightItemDrugTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DecLightItemDrugTime', g_Config.dwDecLightItemDrugTime);
  g_Config.dwDecLightItemDrugTime := Config.ReadInteger('Setup', 'DecLightItemDrugTime', g_Config.dwDecLightItemDrugTime);


  if Config.ReadInteger('Setup', 'SafeZoneSize', -1) < 0 then
    Config.WriteInteger('Setup', 'SafeZoneSize', g_Config.nSafeZoneSize);
  g_Config.nSafeZoneSize := Config.ReadInteger('Setup', 'SafeZoneSize', g_Config.nSafeZoneSize);

  if Config.ReadInteger('Setup', 'StartPointSize', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPointSize', g_Config.nStartPointSize);
  g_Config.nStartPointSize := Config.ReadInteger('Setup', 'StartPointSize', g_Config.nStartPointSize);

  for I := Low(g_Config.ReNewNameColor) to High(g_Config.ReNewNameColor) do
  begin
    if Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
    g_Config.ReNewNameColor[I] := Config.ReadInteger('Setup', 'ReNewNameColor' + IntToStr(I), g_Config.ReNewNameColor[I]);
  end;
  if Config.ReadInteger('Setup', 'ReNewNameColorTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ReNewNameColorTime', g_Config.dwReNewNameColorTime);
  g_Config.dwReNewNameColorTime := Config.ReadInteger('Setup', 'ReNewNameColorTime', g_Config.dwReNewNameColorTime);

  if Config.ReadInteger('Setup', 'ReNewChangeColor', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewChangeColor', g_Config.boReNewChangeColor);
  g_Config.boReNewChangeColor := Config.ReadBool('Setup', 'ReNewChangeColor', g_Config.boReNewChangeColor);

  if Config.ReadInteger('Setup', 'ReNewLevelClearExp', -1) < 0 then
    Config.WriteBool('Setup', 'ReNewLevelClearExp', g_Config.boReNewLevelClearExp);
  g_Config.boReNewLevelClearExp := Config.ReadBool('Setup', 'ReNewLevelClearExp', g_Config.boReNewLevelClearExp);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrDC', g_Config.BonusAbilofWarr.DC);
  g_Config.BonusAbilofWarr.DC := Config.ReadInteger('Setup', 'BonusAbilofWarrDC', g_Config.BonusAbilofWarr.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMC', g_Config.BonusAbilofWarr.MC);
  g_Config.BonusAbilofWarr.MC := Config.ReadInteger('Setup', 'BonusAbilofWarrMC', g_Config.BonusAbilofWarr.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrSC', g_Config.BonusAbilofWarr.SC);
  g_Config.BonusAbilofWarr.SC := Config.ReadInteger('Setup', 'BonusAbilofWarrSC', g_Config.BonusAbilofWarr.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrAC', g_Config.BonusAbilofWarr.AC);
  g_Config.BonusAbilofWarr.AC := Config.ReadInteger('Setup', 'BonusAbilofWarrAC', g_Config.BonusAbilofWarr.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMAC', g_Config.BonusAbilofWarr.MAC);
  g_Config.BonusAbilofWarr.MAC := Config.ReadInteger('Setup', 'BonusAbilofWarrMAC', g_Config.BonusAbilofWarr.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrHP', g_Config.BonusAbilofWarr.HP);
  g_Config.BonusAbilofWarr.HP := Config.ReadInteger('Setup', 'BonusAbilofWarrHP', g_Config.BonusAbilofWarr.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrMP', g_Config.BonusAbilofWarr.MP);
  g_Config.BonusAbilofWarr.MP := Config.ReadInteger('Setup', 'BonusAbilofWarrMP', g_Config.BonusAbilofWarr.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrHit', g_Config.BonusAbilofWarr.Hit);
  g_Config.BonusAbilofWarr.Hit := Config.ReadInteger('Setup', 'BonusAbilofWarrHit', g_Config.BonusAbilofWarr.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrSpeed', g_Config.BonusAbilofWarr.Speed);
  g_Config.BonusAbilofWarr.Speed := Config.ReadInteger('Setup', 'BonusAbilofWarrSpeed', g_Config.BonusAbilofWarr.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofWarrX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWarrX2', g_Config.BonusAbilofWarr.X2);
  g_Config.BonusAbilofWarr.X2 := Config.ReadInteger('Setup', 'BonusAbilofWarrX2', g_Config.BonusAbilofWarr.X2);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardDC', g_Config.BonusAbilofWizard.DC);
  g_Config.BonusAbilofWizard.DC := Config.ReadInteger('Setup', 'BonusAbilofWizardDC', g_Config.BonusAbilofWizard.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMC', g_Config.BonusAbilofWizard.MC);
  g_Config.BonusAbilofWizard.MC := Config.ReadInteger('Setup', 'BonusAbilofWizardMC', g_Config.BonusAbilofWizard.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardSC', g_Config.BonusAbilofWizard.SC);
  g_Config.BonusAbilofWizard.SC := Config.ReadInteger('Setup', 'BonusAbilofWizardSC', g_Config.BonusAbilofWizard.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardAC', g_Config.BonusAbilofWizard.AC);
  g_Config.BonusAbilofWizard.AC := Config.ReadInteger('Setup', 'BonusAbilofWizardAC', g_Config.BonusAbilofWizard.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMAC', g_Config.BonusAbilofWizard.MAC);
  g_Config.BonusAbilofWizard.MAC := Config.ReadInteger('Setup', 'BonusAbilofWizardMAC', g_Config.BonusAbilofWizard.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardHP', g_Config.BonusAbilofWizard.HP);
  g_Config.BonusAbilofWizard.HP := Config.ReadInteger('Setup', 'BonusAbilofWizardHP', g_Config.BonusAbilofWizard.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardMP', g_Config.BonusAbilofWizard.MP);
  g_Config.BonusAbilofWizard.MP := Config.ReadInteger('Setup', 'BonusAbilofWizardMP', g_Config.BonusAbilofWizard.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardHit', g_Config.BonusAbilofWizard.Hit);
  g_Config.BonusAbilofWizard.Hit := Config.ReadInteger('Setup', 'BonusAbilofWizardHit', g_Config.BonusAbilofWizard.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardSpeed', g_Config.BonusAbilofWizard.Speed);
  g_Config.BonusAbilofWizard.Speed := Config.ReadInteger('Setup', 'BonusAbilofWizardSpeed', g_Config.BonusAbilofWizard.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofWizardX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofWizardX2', g_Config.BonusAbilofWizard.X2);
  g_Config.BonusAbilofWizard.X2 := Config.ReadInteger('Setup', 'BonusAbilofWizardX2', g_Config.BonusAbilofWizard.X2);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosDC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosDC', g_Config.BonusAbilofTaos.DC);
  g_Config.BonusAbilofTaos.DC := Config.ReadInteger('Setup', 'BonusAbilofTaosDC', g_Config.BonusAbilofTaos.DC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMC', g_Config.BonusAbilofTaos.MC);
  g_Config.BonusAbilofTaos.MC := Config.ReadInteger('Setup', 'BonusAbilofTaosMC', g_Config.BonusAbilofTaos.MC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosSC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosSC', g_Config.BonusAbilofTaos.SC);
  g_Config.BonusAbilofTaos.SC := Config.ReadInteger('Setup', 'BonusAbilofTaosSC', g_Config.BonusAbilofTaos.SC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosAC', g_Config.BonusAbilofTaos.AC);
  g_Config.BonusAbilofTaos.AC := Config.ReadInteger('Setup', 'BonusAbilofTaosAC', g_Config.BonusAbilofTaos.AC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMAC', g_Config.BonusAbilofTaos.MAC);
  g_Config.BonusAbilofTaos.MAC := Config.ReadInteger('Setup', 'BonusAbilofTaosMAC', g_Config.BonusAbilofTaos.MAC);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosHP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosHP', g_Config.BonusAbilofTaos.HP);
  g_Config.BonusAbilofTaos.HP := Config.ReadInteger('Setup', 'BonusAbilofTaosHP', g_Config.BonusAbilofTaos.HP);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosMP', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosMP', g_Config.BonusAbilofTaos.MP);
  g_Config.BonusAbilofTaos.MP := Config.ReadInteger('Setup', 'BonusAbilofTaosMP', g_Config.BonusAbilofTaos.MP);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosHit', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosHit', g_Config.BonusAbilofTaos.Hit);
  g_Config.BonusAbilofTaos.Hit := Config.ReadInteger('Setup', 'BonusAbilofTaosHit', g_Config.BonusAbilofTaos.Hit);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosSpeed', g_Config.BonusAbilofTaos.Speed);
  g_Config.BonusAbilofTaos.Speed := Config.ReadInteger('Setup', 'BonusAbilofTaosSpeed', g_Config.BonusAbilofTaos.Speed);

  if Config.ReadInteger('Setup', 'BonusAbilofTaosX2', -1) < 0 then
    Config.WriteInteger('Setup', 'BonusAbilofTaosX2', g_Config.BonusAbilofTaos.X2);
  g_Config.BonusAbilofTaos.X2 := Config.ReadInteger('Setup', 'BonusAbilofTaosX2', g_Config.BonusAbilofTaos.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrDC', g_Config.NakedAbilofWarr.DC);
  g_Config.NakedAbilofWarr.DC := Config.ReadInteger('Setup', 'NakedAbilofWarrDC', g_Config.NakedAbilofWarr.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMC', g_Config.NakedAbilofWarr.MC);
  g_Config.NakedAbilofWarr.MC := Config.ReadInteger('Setup', 'NakedAbilofWarrMC', g_Config.NakedAbilofWarr.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrSC', g_Config.NakedAbilofWarr.SC);
  g_Config.NakedAbilofWarr.SC := Config.ReadInteger('Setup', 'NakedAbilofWarrSC', g_Config.NakedAbilofWarr.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrAC', g_Config.NakedAbilofWarr.AC);
  g_Config.NakedAbilofWarr.AC := Config.ReadInteger('Setup', 'NakedAbilofWarrAC', g_Config.NakedAbilofWarr.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMAC', g_Config.NakedAbilofWarr.MAC);
  g_Config.NakedAbilofWarr.MAC := Config.ReadInteger('Setup', 'NakedAbilofWarrMAC', g_Config.NakedAbilofWarr.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrHP', g_Config.NakedAbilofWarr.HP);
  g_Config.NakedAbilofWarr.HP := Config.ReadInteger('Setup', 'NakedAbilofWarrHP', g_Config.NakedAbilofWarr.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrMP', g_Config.NakedAbilofWarr.MP);
  g_Config.NakedAbilofWarr.MP := Config.ReadInteger('Setup', 'NakedAbilofWarrMP', g_Config.NakedAbilofWarr.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrHit', g_Config.NakedAbilofWarr.Hit);
  g_Config.NakedAbilofWarr.Hit := Config.ReadInteger('Setup', 'NakedAbilofWarrHit', g_Config.NakedAbilofWarr.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrSpeed', g_Config.NakedAbilofWarr.Speed);
  g_Config.NakedAbilofWarr.Speed := Config.ReadInteger('Setup', 'NakedAbilofWarrSpeed', g_Config.NakedAbilofWarr.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofWarrX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWarrX2', g_Config.NakedAbilofWarr.X2);
  g_Config.NakedAbilofWarr.X2 := Config.ReadInteger('Setup', 'NakedAbilofWarrX2', g_Config.NakedAbilofWarr.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardDC', g_Config.NakedAbilofWizard.DC);
  g_Config.NakedAbilofWizard.DC := Config.ReadInteger('Setup', 'NakedAbilofWizardDC', g_Config.NakedAbilofWizard.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMC', g_Config.NakedAbilofWizard.MC);
  g_Config.NakedAbilofWizard.MC := Config.ReadInteger('Setup', 'NakedAbilofWizardMC', g_Config.NakedAbilofWizard.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardSC', g_Config.NakedAbilofWizard.SC);
  g_Config.NakedAbilofWizard.SC := Config.ReadInteger('Setup', 'NakedAbilofWizardSC', g_Config.NakedAbilofWizard.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardAC', g_Config.NakedAbilofWizard.AC);
  g_Config.NakedAbilofWizard.AC := Config.ReadInteger('Setup', 'NakedAbilofWizardAC', g_Config.NakedAbilofWizard.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMAC', g_Config.NakedAbilofWizard.MAC);
  g_Config.NakedAbilofWizard.MAC := Config.ReadInteger('Setup', 'NakedAbilofWizardMAC', g_Config.NakedAbilofWizard.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardHP', g_Config.NakedAbilofWizard.HP);
  g_Config.NakedAbilofWizard.HP := Config.ReadInteger('Setup', 'NakedAbilofWizardHP', g_Config.NakedAbilofWizard.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardMP', g_Config.NakedAbilofWizard.MP);
  g_Config.NakedAbilofWizard.MP := Config.ReadInteger('Setup', 'NakedAbilofWizardMP', g_Config.NakedAbilofWizard.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardHit', g_Config.NakedAbilofWizard.Hit);
  g_Config.NakedAbilofWizard.Hit := Config.ReadInteger('Setup', 'NakedAbilofWizardHit', g_Config.NakedAbilofWizard.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardSpeed', g_Config.NakedAbilofWizard.Speed);
  g_Config.NakedAbilofWizard.Speed := Config.ReadInteger('Setup', 'NakedAbilofWizardSpeed', g_Config.NakedAbilofWizard.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofWizardX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofWizardX2', g_Config.NakedAbilofWizard.X2);
  g_Config.NakedAbilofWizard.X2 := Config.ReadInteger('Setup', 'NakedAbilofWizardX2', g_Config.NakedAbilofWizard.X2);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosDC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosDC', g_Config.NakedAbilofTaos.DC);
  g_Config.NakedAbilofTaos.DC := Config.ReadInteger('Setup', 'NakedAbilofTaosDC', g_Config.NakedAbilofTaos.DC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMC', g_Config.NakedAbilofTaos.MC);
  g_Config.NakedAbilofTaos.MC := Config.ReadInteger('Setup', 'NakedAbilofTaosMC', g_Config.NakedAbilofTaos.MC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosSC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosSC', g_Config.NakedAbilofTaos.SC);
  g_Config.NakedAbilofTaos.SC := Config.ReadInteger('Setup', 'NakedAbilofTaosSC', g_Config.NakedAbilofTaos.SC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosAC', g_Config.NakedAbilofTaos.AC);
  g_Config.NakedAbilofTaos.AC := Config.ReadInteger('Setup', 'NakedAbilofTaosAC', g_Config.NakedAbilofTaos.AC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMAC', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMAC', g_Config.NakedAbilofTaos.MAC);
  g_Config.NakedAbilofTaos.MAC := Config.ReadInteger('Setup', 'NakedAbilofTaosMAC', g_Config.NakedAbilofTaos.MAC);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosHP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosHP', g_Config.NakedAbilofTaos.HP);
  g_Config.NakedAbilofTaos.HP := Config.ReadInteger('Setup', 'NakedAbilofTaosHP', g_Config.NakedAbilofTaos.HP);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosMP', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosMP', g_Config.NakedAbilofTaos.MP);
  g_Config.NakedAbilofTaos.MP := Config.ReadInteger('Setup', 'NakedAbilofTaosMP', g_Config.NakedAbilofTaos.MP);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosHit', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosHit', g_Config.NakedAbilofTaos.Hit);
  g_Config.NakedAbilofTaos.Hit := Config.ReadInteger('Setup', 'NakedAbilofTaosHit', g_Config.NakedAbilofTaos.Hit);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosSpeed', g_Config.NakedAbilofTaos.Speed);
  g_Config.NakedAbilofTaos.Speed := Config.ReadInteger('Setup', 'NakedAbilofTaosSpeed', g_Config.NakedAbilofTaos.Speed);

  if Config.ReadInteger('Setup', 'NakedAbilofTaosX2', -1) < 0 then
    Config.WriteInteger('Setup', 'NakedAbilofTaosX2', g_Config.NakedAbilofTaos.X2);
  g_Config.NakedAbilofTaos.X2 := Config.ReadInteger('Setup', 'NakedAbilofTaosX2', g_Config.NakedAbilofTaos.X2);

  if Config.ReadInteger('Setup', 'GroupMembersMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMembersMax', g_Config.nGroupMembersMax);
  g_Config.nGroupMembersMax := Config.ReadInteger('Setup', 'GroupMembersMax', g_Config.nGroupMembersMax);

  if Config.ReadInteger('Setup', 'GuildMembersMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMembersMax', g_Config.nGuildMembersMax);
  g_Config.nGuildMembersMax := Config.ReadInteger('Setup', 'GuildMembersMax', g_Config.nGuildMembersMax);


  if Config.ReadInteger('Setup', 'UPgradeWeaponGetBackTime', -1) < 0 then
    Config.WriteInteger('Setup', 'UPgradeWeaponGetBackTime', g_Config.dwUPgradeWeaponGetBackTime);
  g_Config.dwUPgradeWeaponGetBackTime := Config.ReadInteger('Setup', 'UPgradeWeaponGetBackTime', g_Config.dwUPgradeWeaponGetBackTime);

  if Config.ReadInteger('Setup', 'ClearExpireUpgradeWeaponDays', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearExpireUpgradeWeaponDays', g_Config.nClearExpireUpgradeWeaponDays);
  g_Config.nClearExpireUpgradeWeaponDays := Config.ReadInteger('Setup', 'ClearExpireUpgradeWeaponDays', g_Config.nClearExpireUpgradeWeaponDays);

  if Config.ReadInteger('Setup', 'UpgradeWeaponPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);
  g_Config.nUpgradeWeaponPrice := Config.ReadInteger('Setup', 'UpgradeWeaponPrice', g_Config.nUpgradeWeaponPrice);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMaxPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMaxPoint', g_Config.nUpgradeWeaponMaxPoint);
  g_Config.nUpgradeWeaponMaxPoint := Config.ReadInteger('Setup', 'UpgradeWeaponMaxPoint', g_Config.nUpgradeWeaponMaxPoint);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCRate', g_Config.nUpgradeWeaponDCRate);
  g_Config.nUpgradeWeaponDCRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCRate', g_Config.nUpgradeWeaponDCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCTwoPointRate', g_Config.nUpgradeWeaponDCTwoPointRate);
  g_Config.nUpgradeWeaponDCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCTwoPointRate', g_Config.nUpgradeWeaponDCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponDCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponDCThreePointRate', g_Config.nUpgradeWeaponDCThreePointRate);
  g_Config.nUpgradeWeaponDCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponDCThreePointRate', g_Config.nUpgradeWeaponDCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCRate', g_Config.nUpgradeWeaponMCRate);
  g_Config.nUpgradeWeaponMCRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCRate', g_Config.nUpgradeWeaponMCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCTwoPointRate', g_Config.nUpgradeWeaponMCTwoPointRate);
  g_Config.nUpgradeWeaponMCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCTwoPointRate', g_Config.nUpgradeWeaponMCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponMCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponMCThreePointRate', g_Config.nUpgradeWeaponMCThreePointRate);
  g_Config.nUpgradeWeaponMCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponMCThreePointRate', g_Config.nUpgradeWeaponMCThreePointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCRate', g_Config.nUpgradeWeaponSCRate);
  g_Config.nUpgradeWeaponSCRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCRate', g_Config.nUpgradeWeaponSCRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCTwoPointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCTwoPointRate', g_Config.nUpgradeWeaponSCTwoPointRate);
  g_Config.nUpgradeWeaponSCTwoPointRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCTwoPointRate', g_Config.nUpgradeWeaponSCTwoPointRate);

  if Config.ReadInteger('Setup', 'UpgradeWeaponSCThreePointRate', -1) < 0 then
    Config.WriteInteger('Setup', 'UpgradeWeaponSCThreePointRate', g_Config.nUpgradeWeaponSCThreePointRate);
  g_Config.nUpgradeWeaponSCThreePointRate := Config.ReadInteger('Setup', 'UpgradeWeaponSCThreePointRate', g_Config.nUpgradeWeaponSCThreePointRate);

  if Config.ReadInteger('Setup', 'BuildGuild', -1) < 0 then
    Config.WriteInteger('Setup', 'BuildGuild', g_Config.nBuildGuildPrice);
  g_Config.nBuildGuildPrice := Config.ReadInteger('Setup', 'BuildGuild', g_Config.nBuildGuildPrice);

  if Config.ReadInteger('Setup', 'MakeDurg', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeDurg', g_Config.nMakeDurgPrice);
  g_Config.nMakeDurgPrice := Config.ReadInteger('Setup', 'MakeDurg', g_Config.nMakeDurgPrice);

  if Config.ReadInteger('Setup', 'GuildWarFee', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildWarFee', g_Config.nGuildWarPrice);
  g_Config.nGuildWarPrice := Config.ReadInteger('Setup', 'GuildWarFee', g_Config.nGuildWarPrice);

  if Config.ReadInteger('Setup', 'HireGuard', -1) < 0 then
    Config.WriteInteger('Setup', 'HireGuard', g_Config.nHireGuardPrice);
  g_Config.nHireGuardPrice := Config.ReadInteger('Setup', 'HireGuard', g_Config.nHireGuardPrice);

  if Config.ReadInteger('Setup', 'HireArcher', -1) < 0 then
    Config.WriteInteger('Setup', 'HireArcher', g_Config.nHireArcherPrice);
  g_Config.nHireArcherPrice := Config.ReadInteger('Setup', 'HireArcher', g_Config.nHireArcherPrice);

  if Config.ReadInteger('Setup', 'RepairDoor', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairDoor', g_Config.nRepairDoorPrice);
  g_Config.nRepairDoorPrice := Config.ReadInteger('Setup', 'RepairDoor', g_Config.nRepairDoorPrice);

  if Config.ReadInteger('Setup', 'RepairWall', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairWall', g_Config.nRepairWallPrice);
  g_Config.nRepairWallPrice := Config.ReadInteger('Setup', 'RepairWall', g_Config.nRepairWallPrice);

  if Config.ReadInteger('Setup', 'CastleMemberPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleMemberPriceRate', g_Config.nCastleMemberPriceRate);
  g_Config.nCastleMemberPriceRate := Config.ReadInteger('Setup', 'CastleMemberPriceRate', g_Config.nCastleMemberPriceRate);

  if Config.ReadInteger('Setup', 'CastleGoldMax', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleGoldMax', g_Config.nCastleGoldMax);
  g_Config.nCastleGoldMax := Config.ReadInteger('Setup', 'CastleGoldMax', g_Config.nCastleGoldMax);

  if Config.ReadInteger('Setup', 'CastleOneDayGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleOneDayGold', g_Config.nCastleOneDayGold);
  g_Config.nCastleOneDayGold := Config.ReadInteger('Setup', 'CastleOneDayGold', g_Config.nCastleOneDayGold);

  if Config.ReadString('Setup', 'CastleName', '') = '' then
    Config.WriteString('Setup', 'CastleName', g_Config.sCastleName);
  g_Config.sCastleName := Config.ReadString('Setup', 'CastleName', g_Config.sCastleName);

  if Config.ReadString('Setup', 'CastleHomeMap', '') = '' then
    Config.WriteString('Setup', 'CastleHomeMap', g_Config.sCastleHomeMap);
  g_Config.sCastleHomeMap := Config.ReadString('Setup', 'CastleHomeMap', g_Config.sCastleHomeMap);

  if Config.ReadInteger('Setup', 'CastleHomeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeX', g_Config.nCastleHomeX);
  g_Config.nCastleHomeX := Config.ReadInteger('Setup', 'CastleHomeX', g_Config.nCastleHomeX);

  if Config.ReadInteger('Setup', 'CastleHomeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleHomeY', g_Config.nCastleHomeY);
  g_Config.nCastleHomeY := Config.ReadInteger('Setup', 'CastleHomeY', g_Config.nCastleHomeY);

  if Config.ReadInteger('Setup', 'CastleWarRangeX', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeX', g_Config.nCastleWarRangeX);
  g_Config.nCastleWarRangeX := Config.ReadInteger('Setup', 'CastleWarRangeX', g_Config.nCastleWarRangeX);

  if Config.ReadInteger('Setup', 'CastleWarRangeY', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarRangeY', g_Config.nCastleWarRangeY);
  g_Config.nCastleWarRangeY := Config.ReadInteger('Setup', 'CastleWarRangeY', g_Config.nCastleWarRangeY);

  if Config.ReadInteger('Setup', 'CastleTaxRate', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleTaxRate', g_Config.nCastleTaxRate);
  g_Config.nCastleTaxRate := Config.ReadInteger('Setup', 'CastleTaxRate', g_Config.nCastleTaxRate);

  if Config.ReadInteger('Setup', 'CastleGetAllNpcTax', -1) < 0 then
    Config.WriteBool('Setup', 'CastleGetAllNpcTax', g_Config.boGetAllNpcTax);
  g_Config.boGetAllNpcTax := Config.ReadBool('Setup', 'CastleGetAllNpcTax', g_Config.boGetAllNpcTax);

  nLoadInteger := Config.ReadInteger('Setup', 'GenMonRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GenMonRate', g_Config.nMonGenRate)
  else
    g_Config.nMonGenRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonRandRate', g_Config.nProcessMonRandRate)
  else
    g_Config.nProcessMonRandRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonLimitCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'ProcessMonLimitCount', g_Config.nProcessMonLimitCount)
  else
    g_Config.nProcessMonLimitCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'HumanMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanMaxGold', g_Config.nHumanMaxGold);
  g_Config.nHumanMaxGold := Config.ReadInteger('Setup', 'HumanMaxGold', g_Config.nHumanMaxGold);

  if Config.ReadInteger('Setup', 'HumanTryModeMaxGold', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanTryModeMaxGold', g_Config.nHumanTryModeMaxGold);
  g_Config.nHumanTryModeMaxGold := Config.ReadInteger('Setup', 'HumanTryModeMaxGold', g_Config.nHumanTryModeMaxGold);

  if Config.ReadInteger('Setup', 'TryModeLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'TryModeLevel', g_Config.nTryModeLevel);
  g_Config.nTryModeLevel := Config.ReadInteger('Setup', 'TryModeLevel', g_Config.nTryModeLevel);

  if Config.ReadInteger('Setup', 'TryModeUseStorage', -1) < 0 then
    Config.WriteBool('Setup', 'TryModeUseStorage', g_Config.boTryModeUseStorage);
  g_Config.boTryModeUseStorage := Config.ReadBool('Setup', 'TryModeUseStorage', g_Config.boTryModeUseStorage);

  if Config.ReadInteger('Setup', 'ShutRedMsgShowGMName', -1) < 0 then
    Config.WriteBool('Setup', 'ShutRedMsgShowGMName', g_Config.boShutRedMsgShowGMName);
  g_Config.boShutRedMsgShowGMName := Config.ReadBool('Setup', 'ShutRedMsgShowGMName', g_Config.boShutRedMsgShowGMName);

  if Config.ReadInteger('Setup', 'ShowMakeItemMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowMakeItemMsg', g_Config.boShowMakeItemMsg);
  g_Config.boShowMakeItemMsg := Config.ReadBool('Setup', 'ShowMakeItemMsg', g_Config.boShowMakeItemMsg);

  if Config.ReadInteger('Setup', 'ShowGuildName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowGuildName', g_Config.boShowGuildName);
  g_Config.boShowGuildName := Config.ReadBool('Setup', 'ShowGuildName', g_Config.boShowGuildName);

  if Config.ReadInteger('Setup', 'ShowRankLevelName', -1) < 0 then
    Config.WriteBool('Setup', 'ShowRankLevelName', g_Config.boShowRankLevelName);
  g_Config.boShowRankLevelName := Config.ReadBool('Setup', 'ShowRankLevelName', g_Config.boShowRankLevelName);

  if Config.ReadInteger('Setup', 'MonSayMsg', -1) < 0 then
    Config.WriteBool('Setup', 'MonSayMsg', g_Config.boMonSayMsg);
  g_Config.boMonSayMsg := Config.ReadBool('Setup', 'MonSayMsg', g_Config.boMonSayMsg);

  if Config.ReadInteger('Setup', 'SayMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgMaxLen', g_Config.nSayMsgMaxLen);
  g_Config.nSayMsgMaxLen := Config.ReadInteger('Setup', 'SayMsgMaxLen', g_Config.nSayMsgMaxLen);

  if Config.ReadInteger('Setup', 'SayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgTime', g_Config.dwSayMsgTime);
  g_Config.dwSayMsgTime := Config.ReadInteger('Setup', 'SayMsgTime', g_Config.dwSayMsgTime);

  if Config.ReadInteger('Setup', 'SayMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SayMsgCount', g_Config.nSayMsgCount);
  g_Config.nSayMsgCount := Config.ReadInteger('Setup', 'SayMsgCount', g_Config.nSayMsgCount);

  if Config.ReadInteger('Setup', 'DisableSayMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DisableSayMsgTime', g_Config.dwDisableSayMsgTime);
  g_Config.dwDisableSayMsgTime := Config.ReadInteger('Setup', 'DisableSayMsgTime', g_Config.dwDisableSayMsgTime);

  if Config.ReadInteger('Setup', 'SayRedMsgMaxLen', -1) < 0 then
    Config.WriteInteger('Setup', 'SayRedMsgMaxLen', g_Config.nSayRedMsgMaxLen);
  g_Config.nSayRedMsgMaxLen := Config.ReadInteger('Setup', 'SayRedMsgMaxLen', g_Config.nSayRedMsgMaxLen);

  if Config.ReadInteger('Setup', 'CanShoutMsgLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'CanShoutMsgLevel', g_Config.nCanShoutMsgLevel);
  g_Config.nCanShoutMsgLevel := Config.ReadInteger('Setup', 'CanShoutMsgLevel', g_Config.nCanShoutMsgLevel);

  if Config.ReadInteger('Setup', 'StartPermission', -1) < 0 then
    Config.WriteInteger('Setup', 'StartPermission', g_Config.nStartPermission);
  g_Config.nStartPermission := Config.ReadInteger('Setup', 'StartPermission', g_Config.nStartPermission);

  if Config.ReadInteger('Setup', 'SendRefMsgRange', -1) < 0 then
    Config.WriteInteger('Setup', 'SendRefMsgRange', g_Config.nSendRefMsgRange);
  g_Config.nSendRefMsgRange := Config.ReadInteger('Setup', 'SendRefMsgRange', g_Config.nSendRefMsgRange);

  if Config.ReadInteger('Setup', 'DecLampDura', -1) < 0 then
    Config.WriteBool('Setup', 'DecLampDura', g_Config.boDecLampDura);
  g_Config.boDecLampDura := Config.ReadBool('Setup', 'DecLampDura', g_Config.boDecLampDura);

  if Config.ReadInteger('Setup', 'HungerSystem', -1) < 0 then
    Config.WriteBool('Setup', 'HungerSystem', g_Config.boHungerSystem);
  g_Config.boHungerSystem := Config.ReadBool('Setup', 'HungerSystem', g_Config.boHungerSystem);

  if Config.ReadInteger('Setup', 'HungerDecHP', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecHP', g_Config.boHungerDecHP);
  g_Config.boHungerDecHP := Config.ReadBool('Setup', 'HungerDecHP', g_Config.boHungerDecHP);

   if Config.ReadInteger('Setup', 'ShieldRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ShieldRate', g_Config.btShieldRate);
  g_Config.btShieldRate := Config.ReadInteger('Setup', 'ShieldRate', g_Config.btShieldRate);

  if Config.ReadInteger('Setup', 'HungerDecPower', -1) < 0 then
    Config.WriteBool('Setup', 'HungerDecPower', g_Config.boHungerDecPower);
  g_Config.boHungerDecPower := Config.ReadBool('Setup', 'HungerDecPower', g_Config.boHungerDecPower);

  if Config.ReadInteger('Setup', 'DiableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'DiableHumanRun', g_Config.boDiableHumanRun);
  g_Config.boDiableHumanRun := Config.ReadBool('Setup', 'DiableHumanRun', g_Config.boDiableHumanRun);

  if Config.ReadInteger('Setup', 'RunHuman', -1) < 0 then
    Config.WriteBool('Setup', 'RunHuman', g_Config.boRunHuman);
  g_Config.boRunHuman := Config.ReadBool('Setup', 'RunHuman', g_Config.boRunHuman);

  if Config.ReadInteger('Setup', 'RunMon', -1) < 0 then
    Config.WriteBool('Setup', 'RunMon', g_Config.boRunMon);
  g_Config.boRunMon := Config.ReadBool('Setup', 'RunMon', g_Config.boRunMon);

  if Config.ReadInteger('Setup', 'RunNpc', -1) < 0 then
    Config.WriteBool('Setup', 'RunNpc', g_Config.boRunNpc);
  g_Config.boRunNpc := Config.ReadBool('Setup', 'RunNpc', g_Config.boRunNpc);

  nLoadInteger := Config.ReadInteger('Setup', 'RunGuard', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'RunGuard', g_Config.boRunGuard)
  else
    g_Config.boRunGuard := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'WarDisableHumanRun', -1) < 0 then
    Config.WriteBool('Setup', 'WarDisableHumanRun', g_Config.boWarDisHumRun);
  g_Config.boWarDisHumRun := Config.ReadBool('Setup', 'WarDisableHumanRun', g_Config.boWarDisHumRun);

  if Config.ReadInteger('Setup', 'GMRunAll', -1) < 0 then
    Config.WriteBool('Setup', 'GMRunAll', g_Config.boGMRunAll);
  g_Config.boGMRunAll := Config.ReadBool('Setup', 'GMRunAll', g_Config.boGMRunAll);

  if Config.ReadInteger('Setup', 'BoneFammCount', -1) < 0 then
    Config.WriteInteger('Setup', 'BoneFammCount', g_Config.nBoneFammCount);
  g_Config.nBoneFammCount := Config.ReadInteger('Setup', 'BoneFammCount', g_Config.nBoneFammCount);

  for I := Low(g_Config.BoneFammArray) to High(g_Config.BoneFammArray) do
  begin
    if Config.ReadInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), g_Config.BoneFammArray[I].nHumLevel);
    g_Config.BoneFammArray[I].nHumLevel := Config.ReadInteger('Setup', 'BoneFammHumLevel' + IntToStr(I), g_Config.BoneFammArray[I].nHumLevel);

    if Config.ReadString('Names', 'BoneFamm' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'BoneFamm' + IntToStr(I), g_Config.BoneFammArray[I].sMonName);
    g_Config.BoneFammArray[I].sMonName := Config.ReadString('Names', 'BoneFamm' + IntToStr(I), g_Config.BoneFammArray[I].sMonName);

    if Config.ReadInteger('Setup', 'BoneFammCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammCount' + IntToStr(I), g_Config.BoneFammArray[I].nCount);
    g_Config.BoneFammArray[I].nCount := Config.ReadInteger('Setup', 'BoneFammCount' + IntToStr(I), g_Config.BoneFammArray[I].nCount);

    if Config.ReadInteger('Setup', 'BoneFammLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'BoneFammLevel' + IntToStr(I), g_Config.BoneFammArray[I].nLevel);
    g_Config.BoneFammArray[I].nLevel := Config.ReadInteger('Setup', 'BoneFammLevel' + IntToStr(I), g_Config.BoneFammArray[I].nLevel);
  end;

  if Config.ReadInteger('Setup', 'SuperBoneFammCount', -1) < 0 then
    Config.WriteInteger('Setup', 'SuperBoneFammCount', g_Config.nSuperBoneFammCount);
  g_Config.nSuperBoneFammCount := Config.ReadInteger('Setup', 'SuperBoneFammCount', g_Config.nSuperBoneFammCount);

  for I := Low(g_Config.SuperBoneFammArray) to High(g_Config.SuperBoneFammArray) do
  begin
    if Config.ReadInteger('Setup', 'SuperBoneFammHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SuperBoneFammHumLevel' + IntToStr(I), g_Config.SuperBoneFammArray[I].nHumLevel);
    g_Config.SuperBoneFammArray[I].nHumLevel := Config.ReadInteger('Setup', 'SuperBoneFammHumLevel' + IntToStr(I), g_Config.SuperBoneFammArray[I].nHumLevel);

    if Config.ReadString('Names', 'SuperBoneFamm' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'SuperBoneFamm' + IntToStr(I), g_Config.SuperBoneFammArray[I].sMonName);
    g_Config.SuperBoneFammArray[I].sMonName := Config.ReadString('Names', 'SuperBoneFamm' + IntToStr(I), g_Config.SuperBoneFammArray[I].sMonName);

    if Config.ReadInteger('Setup', 'SuperBoneFammCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SuperBoneFammCount' + IntToStr(I), g_Config.SuperBoneFammArray[I].nCount);
    g_Config.SuperBoneFammArray[I].nCount := Config.ReadInteger('Setup', 'SuperBoneFammCount' + IntToStr(I), g_Config.SuperBoneFammArray[I].nCount);

    if Config.ReadInteger('Setup', 'SuperBoneFammLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'SuperBoneFammLevel' + IntToStr(I), g_Config.SuperBoneFammArray[I].nLevel);
    g_Config.SuperBoneFammArray[I].nLevel := Config.ReadInteger('Setup', 'SuperBoneFammLevel' + IntToStr(I), g_Config.SuperBoneFammArray[I].nLevel);
  end;



  if Config.ReadInteger('Setup', 'DogzCount', -1) < 0 then
    Config.WriteInteger('Setup', 'DogzCount', g_Config.nDogzCount);
  g_Config.nDogzCount := Config.ReadInteger('Setup', 'DogzCount', g_Config.nDogzCount);

  for I := Low(g_Config.DogzArray) to High(g_Config.DogzArray) do
  begin
    if Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);
    g_Config.DogzArray[I].nHumLevel := Config.ReadInteger('Setup', 'DogzHumLevel' + IntToStr(I), g_Config.DogzArray[I].nHumLevel);

    if Config.ReadString('Names', 'Dogz' + IntToStr(I), '') = '' then
      Config.WriteString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);
    g_Config.DogzArray[I].sMonName := Config.ReadString('Names', 'Dogz' + IntToStr(I), g_Config.DogzArray[I].sMonName);

    if Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);
    g_Config.DogzArray[I].nCount := Config.ReadInteger('Setup', 'DogzCount' + IntToStr(I), g_Config.DogzArray[I].nCount);

    if Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), -1) < 0 then
      Config.WriteInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
    g_Config.DogzArray[I].nLevel := Config.ReadInteger('Setup', 'DogzLevel' + IntToStr(I), g_Config.DogzArray[I].nLevel);
  end;

  if Config.ReadInteger('Setup', 'TryDealTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TryDealTime', g_Config.dwTryDealTime);
  g_Config.dwTryDealTime := Config.ReadInteger('Setup', 'TryDealTime', g_Config.dwTryDealTime);

  if Config.ReadInteger('Setup', 'DealOKTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DealOKTime', g_Config.dwDealOKTime);
  g_Config.dwDealOKTime := Config.ReadInteger('Setup', 'DealOKTime', g_Config.dwDealOKTime);

  if Config.ReadInteger('Setup', 'CanNotGetBackDeal', -1) < 0 then
    Config.WriteBool('Setup', 'CanNotGetBackDeal', g_Config.boCanNotGetBackDeal);
  g_Config.boCanNotGetBackDeal := Config.ReadBool('Setup', 'CanNotGetBackDeal', g_Config.boCanNotGetBackDeal);

  if Config.ReadInteger('Setup', 'DisableDeal', -1) < 0 then
    Config.WriteBool('Setup', 'DisableDeal', g_Config.boDisableDeal);
  g_Config.boDisableDeal := Config.ReadBool('Setup', 'DisableDeal', g_Config.boDisableDeal);

  if Config.ReadInteger('Setup', 'DisablSell', -1) < 0 then
    Config.WriteBool('Setup', 'DisableSell', g_Config.boDisableSell);
  g_Config.boDisableSell := Config.ReadBool('Setup', 'DisableSell', g_Config.boDisableSell);
  if Config.ReadInteger('Setup', 'DisablPetSell', -1) < 0 then
    Config.WriteBool('Setup', 'DisablePetSell', g_Config.boDisablePetSell);
  g_Config.boDisablePetSell := Config.ReadBool('Setup', 'DisablePetSell', g_Config.boDisablePetSell);

  if Config.ReadInteger('Setup', 'MasterOKLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKLevel', g_Config.nMasterOKLevel);
  g_Config.nMasterOKLevel := Config.ReadInteger('Setup', 'MasterOKLevel', g_Config.nMasterOKLevel);
  if Config.ReadInteger('Setup', 'MasterRunScript', -1) < 0 then
    Config.WriteBool('Setup', 'MasterRunScript', g_Config.nMasterRunScript);
  g_Config.nMasterRunScript := Config.ReadBool('Setup', 'MasterRunScript', g_Config.nMasterRunScript);

  if Config.ReadInteger('Setup', 'MasterOKCreditPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKCreditPoint', g_Config.nMasterOKCreditPoint);
  g_Config.nMasterOKCreditPoint := Config.ReadInteger('Setup', 'MasterOKCreditPoint', g_Config.nMasterOKCreditPoint);

  if Config.ReadInteger('Setup', 'MasterOKBonusPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterOKBonusPoint', g_Config.nMasterOKBonusPoint);
  g_Config.nMasterOKBonusPoint := Config.ReadInteger('Setup', 'MasterOKBonusPoint', g_Config.nMasterOKBonusPoint);

  if Config.ReadInteger('Setup', 'PKProtect', -1) < 0 then
    Config.WriteBool('Setup', 'PKProtect', g_Config.boPKLevelProtect);
  g_Config.boPKLevelProtect := Config.ReadBool('Setup', 'PKProtect', g_Config.boPKLevelProtect);

  if Config.ReadInteger('Setup', 'PKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'PKProtectLevel', g_Config.nPKProtectLevel);
  g_Config.nPKProtectLevel := Config.ReadInteger('Setup', 'PKProtectLevel', g_Config.nPKProtectLevel);

  if Config.ReadInteger('Setup', 'RedPKProtectLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'RedPKProtectLevel', g_Config.nRedPKProtectLevel);
  g_Config.nRedPKProtectLevel := Config.ReadInteger('Setup', 'RedPKProtectLevel', g_Config.nRedPKProtectLevel);

  if Config.ReadInteger('Setup', 'ItemPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemPowerRate', g_Config.nItemPowerRate);
  g_Config.nItemPowerRate := Config.ReadInteger('Setup', 'ItemPowerRate', g_Config.nItemPowerRate);

  if Config.ReadInteger('Setup', 'ItemExpRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemExpRate', g_Config.nItemExpRate);
  g_Config.nItemExpRate := Config.ReadInteger('Setup', 'ItemExpRate', g_Config.nItemExpRate);

  if Config.ReadInteger('Setup', 'ScriptGotoCountLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ScriptGotoCountLimit', g_Config.nScriptGotoCountLimit);
  g_Config.nScriptGotoCountLimit := Config.ReadInteger('Setup', 'ScriptGotoCountLimit', g_Config.nScriptGotoCountLimit);

  if Config.ReadInteger('Setup', 'HearMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgFColor', g_Config.btHearMsgFColor);
  g_Config.btHearMsgFColor := Config.ReadInteger('Setup', 'HearMsgFColor', g_Config.btHearMsgFColor);

  if Config.ReadInteger('Setup', 'HearMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'HearMsgBColor', g_Config.btHearMsgBColor);
  g_Config.btHearMsgBColor := Config.ReadInteger('Setup', 'HearMsgBColor', g_Config.btHearMsgBColor);

  if Config.ReadInteger('Setup', 'WhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WhisperMsgFColor', g_Config.btWhisperMsgFColor);
  g_Config.btWhisperMsgFColor := Config.ReadInteger('Setup', 'WhisperMsgFColor', g_Config.btWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'WhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WhisperMsgBColor', g_Config.btWhisperMsgBColor);
  g_Config.btWhisperMsgBColor := Config.ReadInteger('Setup', 'WhisperMsgBColor', g_Config.btWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'GMWhisperMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GMWhisperMsgFColor', g_Config.btGMWhisperMsgFColor);
  g_Config.btGMWhisperMsgFColor := Config.ReadInteger('Setup', 'GMWhisperMsgFColor', g_Config.btGMWhisperMsgFColor);

  if Config.ReadInteger('Setup', 'GMWhisperMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GMWhisperMsgBColor', g_Config.btGMWhisperMsgBColor);
  g_Config.btGMWhisperMsgBColor := Config.ReadInteger('Setup', 'GMWhisperMsgBColor', g_Config.btGMWhisperMsgBColor);

  if Config.ReadInteger('Setup', 'CryMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CryMsgFColor', g_Config.btCryMsgFColor);
  g_Config.btCryMsgFColor := Config.ReadInteger('Setup', 'CryMsgFColor', g_Config.btCryMsgFColor);

  if Config.ReadInteger('Setup', 'CryMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CryMsgBColor', g_Config.btCryMsgBColor);
  g_Config.btCryMsgBColor := Config.ReadInteger('Setup', 'CryMsgBColor', g_Config.btCryMsgBColor);

  if Config.ReadInteger('Setup', 'GreenMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GreenMsgFColor', g_Config.btGreenMsgFColor);
  g_Config.btGreenMsgFColor := Config.ReadInteger('Setup', 'GreenMsgFColor', g_Config.btGreenMsgFColor);

  if Config.ReadInteger('Setup', 'GreenMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GreenMsgBColor', g_Config.btGreenMsgBColor);
  g_Config.btGreenMsgBColor := Config.ReadInteger('Setup', 'GreenMsgBColor', g_Config.btGreenMsgBColor);

  if Config.ReadInteger('Setup', 'BlueMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'BlueMsgFColor', g_Config.btBlueMsgFColor);
  g_Config.btBlueMsgFColor := Config.ReadInteger('Setup', 'BlueMsgFColor', g_Config.btBlueMsgFColor);

  if Config.ReadInteger('Setup', 'BlueMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'BlueMsgBColor', g_Config.btBlueMsgBColor);
  g_Config.btBlueMsgBColor := Config.ReadInteger('Setup', 'BlueMsgBColor', g_Config.btBlueMsgBColor);

  if Config.ReadInteger('Setup', 'RedMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'RedMsgFColor', g_Config.btRedMsgFColor);
  g_Config.btRedMsgFColor := Config.ReadInteger('Setup', 'RedMsgFColor', g_Config.btRedMsgFColor);

  if Config.ReadInteger('Setup', 'RedMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'RedMsgBColor', g_Config.btRedMsgBColor);
  g_Config.btRedMsgBColor := Config.ReadInteger('Setup', 'RedMsgBColor', g_Config.btRedMsgBColor);

  if Config.ReadInteger('Setup', 'GuildMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMsgFColor', g_Config.btGuildMsgFColor);
  g_Config.btGuildMsgFColor := Config.ReadInteger('Setup', 'GuildMsgFColor', g_Config.btGuildMsgFColor);

  if Config.ReadInteger('Setup', 'GuildMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMsgBColor', g_Config.btGuildMsgBColor);
  g_Config.btGuildMsgBColor := Config.ReadInteger('Setup', 'GuildMsgBColor', g_Config.btGuildMsgBColor);

  if Config.ReadInteger('Setup', 'GroupMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMsgFColor', g_Config.btGroupMsgFColor);
  g_Config.btGroupMsgFColor := Config.ReadInteger('Setup', 'GroupMsgFColor', g_Config.btGroupMsgFColor);

  if Config.ReadInteger('Setup', 'GroupMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupMsgBColor', g_Config.btGroupMsgBColor);
  g_Config.btGroupMsgBColor := Config.ReadInteger('Setup', 'GroupMsgBColor', g_Config.btGroupMsgBColor);

  if Config.ReadInteger('Setup', 'CustMsgFColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CustMsgFColor', g_Config.btCustMsgFColor);
  g_Config.btCustMsgFColor := Config.ReadInteger('Setup', 'CustMsgFColor', g_Config.btCustMsgFColor);

  if Config.ReadInteger('Setup', 'CustMsgBColor', -1) < 0 then
    Config.WriteInteger('Setup', 'CustMsgBColor', g_Config.btCustMsgBColor);
  g_Config.btCustMsgBColor := Config.ReadInteger('Setup', 'CustMsgBColor', g_Config.btCustMsgBColor);

  if Config.ReadInteger('Setup', 'MonRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MonRandomAddValue', g_Config.nMonRandomAddValue);
  g_Config.nMonRandomAddValue := Config.ReadInteger('Setup', 'MonRandomAddValue', g_Config.nMonRandomAddValue);

  if Config.ReadInteger('Setup', 'MakeRandomAddValue', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeRandomAddValue', g_Config.nMakeRandomAddValue);
  g_Config.nMakeRandomAddValue := Config.ReadInteger('Setup', 'MakeRandomAddValue', g_Config.nMakeRandomAddValue);

  if Config.ReadInteger('Setup', 'WeaponDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddValueMaxLimit', g_Config.nWeaponDCAddValueMaxLimit);
  g_Config.nWeaponDCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponDCAddValueMaxLimit', g_Config.nWeaponDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponDCAddValueRate', g_Config.nWeaponDCAddValueRate);
  g_Config.nWeaponDCAddValueRate := Config.ReadInteger('Setup', 'WeaponDCAddValueRate', g_Config.nWeaponDCAddValueRate);

  if Config.ReadInteger('Setup', 'WeaponMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddValueMaxLimit', g_Config.nWeaponMCAddValueMaxLimit);
  g_Config.nWeaponMCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponMCAddValueMaxLimit', g_Config.nWeaponMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponMCAddValueRate', g_Config.nWeaponMCAddValueRate);
  g_Config.nWeaponMCAddValueRate := Config.ReadInteger('Setup', 'WeaponMCAddValueRate', g_Config.nWeaponMCAddValueRate);

  if Config.ReadInteger('Setup', 'WeaponSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddValueMaxLimit', g_Config.nWeaponSCAddValueMaxLimit);
  g_Config.nWeaponSCAddValueMaxLimit := Config.ReadInteger('Setup', 'WeaponSCAddValueMaxLimit', g_Config.nWeaponSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'WeaponSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WeaponSCAddValueRate', g_Config.nWeaponSCAddValueRate);
  g_Config.nWeaponSCAddValueRate := Config.ReadInteger('Setup', 'WeaponSCAddValueRate', g_Config.nWeaponSCAddValueRate);

  if Config.ReadInteger('Setup', 'DressDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddValueMaxLimit', g_Config.nDressDCAddValueMaxLimit);
  g_Config.nDressDCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressDCAddValueMaxLimit', g_Config.nDressDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddValueRate', g_Config.nDressDCAddValueRate);
  g_Config.nDressDCAddValueRate := Config.ReadInteger('Setup', 'DressDCAddValueRate', g_Config.nDressDCAddValueRate);

  if Config.ReadInteger('Setup', 'DressDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressDCAddRate', g_Config.nDressDCAddRate);
  g_Config.nDressDCAddRate := Config.ReadInteger('Setup', 'DressDCAddRate', g_Config.nDressDCAddRate);

  if Config.ReadInteger('Setup', 'DressMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddValueMaxLimit', g_Config.nDressMCAddValueMaxLimit);
  g_Config.nDressMCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressMCAddValueMaxLimit', g_Config.nDressMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddValueRate', g_Config.nDressMCAddValueRate);
  g_Config.nDressMCAddValueRate := Config.ReadInteger('Setup', 'DressMCAddValueRate', g_Config.nDressMCAddValueRate);

  if Config.ReadInteger('Setup', 'DressMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressMCAddRate', g_Config.nDressMCAddRate);
  g_Config.nDressMCAddRate := Config.ReadInteger('Setup', 'DressMCAddRate', g_Config.nDressMCAddRate);

  if Config.ReadInteger('Setup', 'DressSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddValueMaxLimit', g_Config.nDressSCAddValueMaxLimit);
  g_Config.nDressSCAddValueMaxLimit := Config.ReadInteger('Setup', 'DressSCAddValueMaxLimit', g_Config.nDressSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'DressSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddValueRate', g_Config.nDressSCAddValueRate);
  g_Config.nDressSCAddValueRate := Config.ReadInteger('Setup', 'DressSCAddValueRate', g_Config.nDressSCAddValueRate);

  if Config.ReadInteger('Setup', 'DressSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DressSCAddRate', g_Config.nDressSCAddRate);
  g_Config.nDressSCAddRate := Config.ReadInteger('Setup', 'DressSCAddRate', g_Config.nDressSCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddValueMaxLimit', g_Config.nNeckLace19DCAddValueMaxLimit);
  g_Config.nNeckLace19DCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19DCAddValueMaxLimit', g_Config.nNeckLace19DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddValueRate', g_Config.nNeckLace19DCAddValueRate);
  g_Config.nNeckLace19DCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19DCAddValueRate', g_Config.nNeckLace19DCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19DCAddRate', g_Config.nNeckLace19DCAddRate);
  g_Config.nNeckLace19DCAddRate := Config.ReadInteger('Setup', 'NeckLace19DCAddRate', g_Config.nNeckLace19DCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddValueMaxLimit', g_Config.nNeckLace19MCAddValueMaxLimit);
  g_Config.nNeckLace19MCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19MCAddValueMaxLimit', g_Config.nNeckLace19MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddValueRate', g_Config.nNeckLace19MCAddValueRate);
  g_Config.nNeckLace19MCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19MCAddValueRate', g_Config.nNeckLace19MCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19MCAddRate', g_Config.nNeckLace19MCAddRate);
  g_Config.nNeckLace19MCAddRate := Config.ReadInteger('Setup', 'NeckLace19MCAddRate', g_Config.nNeckLace19MCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddValueMaxLimit', g_Config.nNeckLace19SCAddValueMaxLimit);
  g_Config.nNeckLace19SCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace19SCAddValueMaxLimit', g_Config.nNeckLace19SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddValueRate', g_Config.nNeckLace19SCAddValueRate);
  g_Config.nNeckLace19SCAddValueRate := Config.ReadInteger('Setup', 'NeckLace19SCAddValueRate', g_Config.nNeckLace19SCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace19SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace19SCAddRate', g_Config.nNeckLace19SCAddRate);
  g_Config.nNeckLace19SCAddRate := Config.ReadInteger('Setup', 'NeckLace19SCAddRate', g_Config.nNeckLace19SCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', g_Config.nNeckLace202124DCAddValueMaxLimit);
  g_Config.nNeckLace202124DCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124DCAddValueMaxLimit', g_Config.nNeckLace202124DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddValueRate', g_Config.nNeckLace202124DCAddValueRate);
  g_Config.nNeckLace202124DCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124DCAddValueRate', g_Config.nNeckLace202124DCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124DCAddRate', g_Config.nNeckLace202124DCAddRate);
  g_Config.nNeckLace202124DCAddRate := Config.ReadInteger('Setup', 'NeckLace202124DCAddRate', g_Config.nNeckLace202124DCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', g_Config.nNeckLace202124MCAddValueMaxLimit);
  g_Config.nNeckLace202124MCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124MCAddValueMaxLimit', g_Config.nNeckLace202124MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddValueRate', g_Config.nNeckLace202124MCAddValueRate);
  g_Config.nNeckLace202124MCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124MCAddValueRate', g_Config.nNeckLace202124MCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124MCAddRate', g_Config.nNeckLace202124MCAddRate);
  g_Config.nNeckLace202124MCAddRate := Config.ReadInteger('Setup', 'NeckLace202124MCAddRate', g_Config.nNeckLace202124MCAddRate);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', g_Config.nNeckLace202124SCAddValueMaxLimit);
  g_Config.nNeckLace202124SCAddValueMaxLimit := Config.ReadInteger('Setup', 'NeckLace202124SCAddValueMaxLimit', g_Config.nNeckLace202124SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddValueRate', g_Config.nNeckLace202124SCAddValueRate);
  g_Config.nNeckLace202124SCAddValueRate := Config.ReadInteger('Setup', 'NeckLace202124SCAddValueRate', g_Config.nNeckLace202124SCAddValueRate);

  if Config.ReadInteger('Setup', 'NeckLace202124SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'NeckLace202124SCAddRate', g_Config.nNeckLace202124SCAddRate);
  g_Config.nNeckLace202124SCAddRate := Config.ReadInteger('Setup', 'NeckLace202124SCAddRate', g_Config.nNeckLace202124SCAddRate);


  if Config.ReadInteger('Setup', 'ArmRing26DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddValueMaxLimit', g_Config.nArmRing26DCAddValueMaxLimit);
  g_Config.nArmRing26DCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26DCAddValueMaxLimit', g_Config.nArmRing26DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddValueRate', g_Config.nArmRing26DCAddValueRate);
  g_Config.nArmRing26DCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26DCAddValueRate', g_Config.nArmRing26DCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26DCAddRate', g_Config.nArmRing26DCAddRate);
  g_Config.nArmRing26DCAddRate := Config.ReadInteger('Setup', 'ArmRing26DCAddRate', g_Config.nArmRing26DCAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddValueMaxLimit', g_Config.nArmRing26MCAddValueMaxLimit);
  g_Config.nArmRing26MCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26MCAddValueMaxLimit', g_Config.nArmRing26MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddValueRate', g_Config.nArmRing26MCAddValueRate);
  g_Config.nArmRing26MCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26MCAddValueRate', g_Config.nArmRing26MCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26MCAddRate', g_Config.nArmRing26MCAddRate);
  g_Config.nArmRing26MCAddRate := Config.ReadInteger('Setup', 'ArmRing26MCAddRate', g_Config.nArmRing26MCAddRate);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddValueMaxLimit', g_Config.nArmRing26SCAddValueMaxLimit);
  g_Config.nArmRing26SCAddValueMaxLimit := Config.ReadInteger('Setup', 'ArmRing26SCAddValueMaxLimit', g_Config.nArmRing26SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddValueRate', g_Config.nArmRing26SCAddValueRate);
  g_Config.nArmRing26SCAddValueRate := Config.ReadInteger('Setup', 'ArmRing26SCAddValueRate', g_Config.nArmRing26SCAddValueRate);

  if Config.ReadInteger('Setup', 'ArmRing26SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ArmRing26SCAddRate', g_Config.nArmRing26SCAddRate);
  g_Config.nArmRing26SCAddRate := Config.ReadInteger('Setup', 'ArmRing26SCAddRate', g_Config.nArmRing26SCAddRate);

  if Config.ReadInteger('Setup', 'Ring22DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddValueMaxLimit', g_Config.nRing22DCAddValueMaxLimit);
  g_Config.nRing22DCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22DCAddValueMaxLimit', g_Config.nRing22DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddValueRate', g_Config.nRing22DCAddValueRate);
  g_Config.nRing22DCAddValueRate := Config.ReadInteger('Setup', 'Ring22DCAddValueRate', g_Config.nRing22DCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22DCAddRate', g_Config.nRing22DCAddRate);
  g_Config.nRing22DCAddRate := Config.ReadInteger('Setup', 'Ring22DCAddRate', g_Config.nRing22DCAddRate);

  if Config.ReadInteger('Setup', 'Ring22MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddValueMaxLimit', g_Config.nRing22MCAddValueMaxLimit);
  g_Config.nRing22MCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22MCAddValueMaxLimit', g_Config.nRing22MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddValueRate', g_Config.nRing22MCAddValueRate);
  g_Config.nRing22MCAddValueRate := Config.ReadInteger('Setup', 'Ring22MCAddValueRate', g_Config.nRing22MCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22MCAddRate', g_Config.nRing22MCAddRate);
  g_Config.nRing22MCAddRate := Config.ReadInteger('Setup', 'Ring22MCAddRate', g_Config.nRing22MCAddRate);

  if Config.ReadInteger('Setup', 'Ring22SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddValueMaxLimit', g_Config.nRing22SCAddValueMaxLimit);
  g_Config.nRing22SCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring22SCAddValueMaxLimit', g_Config.nRing22SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring22SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddValueRate', g_Config.nRing22SCAddValueRate);
  g_Config.nRing22SCAddValueRate := Config.ReadInteger('Setup', 'Ring22SCAddValueRate', g_Config.nRing22SCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring22SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring22SCAddRate', g_Config.nRing22SCAddRate);
  g_Config.nRing22SCAddRate := Config.ReadInteger('Setup', 'Ring22SCAddRate', g_Config.nRing22SCAddRate);


  if Config.ReadInteger('Setup', 'Ring23DCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddValueMaxLimit', g_Config.nRing23DCAddValueMaxLimit);
  g_Config.nRing23DCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23DCAddValueMaxLimit', g_Config.nRing23DCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23DCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddValueRate', g_Config.nRing23DCAddValueRate);
  g_Config.nRing23DCAddValueRate := Config.ReadInteger('Setup', 'Ring23DCAddValueRate', g_Config.nRing23DCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23DCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23DCAddRate', g_Config.nRing23DCAddRate);
  g_Config.nRing23DCAddRate := Config.ReadInteger('Setup', 'Ring23DCAddRate', g_Config.nRing23DCAddRate);

  if Config.ReadInteger('Setup', 'Ring23MCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddValueMaxLimit', g_Config.nRing23MCAddValueMaxLimit);
  g_Config.nRing23MCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23MCAddValueMaxLimit', g_Config.nRing23MCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23MCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddValueRate', g_Config.nRing23MCAddValueRate);
  g_Config.nRing23MCAddValueRate := Config.ReadInteger('Setup', 'Ring23MCAddValueRate', g_Config.nRing23MCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23MCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23MCAddRate', g_Config.nRing23MCAddRate);
  g_Config.nRing23MCAddRate := Config.ReadInteger('Setup', 'Ring23MCAddRate', g_Config.nRing23MCAddRate);

  if Config.ReadInteger('Setup', 'Ring23SCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddValueMaxLimit', g_Config.nRing23SCAddValueMaxLimit);
  g_Config.nRing23SCAddValueMaxLimit := Config.ReadInteger('Setup', 'Ring23SCAddValueMaxLimit', g_Config.nRing23SCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'Ring23SCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddValueRate', g_Config.nRing23SCAddValueRate);
  g_Config.nRing23SCAddValueRate := Config.ReadInteger('Setup', 'Ring23SCAddValueRate', g_Config.nRing23SCAddValueRate);

  if Config.ReadInteger('Setup', 'Ring23SCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Ring23SCAddRate', g_Config.nRing23SCAddRate);
  g_Config.nRing23SCAddRate := Config.ReadInteger('Setup', 'Ring23SCAddRate', g_Config.nRing23SCAddRate);

  if Config.ReadInteger('Setup', 'HelMetDCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddValueMaxLimit', g_Config.nHelMetDCAddValueMaxLimit);
  g_Config.nHelMetDCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetDCAddValueMaxLimit', g_Config.nHelMetDCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetDCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddValueRate', g_Config.nHelMetDCAddValueRate);
  g_Config.nHelMetDCAddValueRate := Config.ReadInteger('Setup', 'HelMetDCAddValueRate', g_Config.nHelMetDCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetDCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetDCAddRate', g_Config.nHelMetDCAddRate);
  g_Config.nHelMetDCAddRate := Config.ReadInteger('Setup', 'HelMetDCAddRate', g_Config.nHelMetDCAddRate);

  if Config.ReadInteger('Setup', 'HelMetMCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddValueMaxLimit', g_Config.nHelMetMCAddValueMaxLimit);
  g_Config.nHelMetMCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetMCAddValueMaxLimit', g_Config.nHelMetMCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetMCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddValueRate', g_Config.nHelMetMCAddValueRate);
  g_Config.nHelMetMCAddValueRate := Config.ReadInteger('Setup', 'HelMetMCAddValueRate', g_Config.nHelMetMCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetMCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetMCAddRate', g_Config.nHelMetMCAddRate);
  g_Config.nHelMetMCAddRate := Config.ReadInteger('Setup', 'HelMetMCAddRate', g_Config.nHelMetMCAddRate);

  if Config.ReadInteger('Setup', 'HelMetSCAddValueMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddValueMaxLimit', g_Config.nHelMetSCAddValueMaxLimit);
  g_Config.nHelMetSCAddValueMaxLimit := Config.ReadInteger('Setup', 'HelMetSCAddValueMaxLimit', g_Config.nHelMetSCAddValueMaxLimit);

  if Config.ReadInteger('Setup', 'HelMetSCAddValueRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddValueRate', g_Config.nHelMetSCAddValueRate);
  g_Config.nHelMetSCAddValueRate := Config.ReadInteger('Setup', 'HelMetSCAddValueRate', g_Config.nHelMetSCAddValueRate);

  if Config.ReadInteger('Setup', 'HelMetSCAddRate', -1) < 0 then
    Config.WriteInteger('Setup', 'HelMetSCAddRate', g_Config.nHelMetSCAddRate);
  g_Config.nHelMetSCAddRate := Config.ReadInteger('Setup', 'HelMetSCAddRate', g_Config.nHelMetSCAddRate);

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetACAddRate', g_Config.nUnknowHelMetACAddRate)
  else
    g_Config.nUnknowHelMetACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetACAddValueMaxLimit', g_Config.nUnknowHelMetACAddValueMaxLimit)
  else
    g_Config.nUnknowHelMetACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMACAddRate', g_Config.nUnknowHelMetMACAddRate)
  else
    g_Config.nUnknowHelMetMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMACAddValueMaxLimit', g_Config.nUnknowHelMetMACAddValueMaxLimit)
  else
    g_Config.nUnknowHelMetMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetDCAddRate', g_Config.nUnknowHelMetDCAddRate)
  else
    g_Config.nUnknowHelMetDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetDCAddValueMaxLimit', g_Config.nUnknowHelMetDCAddValueMaxLimit)
  else
    g_Config.nUnknowHelMetDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMCAddRate', g_Config.nUnknowHelMetMCAddRate)
  else
    g_Config.nUnknowHelMetMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetMCAddValueMaxLimit', g_Config.nUnknowHelMetMCAddValueMaxLimit)
  else
    g_Config.nUnknowHelMetMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetSCAddRate', g_Config.nUnknowHelMetSCAddRate)
  else
    g_Config.nUnknowHelMetSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowHelMetSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowHelMetSCAddValueMaxLimit', g_Config.nUnknowHelMetSCAddValueMaxLimit)
  else
    g_Config.nUnknowHelMetSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceACAddRate', g_Config.nUnknowNecklaceACAddRate)
  else
    g_Config.nUnknowNecklaceACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceACAddValueMaxLimit', g_Config.nUnknowNecklaceACAddValueMaxLimit)
  else
    g_Config.nUnknowNecklaceACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMACAddRate', g_Config.nUnknowNecklaceMACAddRate)
  else
    g_Config.nUnknowNecklaceMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMACAddValueMaxLimit', g_Config.nUnknowNecklaceMACAddValueMaxLimit)
  else
    g_Config.nUnknowNecklaceMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceDCAddRate', g_Config.nUnknowNecklaceDCAddRate)
  else
    g_Config.nUnknowNecklaceDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceDCAddValueMaxLimit', g_Config.nUnknowNecklaceDCAddValueMaxLimit)
  else
    g_Config.nUnknowNecklaceDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMCAddRate', g_Config.nUnknowNecklaceMCAddRate)
  else
    g_Config.nUnknowNecklaceMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceMCAddValueMaxLimit', g_Config.nUnknowNecklaceMCAddValueMaxLimit)
  else
    g_Config.nUnknowNecklaceMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceSCAddRate', g_Config.nUnknowNecklaceSCAddRate)
  else
    g_Config.nUnknowNecklaceSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowNecklaceSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowNecklaceSCAddValueMaxLimit', g_Config.nUnknowNecklaceSCAddValueMaxLimit)
  else
    g_Config.nUnknowNecklaceSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingACAddRate', g_Config.nUnknowRingACAddRate)
  else
    g_Config.nUnknowRingACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingACAddValueMaxLimit', g_Config.nUnknowRingACAddValueMaxLimit)
  else
    g_Config.nUnknowRingACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMACAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMACAddRate', g_Config.nUnknowRingMACAddRate)
  else
    g_Config.nUnknowRingMACAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMACAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMACAddValueMaxLimit', g_Config.nUnknowRingMACAddValueMaxLimit)
  else
    g_Config.nUnknowRingMACAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingDCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingDCAddRate', g_Config.nUnknowRingDCAddRate)
  else
    g_Config.nUnknowRingDCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingDCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingDCAddValueMaxLimit', g_Config.nUnknowRingDCAddValueMaxLimit)
  else
    g_Config.nUnknowRingDCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMCAddRate', g_Config.nUnknowRingMCAddRate)
  else
    g_Config.nUnknowRingMCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingMCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingMCAddValueMaxLimit', g_Config.nUnknowRingMCAddValueMaxLimit)
  else
    g_Config.nUnknowRingMCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingSCAddRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingSCAddRate', g_Config.nUnknowRingSCAddRate)
  else
    g_Config.nUnknowRingSCAddRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'UnknowRingSCAddValueMaxLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UnknowRingSCAddValueMaxLimit', g_Config.nUnknowRingSCAddValueMaxLimit)
  else
    g_Config.nUnknowRingSCAddValueMaxLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MonOneDropGoldCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MonOneDropGoldCount', g_Config.nMonOneDropGoldCount)
  else
    g_Config.nMonOneDropGoldCount := nLoadInteger;

  if Config.ReadInteger('Setup', 'MakeMineHitRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineHitRate', g_Config.nMakeMineHitRate);
  g_Config.nMakeMineHitRate := Config.ReadInteger('Setup', 'MakeMineHitRate', g_Config.nMakeMineHitRate);

  if Config.ReadInteger('Setup', 'MakeMineRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeMineRate', g_Config.nMakeMineRate);
  g_Config.nMakeMineRate := Config.ReadInteger('Setup', 'MakeMineRate', g_Config.nMakeMineRate);

  if Config.ReadInteger('Setup', 'StoneTypeRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRate', g_Config.nStoneTypeRate);
  g_Config.nStoneTypeRate := Config.ReadInteger('Setup', 'StoneTypeRate', g_Config.nStoneTypeRate);

  if Config.ReadInteger('Setup', 'StoneTypeRateMin', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneTypeRateMin', g_Config.nStoneTypeRateMin);
  g_Config.nStoneTypeRateMin := Config.ReadInteger('Setup', 'StoneTypeRateMin', g_Config.nStoneTypeRateMin);

  if Config.ReadInteger('Setup', 'GoldStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMin', g_Config.nGoldStoneMin);
  g_Config.nGoldStoneMin := Config.ReadInteger('Setup', 'GoldStoneMin', g_Config.nGoldStoneMin);

  if Config.ReadInteger('Setup', 'GoldStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldStoneMax', g_Config.nGoldStoneMax);
  g_Config.nGoldStoneMax := Config.ReadInteger('Setup', 'GoldStoneMax', g_Config.nGoldStoneMax);

  if Config.ReadInteger('Setup', 'SilverStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMin', g_Config.nSilverStoneMin);
  g_Config.nSilverStoneMin := Config.ReadInteger('Setup', 'SilverStoneMin', g_Config.nSilverStoneMin);

  if Config.ReadInteger('Setup', 'SilverStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SilverStoneMax', g_Config.nSilverStoneMax);
  g_Config.nSilverStoneMax := Config.ReadInteger('Setup', 'SilverStoneMax', g_Config.nSilverStoneMax);

  if Config.ReadInteger('Setup', 'SteelStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMin', g_Config.nSteelStoneMin);
  g_Config.nSteelStoneMin := Config.ReadInteger('Setup', 'SteelStoneMin', g_Config.nSteelStoneMin);

  if Config.ReadInteger('Setup', 'SteelStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'SteelStoneMax', g_Config.nSteelStoneMax);
  g_Config.nSteelStoneMax := Config.ReadInteger('Setup', 'SteelStoneMax', g_Config.nSteelStoneMax);

  if Config.ReadInteger('Setup', 'BlackStoneMin', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMin', g_Config.nBlackStoneMin);
  g_Config.nBlackStoneMin := Config.ReadInteger('Setup', 'BlackStoneMin', g_Config.nBlackStoneMin);

  if Config.ReadInteger('Setup', 'BlackStoneMax', -1) < 0 then
    Config.WriteInteger('Setup', 'BlackStoneMax', g_Config.nBlackStoneMax);
  g_Config.nBlackStoneMax := Config.ReadInteger('Setup', 'BlackStoneMax', g_Config.nBlackStoneMax);

  if Config.ReadInteger('Setup', 'StoneMinDura', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneMinDura', g_Config.nStoneMinDura);
  g_Config.nStoneMinDura := Config.ReadInteger('Setup', 'StoneMinDura', g_Config.nStoneMinDura);

  if Config.ReadInteger('Setup', 'StoneGeneralDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneGeneralDuraRate', g_Config.nStoneGeneralDuraRate);
  g_Config.nStoneGeneralDuraRate := Config.ReadInteger('Setup', 'StoneGeneralDuraRate', g_Config.nStoneGeneralDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraRate', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraRate', g_Config.nStoneAddDuraRate);
  g_Config.nStoneAddDuraRate := Config.ReadInteger('Setup', 'StoneAddDuraRate', g_Config.nStoneAddDuraRate);

  if Config.ReadInteger('Setup', 'StoneAddDuraMax', -1) < 0 then
    Config.WriteInteger('Setup', 'StoneAddDuraMax', g_Config.nStoneAddDuraMax);
  g_Config.nStoneAddDuraMax := Config.ReadInteger('Setup', 'StoneAddDuraMax', g_Config.nStoneAddDuraMax);

  if Config.ReadInteger('Setup', 'WinLottery1Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Min', g_Config.nWinLottery1Min);
  g_Config.nWinLottery1Min := Config.ReadInteger('Setup', 'WinLottery1Min', g_Config.nWinLottery1Min);

  if Config.ReadInteger('Setup', 'WinLottery1Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Max', g_Config.nWinLottery1Max);
  g_Config.nWinLottery1Max := Config.ReadInteger('Setup', 'WinLottery1Max', g_Config.nWinLottery1Max);

  if Config.ReadInteger('Setup', 'WinLottery2Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Min', g_Config.nWinLottery2Min);
  g_Config.nWinLottery2Min := Config.ReadInteger('Setup', 'WinLottery2Min', g_Config.nWinLottery2Min);

  if Config.ReadInteger('Setup', 'WinLottery2Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Max', g_Config.nWinLottery2Max);
  g_Config.nWinLottery2Max := Config.ReadInteger('Setup', 'WinLottery2Max', g_Config.nWinLottery2Max);

  if Config.ReadInteger('Setup', 'WinLottery3Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Min', g_Config.nWinLottery3Min);
  g_Config.nWinLottery3Min := Config.ReadInteger('Setup', 'WinLottery3Min', g_Config.nWinLottery3Min);

  if Config.ReadInteger('Setup', 'WinLottery3Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Max', g_Config.nWinLottery3Max);
  g_Config.nWinLottery3Max := Config.ReadInteger('Setup', 'WinLottery3Max', g_Config.nWinLottery3Max);

  if Config.ReadInteger('Setup', 'WinLottery4Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Min', g_Config.nWinLottery4Min);
  g_Config.nWinLottery4Min := Config.ReadInteger('Setup', 'WinLottery4Min', g_Config.nWinLottery4Min);

  if Config.ReadInteger('Setup', 'WinLottery4Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Max', g_Config.nWinLottery4Max);
  g_Config.nWinLottery4Max := Config.ReadInteger('Setup', 'WinLottery4Max', g_Config.nWinLottery4Max);

  if Config.ReadInteger('Setup', 'WinLottery5Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Min', g_Config.nWinLottery5Min);
  g_Config.nWinLottery5Min := Config.ReadInteger('Setup', 'WinLottery5Min', g_Config.nWinLottery5Min);

  if Config.ReadInteger('Setup', 'WinLottery5Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Max', g_Config.nWinLottery5Max);
  g_Config.nWinLottery5Max := Config.ReadInteger('Setup', 'WinLottery5Max', g_Config.nWinLottery5Max);

  if Config.ReadInteger('Setup', 'WinLottery6Min', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Min', g_Config.nWinLottery6Min);
  g_Config.nWinLottery6Min := Config.ReadInteger('Setup', 'WinLottery6Min', g_Config.nWinLottery6Min);

  if Config.ReadInteger('Setup', 'WinLottery6Max', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Max', g_Config.nWinLottery6Max);
  g_Config.nWinLottery6Max := Config.ReadInteger('Setup', 'WinLottery6Max', g_Config.nWinLottery6Max);

  if Config.ReadInteger('Setup', 'WinLotteryRate', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLotteryRate', g_Config.nWinLotteryRate);
  g_Config.nWinLotteryRate := Config.ReadInteger('Setup', 'WinLotteryRate', g_Config.nWinLotteryRate);

  if Config.ReadInteger('Setup', 'WinLottery1Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery1Gold', g_Config.nWinLottery1Gold);
  g_Config.nWinLottery1Gold := Config.ReadInteger('Setup', 'WinLottery1Gold', g_Config.nWinLottery1Gold);

  if Config.ReadInteger('Setup', 'WinLottery2Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery2Gold', g_Config.nWinLottery2Gold);
  g_Config.nWinLottery2Gold := Config.ReadInteger('Setup', 'WinLottery2Gold', g_Config.nWinLottery2Gold);

  if Config.ReadInteger('Setup', 'WinLottery3Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery3Gold', g_Config.nWinLottery3Gold);
  g_Config.nWinLottery3Gold := Config.ReadInteger('Setup', 'WinLottery3Gold', g_Config.nWinLottery3Gold);

  if Config.ReadInteger('Setup', 'WinLottery4Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery4Gold', g_Config.nWinLottery4Gold);
  g_Config.nWinLottery4Gold := Config.ReadInteger('Setup', 'WinLottery4Gold', g_Config.nWinLottery4Gold);

  if Config.ReadInteger('Setup', 'WinLottery5Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery5Gold', g_Config.nWinLottery5Gold);
  g_Config.nWinLottery5Gold := Config.ReadInteger('Setup', 'WinLottery5Gold', g_Config.nWinLottery5Gold);

  if Config.ReadInteger('Setup', 'WinLottery6Gold', -1) < 0 then
    Config.WriteInteger('Setup', 'WinLottery6Gold', g_Config.nWinLottery6Gold);
  g_Config.nWinLottery6Gold := Config.ReadInteger('Setup', 'WinLottery6Gold', g_Config.nWinLottery6Gold);

  if Config.ReadInteger('Setup', 'GuildRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRecallTime', g_Config.nGuildRecallTime);
  g_Config.nGuildRecallTime := Config.ReadInteger('Setup', 'GuildRecallTime', g_Config.nGuildRecallTime);

  if Config.ReadInteger('Setup', 'GroupRecallTime', -1) < 0 then
    Config.WriteInteger('Setup', 'GroupRecallTime', g_Config.nGroupRecallTime);
  g_Config.nGroupRecallTime := Config.ReadInteger('Setup', 'GroupRecallTime', g_Config.nGroupRecallTime);

  if Config.ReadInteger('Setup', 'ControlDropItem', -1) < 0 then
    Config.WriteBool('Setup', 'ControlDropItem', g_Config.boControlDropItem);
  g_Config.boControlDropItem := Config.ReadBool('Setup', 'ControlDropItem', g_Config.boControlDropItem);

  if Config.ReadInteger('Setup', 'InSafeDisableDrop', -1) < 0 then
    Config.WriteBool('Setup', 'InSafeDisableDrop', g_Config.boInSafeDisableDrop);
  g_Config.boInSafeDisableDrop := Config.ReadBool('Setup', 'InSafeDisableDrop', g_Config.boInSafeDisableDrop);

  if Config.ReadInteger('Setup', 'CanDropGold', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropGold', g_Config.nCanDropGold);
  g_Config.nCanDropGold := Config.ReadInteger('Setup', 'CanDropGold', g_Config.nCanDropGold);

  if Config.ReadInteger('Setup', 'CanDropPrice', -1) < 0 then
    Config.WriteInteger('Setup', 'CanDropPrice', g_Config.nCanDropPrice);
  g_Config.nCanDropPrice := Config.ReadInteger('Setup', 'CanDropPrice', g_Config.nCanDropPrice);

  nLoadInteger := Config.ReadInteger('Setup', 'SendCustemMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SendCustemMsg', g_Config.boSendCustemMsg)
  else
    g_Config.boSendCustemMsg := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'SubkMasterSendMsg', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'SubkMasterSendMsg', g_Config.boSubkMasterSendMsg)
  else
    g_Config.boSubkMasterSendMsg := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'SuperRepairPriceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SuperRepairPriceRate', g_Config.nSuperRepairPriceRate);
  g_Config.nSuperRepairPriceRate := Config.ReadInteger('Setup', 'SuperRepairPriceRate', g_Config.nSuperRepairPriceRate);

  if Config.ReadInteger('Setup', 'RepairItemDecDura', -1) < 0 then
    Config.WriteInteger('Setup', 'RepairItemDecDura', g_Config.nRepairItemDecDura);
  g_Config.nRepairItemDecDura := Config.ReadInteger('Setup', 'RepairItemDecDura', g_Config.nRepairItemDecDura);
  if g_Config.nRepairItemDecDura=0 then g_Config.nRepairItemDecDura:=30;
  
  if Config.ReadInteger('Setup', 'DieScatterBag', -1) < 0 then
    Config.WriteBool('Setup', 'DieScatterBag', g_Config.boDieScatterBag);
  g_Config.boDieScatterBag := Config.ReadBool('Setup', 'DieScatterBag', g_Config.boDieScatterBag);

  if Config.ReadInteger('Setup', 'DieScatterBagRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieScatterBagRate', g_Config.nDieScatterBagRate);
  g_Config.nDieScatterBagRate := Config.ReadInteger('Setup', 'DieScatterBagRate', g_Config.nDieScatterBagRate);

  if Config.ReadInteger('Setup', 'DieRedScatterBagAll', -1) < 0 then
    Config.WriteBool('Setup', 'DieRedScatterBagAll', g_Config.boDieRedScatterBagAll);
  g_Config.boDieRedScatterBagAll := Config.ReadBool('Setup', 'DieRedScatterBagAll', g_Config.boDieRedScatterBagAll);

  if Config.ReadInteger('Setup', 'DieDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieDropUseItemRate', g_Config.nDieDropUseItemRate);
  g_Config.nDieDropUseItemRate := Config.ReadInteger('Setup', 'DieDropUseItemRate', g_Config.nDieDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieRedDropUseItemRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DieRedDropUseItemRate', g_Config.nDieRedDropUseItemRate);
  g_Config.nDieRedDropUseItemRate := Config.ReadInteger('Setup', 'DieRedDropUseItemRate', g_Config.nDieRedDropUseItemRate);

  if Config.ReadInteger('Setup', 'DieDropGold', -1) < 0 then
    Config.WriteBool('Setup', 'DieDropGold', g_Config.boDieDropGold);
  g_Config.boDieDropGold := Config.ReadBool('Setup', 'DieDropGold', g_Config.boDieDropGold);

  if Config.ReadInteger('Setup', 'KillByHumanDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByHumanDropUseItem', g_Config.boKillByHumanDropUseItem);
  g_Config.boKillByHumanDropUseItem := Config.ReadBool('Setup', 'KillByHumanDropUseItem', g_Config.boKillByHumanDropUseItem);

  if Config.ReadInteger('Setup', 'KillByMonstDropUseItem', -1) < 0 then
    Config.WriteBool('Setup', 'KillByMonstDropUseItem', g_Config.boKillByMonstDropUseItem);
  g_Config.boKillByMonstDropUseItem := Config.ReadBool('Setup', 'KillByMonstDropUseItem', g_Config.boKillByMonstDropUseItem);

  if Config.ReadInteger('Setup', 'KickExpireHuman', -1) < 0 then
    Config.WriteBool('Setup', 'KickExpireHuman', g_Config.boKickExpireHuman);
  g_Config.boKickExpireHuman := Config.ReadBool('Setup', 'KickExpireHuman', g_Config.boKickExpireHuman);

  if Config.ReadInteger('Setup', 'GuildRankNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildRankNameLen', g_Config.nGuildRankNameLen);
  g_Config.nGuildRankNameLen := Config.ReadInteger('Setup', 'GuildRankNameLen', g_Config.nGuildRankNameLen);

  if Config.ReadInteger('Setup', 'GuildNameLen', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildNameLen', g_Config.nGuildNameLen);
  g_Config.nGuildNameLen := Config.ReadInteger('Setup', 'GuildNameLen', g_Config.nGuildNameLen);

  if Config.ReadInteger('Setup', 'GuildMemberMaxLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'GuildMemberMaxLimit', g_Config.nGuildMemberMaxLimit);
  g_Config.nGuildMemberMaxLimit := Config.ReadInteger('Setup', 'GuildMemberMaxLimit', g_Config.nGuildMemberMaxLimit);


  if Config.ReadInteger('Setup', 'AttackPosionRate', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionRate', g_Config.nAttackPosionRate);
  g_Config.nAttackPosionRate := Config.ReadInteger('Setup', 'AttackPosionRate', g_Config.nAttackPosionRate);

  if Config.ReadInteger('Setup', 'AttackPosionTime', -1) < 0 then
    Config.WriteInteger('Setup', 'AttackPosionTime', g_Config.nAttackPosionTime);
  g_Config.nAttackPosionTime := Config.ReadInteger('Setup', 'AttackPosionTime', g_Config.nAttackPosionTime);

  if Config.ReadInteger('Setup', 'RevivalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RevivalTime', g_Config.dwRevivalTime);
  g_Config.dwRevivalTime := Config.ReadInteger('Setup', 'RevivalTime', g_Config.dwRevivalTime);

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanDupObj', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanDupObj', g_Config.boUserMoveCanDupObj)
  else
    g_Config.boUserMoveCanDupObj := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveCanOnItem', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'UserMoveCanOnItem', g_Config.boUserMoveCanOnItem)
  else
    g_Config.boUserMoveCanOnItem := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'UserMoveTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'UserMoveTime', g_Config.dwUserMoveTime)
  else
    g_Config.dwUserMoveTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostExpRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostExpRate', g_Config.dwPKDieLostExpRate)
  else
    g_Config.dwPKDieLostExpRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PKDieLostLevelRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PKDieLostLevelRate', g_Config.nPKDieLostLevelRate)
  else
    g_Config.nPKDieLostLevelRate := nLoadInteger;
  if g_Config.nPKDieLostLevelRate=0 then g_Config.nPKDieLostLevelRate:=2000;

  if Config.ReadInteger('Setup', 'PKFlagNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKFlagNameColor', g_Config.btPKFlagNameColor);
  g_Config.btPKFlagNameColor := Config.ReadInteger('Setup', 'PKFlagNameColor', g_Config.btPKFlagNameColor);

  if Config.ReadInteger('Setup', 'AllyAndGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'AllyAndGuildNameColor', g_Config.btAllyAndGuildNameColor);
  g_Config.btAllyAndGuildNameColor := Config.ReadInteger('Setup', 'AllyAndGuildNameColor', g_Config.btAllyAndGuildNameColor);

  if Config.ReadInteger('Setup', 'WarGuildNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'WarGuildNameColor', g_Config.btWarGuildNameColor);
  g_Config.btWarGuildNameColor := Config.ReadInteger('Setup', 'WarGuildNameColor', g_Config.btWarGuildNameColor);

  if Config.ReadInteger('Setup', 'InFreePKAreaNameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'InFreePKAreaNameColor', g_Config.btInFreePKAreaNameColor);
  g_Config.btInFreePKAreaNameColor := Config.ReadInteger('Setup', 'InFreePKAreaNameColor', g_Config.btInFreePKAreaNameColor);

  if Config.ReadInteger('Setup', 'PKLevel1NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel1NameColor', g_Config.btPKLevel1NameColor);
  g_Config.btPKLevel1NameColor := Config.ReadInteger('Setup', 'PKLevel1NameColor', g_Config.btPKLevel1NameColor);

  if Config.ReadInteger('Setup', 'PKLevel2NameColor', -1) < 0 then
    Config.WriteInteger('Setup', 'PKLevel2NameColor', g_Config.btPKLevel2NameColor);
  g_Config.btPKLevel2NameColor := Config.ReadInteger('Setup', 'PKLevel2NameColor', g_Config.btPKLevel2NameColor);

  if Config.ReadInteger('Setup', 'SpiritMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'SpiritMutiny', g_Config.boSpiritMutiny);
  g_Config.boSpiritMutiny := Config.ReadBool('Setup', 'SpiritMutiny', g_Config.boSpiritMutiny);





  if Config.ReadInteger('EVIL', 'EvilAddItemVal', -1) < 0 then
    Config.WriteBool('EVIL', 'EvilAddItemVal', g_Config.boEvilAddItemVal);
  g_Config.boEvilAddItemVal := Config.ReadBool('EVIL', 'EvilAddItemVal', g_Config.boEvilAddItemVal);

  if Config.ReadInteger('EVIL', 'KillMonAddZMZRate', -1) < 0 then
    Config.WriteInteger('EVIL', 'KillMonAddZMZRate', g_Config.nKillMonAddZMZRate);
  g_Config.nKillMonAddZMZRate := Config.ReadInteger('EVIL', 'KillMonAddZMZRate', g_Config.nKillMonAddZMZRate);

  if Config.ReadInteger('EVIL', 'KillMonAddZMZMax', -1) < 0 then
    Config.WriteInteger('EVIL', 'KillMonAddZMZMax', g_Config.nKillMonAddZMZMax);
  g_Config.nKillMonAddZMZMax := Config.ReadInteger('EVIL', 'KillMonAddZMZMax', g_Config.nKillMonAddZMZMax);

  if Config.ReadInteger('EVIL', 'AddDarkofZMZ', -1) < 0 then
    Config.WriteInteger('EVIL', 'AddDarkofZMZ', g_Config.nAddDarkofZMZ);
  g_Config.nAddDarkofZMZ := Config.ReadInteger('EVIL', 'AddDarkofZMZ', g_Config.nAddDarkofZMZ);

    if Config.ReadInteger('EVIL', 'nAddDarkofValue', -1) < 0 then
    Config.WriteInteger('EVIL', 'nAddDarkofValue', g_Config.nAddDarkofValue);
  g_Config.nAddDarkofValue := Config.ReadInteger('EVIL', 'nAddDarkofValue', g_Config.nAddDarkofValue);

  if Config.ReadInteger('EVIL', 'nDecZMZSpeed', -1) < 0 then
    Config.WriteInteger('EVIL', 'nDecZMZSpeed', g_Config.nDecZMZSpeed);
  g_Config.nDecZMZSpeed := Config.ReadInteger('EVIL', 'nDecZMZSpeed', g_Config.nDecZMZSpeed);

    if Config.ReadInteger('EVIL', 'AddDarkofRandValue', -1) < 0 then
    Config.WriteInteger('EVIL', 'AddDarkofRandValue', g_Config.nAddDarkofRandValue);
  g_Config.nAddDarkofRandValue := Config.ReadInteger('EVIL', 'AddDarkofRandValue', g_Config.nAddDarkofRandValue);


  for I := 0 to 4 do
  Begin
    if Config.ReadInteger('EVIL', 'EvilDc1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilDc1'+inttostr(i), g_Config.nEvilDc1[i]);
    g_Config.nEvilDc1[i] := Config.ReadInteger('EVIL', 'EvilDc1'+inttostr(i), g_Config.nEvilDc1[i]);

     if Config.ReadInteger('EVIL', 'EvilDc2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilDc2'+inttostr(i), g_Config.nEvilDc2[i]);
    g_Config.nEvilDc2[i] := Config.ReadInteger('EVIL', 'EvilDc2'+inttostr(i), g_Config.nEvilDc2[i]);


    if Config.ReadInteger('EVIL', 'EvilMc1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilMc1'+inttostr(i), g_Config.nEvilMc1[i]);
    g_Config.nEvilMc1[i] := Config.ReadInteger('EVIL', 'EvilMc1'+inttostr(i), g_Config.nEvilMc1[i]);

     if Config.ReadInteger('EVIL', 'EvilMc2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilMc2'+inttostr(i), g_Config.nEvilMc2[i]);
    g_Config.nEvilMc2[i] := Config.ReadInteger('EVIL', 'EvilMc2'+inttostr(i), g_Config.nEvilMc2[i]);


    if Config.ReadInteger('EVIL', 'EvilSc1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilSc1'+inttostr(i), g_Config.nEvilSc1[i]);
    g_Config.nEvilSc1[i] := Config.ReadInteger('EVIL', 'EvilSc1'+inttostr(i), g_Config.nEvilSc1[i]);

     if Config.ReadInteger('EVIL', 'EvilSc2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilSc2'+inttostr(i), g_Config.nEvilSc2[i]);
    g_Config.nEvilSc2[i] := Config.ReadInteger('EVIL', 'EvilSc2'+inttostr(i), g_Config.nEvilSc2[i]);


 if Config.ReadInteger('EVIL', 'EvilDcRate1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilDcRate1'+inttostr(i), g_Config.nEvilDcRate1[i]);
    g_Config.nEvilDcRate1[i] := Config.ReadInteger('EVIL', 'EvilDcRate1'+inttostr(i), g_Config.nEvilDcRate1[i]);

     if Config.ReadInteger('EVIL', 'EvilDcRate2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilDcRate2'+inttostr(i), g_Config.nEvilDcRate2[i]);
    g_Config.nEvilDcRate2[i] := Config.ReadInteger('EVIL', 'EvilDcRate2'+inttostr(i), g_Config.nEvilDcRate2[i]);


    if Config.ReadInteger('EVIL', 'EvilMcRate1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilMcRate1'+inttostr(i), g_Config.nEvilMcRate1[i]);
    g_Config.nEvilMcRate1[i] := Config.ReadInteger('EVIL', 'EvilMcRate1'+inttostr(i), g_Config.nEvilMcRate1[i]);

     if Config.ReadInteger('EVIL', 'EvilMcRate2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilMcRate2'+inttostr(i), g_Config.nEvilMcRate2[i]);
    g_Config.nEvilMcRate2[i] := Config.ReadInteger('EVIL', 'EvilMcRate2'+inttostr(i), g_Config.nEvilMcRate2[i]);


    if Config.ReadInteger('EVIL', 'EvilScRate1'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilScRate1'+inttostr(i), g_Config.nEvilScRate1[i]);
    g_Config.nEvilSc1[i] := Config.ReadInteger('EVIL', 'EvilSc1'+inttostr(i), g_Config.nEvilScRate1[i]);

     if Config.ReadInteger('EVIL', 'EvilScRate2'+inttostr(i), -1) < 0 then
    Config.WriteInteger('EVIL', 'EvilSc2Rate'+inttostr(i), g_Config.nEvilScRate2[i]);
    g_Config.nEvilScRate2[i] := Config.ReadInteger('EVIL', 'EvilScRate2'+inttostr(i), g_Config.nEvilScRate2[i]);




  End;  

  if Config.ReadInteger('Setup', 'SpiritMutinyTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SpiritMutinyTime', g_Config.dwSpiritMutinyTime);
  g_Config.dwSpiritMutinyTime := Config.ReadInteger('Setup', 'SpiritMutinyTime', g_Config.dwSpiritMutinyTime);

  if Config.ReadInteger('Setup', 'SpiritPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SpiritPowerRate', g_Config.nSpiritPowerRate);
  g_Config.nSpiritPowerRate := Config.ReadInteger('Setup', 'SpiritPowerRate', g_Config.nSpiritPowerRate);

  if Config.ReadInteger('Setup', 'MasterDieMutiny', -1) < 0 then
    Config.WriteBool('Setup', 'MasterDieMutiny', g_Config.boMasterDieMutiny);
  g_Config.boMasterDieMutiny := Config.ReadBool('Setup', 'MasterDieMutiny', g_Config.boMasterDieMutiny);

  if Config.ReadInteger('Setup', 'MasterDieMutinyRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyRate', g_Config.nMasterDieMutinyRate);
  g_Config.nMasterDieMutinyRate := Config.ReadInteger('Setup', 'MasterDieMutinyRate', g_Config.nMasterDieMutinyRate);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinyPower);
  g_Config.nMasterDieMutinyPower := Config.ReadInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinyPower);

  if Config.ReadInteger('Setup', 'MasterDieMutinyPower', -1) < 0 then
    Config.WriteInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinySpeed);
  g_Config.nMasterDieMutinySpeed := Config.ReadInteger('Setup', 'MasterDieMutinyPower', g_Config.nMasterDieMutinySpeed);
  if g_Config.nMasterDieMutinySpeed=0 then
     g_Config.nMasterDieMutinySpeed:=1;
  
  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColor', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'BBMonAutoChangeColor', g_Config.boBBMonAutoChangeColor)
  else
    g_Config.boBBMonAutoChangeColor := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'BBMonAutoChangeColorTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'BBMonAutoChangeColorTime', g_Config.dwBBMonAutoChangeColorTime)
  else
    g_Config.dwBBMonAutoChangeColorTime := nLoadInteger;


  if Config.ReadInteger('Setup', 'OldClientShowHiLevel', -1) < 0 then
    Config.WriteBool('Setup', 'OldClientShowHiLevel', g_Config.boOldClientShowHiLevel);
  g_Config.boOldClientShowHiLevel := Config.ReadBool('Setup', 'OldClientShowHiLevel', g_Config.boOldClientShowHiLevel);

  if Config.ReadInteger('Setup', 'ShowScriptActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowScriptActionMsg', g_Config.boShowScriptActionMsg);
  g_Config.boShowScriptActionMsg := Config.ReadBool('Setup', 'ShowScriptActionMsg', g_Config.boShowScriptActionMsg);

  if Config.ReadInteger('Setup', 'RunSocketDieLoopLimit', -1) < 0 then
    Config.WriteInteger('Setup', 'RunSocketDieLoopLimit', g_Config.nRunSocketDieLoopLimit);
  g_Config.nRunSocketDieLoopLimit := Config.ReadInteger('Setup', 'RunSocketDieLoopLimit', g_Config.nRunSocketDieLoopLimit);

  if Config.ReadInteger('RecallEvil', 'CanRecallEvil', -1) < 0 then
    Config.WriteBool('RecallEvil', 'CanRecallEvil', True);
  g_Config.CallEvilConf.boCanRecallEvil := Config.ReadBool('RecallEvil', 'CanRecallEvil', g_Config.CallEvilConf.boCanRecallEvil);

  if Config.ReadInteger('RecallEvil', 'MaxRecallEvilCount', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'MaxRecallEvilCount', 5);
  g_Config.CallEvilConf.nMaxRecallEvilCount := Config.ReadInteger('RecallEvil', 'MaxRecallEvilCount', 5);

  if Config.ReadInteger('RecallEvil', 'RecallEvilRate', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'RecallEvilRate', 100);
  g_Config.CallEvilConf.nRecallEvilRate := Config.ReadInteger('RecallEvil', 'RecallEvilRate', g_Config.CallEvilConf.nRecallEvilRate);

  if Config.ReadInteger('RecallEvil', 'AntiEvilDontMoveTime', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'AntiEvilDontMoveTime', 13);
  g_Config.CallEvilConf.nAntiEvilDontMoveTime := Config.ReadInteger('RecallEvil', 'AntiEvilDontMoveTime', g_Config.CallEvilConf.nAntiEvilDontMoveTime);

  if Config.ReadInteger('RecallEvil', 'EvilCtrlMaxPower', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilCtrlMaxPower', 400);
  g_Config.CallEvilConf.nEvilCtrlMaxPower := Config.ReadInteger('RecallEvil', 'EvilCtrlMaxPower', g_Config.CallEvilConf.nEvilCtrlMaxPower);

  if Config.ReadInteger('RecallEvil', 'EvilCtrl10SecDecPowert', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilCtrl10SecDecPowert', 3);
  g_Config.CallEvilConf.nEvilCtrl10SecDecPower := Config.ReadInteger('RecallEvil', 'EvilCtrl10SecDecPower', g_Config.CallEvilConf.nEvilCtrl10SecDecPower);

  if Config.ReadInteger('RecallEvil', 'EvilHellGifMaxValue', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilHellGifMaxValue', 30);
  g_Config.CallEvilConf.nEvilHellGifMaxValue := Config.ReadInteger('RecallEvil', 'EvilHellGifMaxValue', g_Config.CallEvilConf.nEvilHellGifMaxValue);

  if Config.ReadInteger('RecallEvil', 'EvilUniQueSkillDecPower', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilUniQueSkillDecPower', 3);
  g_Config.CallEvilConf.nEvilUniQueSkillDecPower := Config.ReadInteger('RecallEvil', 'EvilUniQueSkillDecPower', g_Config.CallEvilConf.nEvilUniQueSkillDecPower);

  if Config.ReadInteger('RecallEvil', 'EvilUniQueSkillRate', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilUniQueSkillRate',10);
  g_Config.CallEvilConf.nEvilUniQueSkillRate := Config.ReadInteger('RecallEvil', 'EvilUniQueSkillRate', g_Config.CallEvilConf.nEvilUniQueSkillRate);

  if Config.ReadInteger('RecallEvil', 'EvilUniQueSkillDontMoveTime', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'EvilUniQueSkillDontMoveTime', 5);
  g_Config.CallEvilConf.nEvilUniQueSkillDontMoveTime := Config.ReadInteger('RecallEvil', 'EvilUniQueSkillDontMoveTime', g_Config.CallEvilConf.nEvilUniQueSkillDontMoveTime);

  if Config.ReadInteger('RecallEvil', 'UseEvilUniQueSkillTick', -1) < 0 then
    Config.WriteInteger('RecallEvil', 'UseEvilUniQueSkillTick', 15);
  g_Config.CallEvilConf.nUseEvilUniQueSkillTick := Config.ReadInteger('RecallEvil', 'UseEvilUniQueSkillTick', g_Config.CallEvilConf.nUseEvilUniQueSkillTick);


  if Config.ReadInteger('Setup', 'ThreadRun', -1) < 0 then
    Config.WriteBool('Setup', 'ThreadRun', g_Config.boThreadRun);
  g_Config.boThreadRun := Config.ReadBool('Setup', 'ThreadRun', g_Config.boThreadRun);

  if Config.ReadInteger('Setup', 'DeathColorEffect', -1) < 0 then
    Config.WriteInteger('Setup', 'DeathColorEffect', g_Config.ClientConf.btDieColor);
  g_Config.ClientConf.btDieColor := Config.ReadInteger('Setup', 'DeathColorEffect', g_Config.ClientConf.btDieColor);

  if Config.ReadInteger('Setup', 'ParalyCanRun', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanRun', g_Config.ClientConf.boParalyCanRun);
  g_Config.ClientConf.boParalyCanRun := Config.ReadBool('Setup', 'ParalyCanRun', g_Config.ClientConf.boParalyCanRun);

  if Config.ReadInteger('Setup', 'ParalyCanWalk', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanWalk', g_Config.ClientConf.boParalyCanWalk);
  g_Config.ClientConf.boParalyCanWalk := Config.ReadBool('Setup', 'ParalyCanWalk', g_Config.ClientConf.boParalyCanWalk);

  if Config.ReadInteger('Setup', 'ParalyCanHit', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanHit', g_Config.ClientConf.boParalyCanHit);
  g_Config.ClientConf.boParalyCanHit := Config.ReadBool('Setup', 'ParalyCanHit', g_Config.ClientConf.boParalyCanHit);

  if Config.ReadInteger('Setup', 'ParalyCanSpell', -1) < 0 then
    Config.WriteBool('Setup', 'ParalyCanSpell', g_Config.ClientConf.boParalyCanSpell);
  g_Config.ClientConf.boParalyCanSpell := Config.ReadBool('Setup', 'ParalyCanSpell', g_Config.ClientConf.boParalyCanSpell);

  if Config.ReadInteger('Setup', 'ShowExceptionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowExceptionMsg', g_Config.boShowExceptionMsg);
  g_Config.boShowExceptionMsg := Config.ReadBool('Setup', 'ShowExceptionMsg', g_Config.boShowExceptionMsg);

  if Config.ReadInteger('Setup', 'ShowPreFixMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ShowPreFixMsg', g_Config.boShowPreFixMsg);
  g_Config.boShowPreFixMsg := Config.ReadBool('Setup', 'ShowPreFixMsg', g_Config.boShowPreFixMsg);

  if Config.ReadInteger('Setup', 'MagTurnUndeadLevel', -1) < 0 then
    Config.WriteInteger('Setup', 'MagTurnUndeadLevel', g_Config.nMagTurnUndeadLevel);
  g_Config.nMagTurnUndeadLevel := Config.ReadInteger('Setup', 'MagTurnUndeadLevel', g_Config.nMagTurnUndeadLevel);

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingLevel', g_Config.nMagTammingLevel)
  else
    g_Config.nMagTammingLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetLevel', g_Config.nMagTammingTargetLevel)
  else
    g_Config.nMagTammingTargetLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingTargetHPRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingTargetHPRate', g_Config.nMagTammingHPRate)
  else
    g_Config.nMagTammingHPRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagTammingCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagTammingCount', g_Config.nMagTammingCount)
  else
    g_Config.nMagTammingCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitRandRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitRandRate', g_Config.nMabMabeHitRandRate)
  else
    g_Config.nMabMabeHitRandRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMinLvLimit', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMinLvLimit', g_Config.nMabMabeHitMinLvLimit)
  else
    g_Config.nMabMabeHitMinLvLimit := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitSucessRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitSucessRate', g_Config.nMabMabeHitSucessRate)
  else
    g_Config.nMabMabeHitSucessRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MabMabeHitMabeTimeRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MabMabeHitMabeTimeRate', g_Config.nMabMabeHitMabeTimeRate)
  else
    g_Config.nMabMabeHitMabeTimeRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'MagicAttackRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'MagicAttackRage', g_Config.nMagicAttackRage)
  else
    g_Config.nMagicAttackRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DropItemRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'DropItemRage', g_Config.nDropItemRage)
  else
    g_Config.nDropItemRage := nLoadInteger;



  nLoadInteger := Config.ReadInteger('Setup', 'AmyOunsulPoint', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'AmyOunsulPoint', g_Config.nAmyOunsulPoint)
  else
    g_Config.nAmyOunsulPoint := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'DisableInSafeZoneFireCross', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'DisableInSafeZoneFireCross', g_Config.boDisableInSafeZoneFireCross)
  else
    g_Config.boDisableInSafeZoneFireCross := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'GroupMbAttackPlayObject', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'GroupMbAttackPlayObject', g_Config.boGroupMbAttackPlayObject)
  else
    g_Config.boGroupMbAttackPlayObject := nLoadInteger = 1;


  nLoadInteger := Config.ReadInteger('Setup', 'PosionDecHealthTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDecHealthTime', g_Config.dwPosionDecHealthTime)
  else
    g_Config.dwPosionDecHealthTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'PosionDamagarmor', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'PosionDamagarmor', g_Config.nPosionDamagarmor)
  else
    g_Config.nPosionDamagarmor := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'LimitSwordLong', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'LimitSwordLong', g_Config.boLimitSwordLong)
  else
    g_Config.boLimitSwordLong := not (nLoadInteger = 0);


  nLoadInteger := Config.ReadInteger('Setup', 'Skill78PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill78PowerRate', g_Config.nSkill78PowerRate)
  else
    g_Config.nSkill78PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill78SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill78SpecialPower', g_Config.nSkill78SpecialPower)
  else
    g_Config.nSkill78SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill78SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill78SpecialPower', g_Config.boSkill78SpecialPower)
  else
    g_Config.boSkill78SpecialPower := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill79PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill79PowerRate', g_Config.nSkill79PowerRate)
  else
    g_Config.nSkill79PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill91MonLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill91MonLevel', g_Config.nSkill91MonLevel)
  else
    g_Config.nSkill91MonLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill91Rate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill91Rate', g_Config.nSkill91Rate)
  else
    g_Config.nSkill91Rate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill91Power', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill91Power', g_Config.nSkill91Power)
  else
    g_Config.nSkill91Power := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill91HumLevel', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill91HumLevel', g_Config.nSkill91HumLevel)
  else
    g_Config.nSkill91HumLevel := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill91Hum', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'Skill91Hum', g_Config.boSkill91HumLevel)
  else
    g_Config.boSkill91HumLevel := nLoadInteger=1;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill79SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill79SpecialPower', g_Config.nSkill79SpecialPower)
  else
    g_Config.nSkill79SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill79SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill79SpecialPower', g_Config.boSkill79SpecialPower)
  else
    g_Config.boSkill79SpecialPower := nLoadInteger = 1;


  nLoadInteger := Config.ReadInteger('Setup', 'Skill80PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill80PowerRate', g_Config.nSkill80PowerRate)
  else
    g_Config.nSkill80PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill80SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill80SpecialPower', g_Config.nSkill80SpecialPower)
  else
    g_Config.nSkill80SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill80SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill80SpecialPower', g_Config.boSkill80SpecialPower)
  else
    g_Config.boSkill80SpecialPower := nLoadInteger = 1;



  nLoadInteger := Config.ReadInteger('Setup', 'Skill81PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill81PowerRate', g_Config.nSkill81PowerRate)
  else
    g_Config.nSkill81PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill81SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill81SpecialPower', g_Config.nSkill81SpecialPower)
  else
    g_Config.nSkill81SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill81SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill81SpecialPower', g_Config.boSkill81SpecialPower)
  else
    g_Config.boSkill81SpecialPower := nLoadInteger = 1;


  nLoadInteger := Config.ReadInteger('Setup', 'Skill83PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill83PowerRate', g_Config.nSkill83PowerRate)
  else
    g_Config.nSkill83PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill83SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill83SpecialPower', g_Config.nSkill83SpecialPower)
  else
    g_Config.nSkill83SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill83SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill83SpecialPower', g_Config.boSkill83SpecialPower)
  else
    g_Config.boSkill83SpecialPower := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill85PowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill85PowerRate', g_Config.nSkill85PowerRate)
  else
    g_Config.nSkill85PowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'Skill85SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'Skill85SpecialPower', g_Config.nSkill85SpecialPower)
  else
    g_Config.nSkill85SpecialPower := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'boSkill85SpecialPower', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boSkill85SpecialPower', g_Config.boSkill85SpecialPower)
  else
    g_Config.boSkill85SpecialPower := nLoadInteger = 1;

  sLoadString := Config.ReadString('Setup', 'Skill85Mon1', '');
  if sLoadString = '' then
    Config.WriteString('Setup', 'Skill85Mon1', g_Config.sSkill85Mon1)
  else
    g_Config.sSkill85Mon1 := sLoadString;

  sLoadString := Config.ReadString('Setup', 'Skill85Mon2', '');
  if sLoadString = '' then
    Config.WriteString('Setup', 'Skill85Mon2', g_Config.sSkill85Mon2)
  else
    g_Config.sSkill85Mon2 := sLoadString;
  sLoadString := Config.ReadString('Setup', 'Skill85Mon3', '');
  if sLoadString = '' then
    Config.WriteString('Setup', 'Skill85Mon3', g_Config.sSkill85Mon3)
  else
    g_Config.sSkill85Mon3:= sLoadString;
  sLoadString := Config.ReadString('Setup', 'Skill85Mon4', '');
  if sLoadString = '' then
    Config.WriteString('Setup', 'Skill85Mon4', g_Config.sSkill85Mon4)
  else
    g_Config.sSkill85Mon4 := sLoadString;
  sLoadString := Config.ReadString('Setup', 'Skill85Mon5', '');
  if sLoadString = '' then
    Config.WriteString('Setup', 'Skill85Mon5', g_Config.sSkill85Mon5)
  else
    g_Config.sSkill85Mon5 := sLoadString;
  nLoadInteger := Config.ReadInteger('Setup', 'SwordLongPowerRate', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SwordLongPowerRate', g_Config.nSwordLongPowerRate)
  else
    g_Config.nSwordLongPowerRate := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'FireBoomRage', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'FireBoomRage', g_Config.nFireBoomRage)
  else
    g_Config.nFireBoomRage := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'SnowWindRange', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SnowWindRange', g_Config.nSnowWindRange)
  else
    g_Config.nSnowWindRange := nLoadInteger;



  if Config.ReadInteger('Setup', 'ElecBlizzardRange', -1) < 0 then
    Config.WriteInteger('Setup', 'ElecBlizzardRange', g_Config.nElecBlizzardRange);
  g_Config.nElecBlizzardRange := Config.ReadInteger('Setup', 'ElecBlizzardRange', g_Config.nElecBlizzardRange);

  if Config.ReadInteger('Setup', 'HumanLevelDiffer', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanLevelDiffer', g_Config.nHumanLevelDiffer);
  g_Config.nHumanLevelDiffer := Config.ReadInteger('Setup', 'HumanLevelDiffer', g_Config.nHumanLevelDiffer);

  if Config.ReadInteger('Setup', 'KillHumanWinLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinLevel', g_Config.boKillHumanWinLevel);
  g_Config.boKillHumanWinLevel := Config.ReadBool('Setup', 'KillHumanWinLevel', g_Config.boKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevel', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostLevel', g_Config.boKilledLostLevel);
  g_Config.boKilledLostLevel := Config.ReadBool('Setup', 'KilledLostLevel', g_Config.boKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinLevelPoint', g_Config.nKillHumanWinLevel);
  g_Config.nKillHumanWinLevel := Config.ReadInteger('Setup', 'KillHumanWinLevelPoint', g_Config.nKillHumanWinLevel);

  if Config.ReadInteger('Setup', 'KilledLostLevelPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KilledLostLevelPoint', g_Config.nKilledLostLevel);
  g_Config.nKilledLostLevel := Config.ReadInteger('Setup', 'KilledLostLevelPoint', g_Config.nKilledLostLevel);

  if Config.ReadInteger('Setup', 'KillHumanWinExp', -1) < 0 then
    Config.WriteBool('Setup', 'KillHumanWinExp', g_Config.boKillHumanWinExp);
  g_Config.boKillHumanWinExp := Config.ReadBool('Setup', 'KillHumanWinExp', g_Config.boKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KilledLostExp', -1) < 0 then
    Config.WriteBool('Setup', 'KilledLostExp', g_Config.boKilledLostExp);
  g_Config.boKilledLostExp := Config.ReadBool('Setup', 'KilledLostExp', g_Config.boKilledLostExp);

  if Config.ReadInteger('Setup', 'KillHumanWinExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanWinExpPoint', g_Config.nKillHumanWinExp);
  g_Config.nKillHumanWinExp := Config.ReadInteger('Setup', 'KillHumanWinExpPoint', g_Config.nKillHumanWinExp);

  if Config.ReadInteger('Setup', 'KillHumanLostExpPoint', -1) < 0 then
    Config.WriteInteger('Setup', 'KillHumanLostExpPoint', g_Config.nKillHumanLostExp);
  g_Config.nKillHumanLostExp := Config.ReadInteger('Setup', 'KillHumanLostExpPoint', g_Config.nKillHumanLostExp);

  if Config.ReadInteger('Setup', 'MonsterPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MonsterPowerRate', g_Config.nMonsterPowerRate);
  g_Config.nMonsterPowerRate := Config.ReadInteger('Setup', 'MonsterPowerRate', g_Config.nMonsterPowerRate);

  if Config.ReadInteger('Setup', 'ItemsPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsPowerRate', g_Config.nItemsPowerRate);
  g_Config.nItemsPowerRate := Config.ReadInteger('Setup', 'ItemsPowerRate', g_Config.nItemsPowerRate);

  if Config.ReadInteger('Setup', 'ItemsACPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemsACPowerRate', g_Config.nItemsACPowerRate);
  g_Config.nItemsACPowerRate := Config.ReadInteger('Setup', 'ItemsACPowerRate', g_Config.nItemsACPowerRate);

  if Config.ReadInteger('Setup', 'SendOnlineCount', -1) < 0 then
    Config.WriteBool('Setup', 'SendOnlineCount', g_Config.boSendOnlineCount);
  g_Config.boSendOnlineCount := Config.ReadBool('Setup', 'SendOnlineCount', g_Config.boSendOnlineCount);

  if Config.ReadInteger('Setup', 'SendOnlineCountRate', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineCountRate', g_Config.nSendOnlineCountRate);
  g_Config.nSendOnlineCountRate := Config.ReadInteger('Setup', 'SendOnlineCountRate', g_Config.nSendOnlineCountRate);

  if Config.ReadInteger('Setup', 'SendOnlineTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SendOnlineTime', g_Config.dwSendOnlineTime);
  g_Config.dwSendOnlineTime := Config.ReadInteger('Setup', 'SendOnlineTime', g_Config.dwSendOnlineTime);


  if Config.ReadInteger('Setup', 'SaveHumanRcdTime', -1) < 0 then
    Config.WriteInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);
  g_Config.dwSaveHumanRcdTime := Config.ReadInteger('Setup', 'SaveHumanRcdTime', g_Config.dwSaveHumanRcdTime);

  if Config.ReadInteger('Setup', 'HumanFreeDelayTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HumanFreeDelayTime', g_Config.dwHumanFreeDelayTime);
  //g_Config.dwHumanFreeDelayTime:=Config.ReadInteger('Setup','HumanFreeDelayTime',g_Config.dwHumanFreeDelayTime);

  if Config.ReadInteger('Setup', 'MakeGhostTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);
  g_Config.dwMakeGhostTime := Config.ReadInteger('Setup', 'MakeGhostTime', g_Config.dwMakeGhostTime);

  if Config.ReadInteger('Setup', 'ClearDropOnFloorItemTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ClearDropOnFloorItemTime', g_Config.dwClearDropOnFloorItemTime);
  g_Config.dwClearDropOnFloorItemTime := Config.ReadInteger('Setup', 'ClearDropOnFloorItemTime', g_Config.dwClearDropOnFloorItemTime);

  if Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', -1) < 0 then
    Config.WriteInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);
  g_Config.dwFloorItemCanPickUpTime := Config.ReadInteger('Setup', 'FloorItemCanPickUpTime', g_Config.dwFloorItemCanPickUpTime);

  if Config.ReadInteger('Setup', 'PasswordLockSystem', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSystem', g_Config.boPasswordLockSystem);
  g_Config.boPasswordLockSystem := Config.ReadBool('Setup', 'PasswordLockSystem', g_Config.boPasswordLockSystem);

  if Config.ReadInteger('Setup', 'PasswordLockDealAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockDealAction', g_Config.boLockDealAction);
  g_Config.boLockDealAction := Config.ReadBool('Setup', 'PasswordLockDealAction', g_Config.boLockDealAction);

  if Config.ReadInteger('Setup', 'PasswordLockDropAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockDropAction', g_Config.boLockDropAction);
  g_Config.boLockDropAction := Config.ReadBool('Setup', 'PasswordLockDropAction', g_Config.boLockDropAction);

  if Config.ReadInteger('Setup', 'PasswordLockGetBackItemAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockGetBackItemAction', g_Config.boLockGetBackItemAction);
  g_Config.boLockGetBackItemAction := Config.ReadBool('Setup', 'PasswordLockGetBackItemAction', g_Config.boLockGetBackItemAction);

  if Config.ReadInteger('Setup', 'PasswordLockHumanLogin', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockHumanLogin', g_Config.boLockHumanLogin);
  g_Config.boLockHumanLogin := Config.ReadBool('Setup', 'PasswordLockHumanLogin', g_Config.boLockHumanLogin);

  if Config.ReadInteger('Setup', 'PasswordLockWalkAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockWalkAction', g_Config.boLockWalkAction);
  g_Config.boLockWalkAction := Config.ReadBool('Setup', 'PasswordLockWalkAction', g_Config.boLockWalkAction);

  if Config.ReadInteger('Setup', 'PasswordLockRunAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockRunAction', g_Config.boLockRunAction);
  g_Config.boLockRunAction := Config.ReadBool('Setup', 'PasswordLockRunAction', g_Config.boLockRunAction);

  if Config.ReadInteger('Setup', 'PasswordLockHitAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockHitAction', g_Config.boLockHitAction);
  g_Config.boLockHitAction := Config.ReadBool('Setup', 'PasswordLockHitAction', g_Config.boLockHitAction);

  if Config.ReadInteger('Setup', 'PasswordLockSpellAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSpellAction', g_Config.boLockSpellAction);
  g_Config.boLockSpellAction := Config.ReadBool('Setup', 'PasswordLockSpellAction', g_Config.boLockSpellAction);

  if Config.ReadInteger('Setup', 'PasswordLockSendMsgAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockSendMsgAction', g_Config.boLockSendMsgAction);
  g_Config.boLockSendMsgAction := Config.ReadBool('Setup', 'PasswordLockSendMsgAction', g_Config.boLockSendMsgAction);

  if Config.ReadInteger('Setup', 'PasswordLockUserItemAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockUserItemAction', g_Config.boLockUserItemAction);
  g_Config.boLockUserItemAction := Config.ReadBool('Setup', 'PasswordLockUserItemAction', g_Config.boLockUserItemAction);

  if Config.ReadInteger('Setup', 'PasswordLockInObModeAction', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordLockInObModeAction', g_Config.boLockInObModeAction);
  g_Config.boLockInObModeAction := Config.ReadBool('Setup', 'PasswordLockInObModeAction', g_Config.boLockInObModeAction);

  if Config.ReadInteger('Setup', 'PasswordErrorKick', -1) < 0 then
    Config.WriteBool('Setup', 'PasswordErrorKick', g_Config.boPasswordErrorKick);
  g_Config.boPasswordErrorKick := Config.ReadBool('Setup', 'PasswordErrorKick', g_Config.boPasswordErrorKick);

  if Config.ReadInteger('Setup', 'ShowHpPresent', -1) < 0 then
    Config.WriteBool('Setup', 'ShowHpPresent', g_Config.ShowHpPresent);
  g_Config.ShowHpPresent := Config.ReadBool('Setup', 'ShowHpPresent', g_Config.ShowHpPresent);

  if Config.ReadInteger('Setup', 'OffLineSuper', -1) < 0 then
    Config.WriteBool('Setup', 'OffLineSuper', g_Config.OffLineSuper);
  g_Config.OffLineSuper := Config.ReadBool('Setup', 'OffLineSuper', g_Config.OffLineSuper);

  if Config.ReadInteger('Setup', 'boUsePaihang', -1) < 0 then
    Config.WriteBool('Setup', 'boUsePaihang', g_Config.boUsePaihang);
  g_Config.boUsePaihang := Config.ReadBool('Setup', 'boUsePaihang', g_Config.boUsePaihang);

   if Config.ReadInteger('Setup', 'boUseLingzu', -1) < 0 then
    Config.WriteBool('Setup', 'boUseLingzu', g_Config.boUseLingzu);
  g_Config.boUseLingzu := Config.ReadBool('Setup', 'boUseLingzu', g_Config.boUseLingzu);


  if Config.ReadInteger('Setup', 'boUseSelfDecodeScript', -1) < 0 then
    Config.WriteBool('Setup', 'boUseSelfDecodeScript', g_Config.boUseSelfDecodeScript);
  g_Config.boUseSelfDecodeScript := Config.ReadBool('Setup', 'boUseSelfDecodeScript', g_Config.boUseSelfDecodeScript);





  if Config.ReadInteger('Setup', 'PlayerSkillTree', -1) < 0 then
    Config.WriteBool('Setup', 'PlayerSkillTree', g_Config.PlayerSkillTree);
  g_Config.PlayerSkillTree := Config.ReadBool('Setup', 'PlayerSkillTree', g_Config.PlayerSkillTree);

  if Config.ReadInteger('Setup', 'YSSkillTree', -1) < 0 then
    Config.WriteBool('Setup', 'YSSkillTree', g_Config.YSSkillTree);
  g_Config.YSSkillTree := Config.ReadBool('Setup', 'YSSkillTree', g_Config.YSSkillTree);

  if Config.ReadInteger('Setup', 'ComSkillNoDecVitaLity', -1) < 0 then
    Config.WriteBool('Setup', 'ComSkillNoDecVitaLity', g_Config.ComSkillNoDecVitaLity);
  g_Config.ComSkillNoDecVitaLity := Config.ReadBool('Setup', 'ComSkillNoDecVitaLity', g_Config.ComSkillNoDecVitaLity);
//g_Config.ShowHpPresent
  if Config.ReadInteger('Setup', 'PasswordErrorCountLock', -1) < 0 then
    Config.WriteInteger('Setup', 'PasswordErrorCountLock', g_Config.nPasswordErrorCountLock);
  g_Config.nPasswordErrorCountLock := Config.ReadInteger('Setup', 'PasswordErrorCountLock', g_Config.nPasswordErrorCountLock);

  if Config.ReadInteger('Setup', 'BatflyRate', -1) < 0 then
    Config.WriteInteger('Setup', 'BatflyRate', g_Config.BatflyRate);
  g_Config.BatflyRate := Config.ReadInteger('Setup', 'BatflyRate', g_Config.BatflyRate);

  if Config.ReadInteger('Setup', 'DiDingPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'DiDingPowerRate', g_Config.DiDingPowerRate);
  g_Config.DiDingPowerRate := Config.ReadInteger('Setup', 'DiDingPowerRate', g_Config.DiDingPowerRate);

  if Config.ReadInteger('Setup', 'DiDingAllowPK', -1) < 0 then
    Config.WriteBool('Setup', 'DiDingAllowPK', g_Config.DiDingAllowPK);
  g_Config.DiDingAllowPK := Config.ReadBool('Setup', 'DoMotaeboDelay', g_Config.DiDingAllowPK);


  if Config.ReadInteger('Setup', 'DiDingUseTime', -1) < 0 then
    Config.WriteInteger('Setup', 'DiDingUseTime', g_Config.DiDingUseTime);
  g_Config.DiDingUseTime := Config.ReadInteger('Setup', 'DiDingUseTime', g_Config.DiDingUseTime);
  if Config.ReadInteger('Setup', 'Skill88PowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'Skill88PowerRate', g_Config.Skill88PowerRate);
  g_Config.Skill88PowerRate := Config.ReadInteger('Setup', 'Skill88PowerRate', g_Config.Skill88PowerRate);

   if Config.ReadInteger('Setup', 'MagDefenceUpPerdureEx', -1) < 0 then
    Config.WriteInteger('Setup', 'MagDefenceUpPerdureEx', g_Config.MagDefenceUpPerdureEx);
  g_Config.MagDefenceUpPerdureEx := Config.ReadInteger('Setup', 'MagDefenceUpPerdureEx', g_Config.MagDefenceUpPerdureEx);


  if Config.ReadInteger('Setup', 'PDPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'PDPowerRate', g_Config.PDPowerRate);
  g_Config.PDPowerRate := Config.ReadInteger('Setup', 'PDPowerRate', g_Config.PDPowerRate);
  if Config.ReadInteger('Setup', 'PJPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'PJPowerRate', g_Config.PJPowerRate);
  g_Config.PJPowerRate := Config.ReadInteger('Setup', 'PJPowerRate', g_Config.PJPowerRate);

    nLoadInteger := Config.ReadInteger('Setup', 'NoDoubleFireHit', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'NoDoubleFireHit', g_Config.NoDoubleFireHit)
  else
    g_Config.NoDoubleFireHit := nLoadInteger = 1;
  if Config.ReadInteger('Setup', 'FireHitPowerRate', -1) < 0 then
    Config.WriteInteger('Setup', 'FireHitPowerRate', g_Config.FireHitPowerRate);
  g_Config.FireHitPowerRate := Config.ReadInteger('Setup', 'FireHitPowerRate', g_Config.FireHitPowerRate);











  if Config.ReadInteger('Setup', 'BatflyMaxRage', -1) < 0 then
    Config.WriteInteger('Setup', 'BatflyMaxRage', g_Config.BatflyMaxRage);
  g_Config.BatflyMaxRage := Config.ReadInteger('Setup', 'BatflyMaxRage', g_Config.BatflyMaxRage);

  if Config.ReadInteger('Setup', 'DoMotaeboDelay', -1) < 0 then
    Config.WriteInteger('Setup', 'DoMotaeboDelay', g_Config.DoMotaeboDelay);
  g_Config.DoMotaeboDelay := Config.ReadInteger('Setup', 'DoMotaeboDelay', g_Config.DoMotaeboDelay);


  if Config.ReadInteger('Setup', 'SoftVersionDate', -1) < 0 then
    Config.WriteInteger('Setup', 'SoftVersionDate', g_Config.nSoftVersionDate);
  g_Config.nSoftVersionDate := Config.ReadInteger('Setup', 'SoftVersionDate', g_Config.nSoftVersionDate);

  nLoadInteger := Config.ReadInteger('Setup', 'CanOldClientLogon', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'CanOldClientLogon', g_Config.boCanOldClientLogon)
  else
    g_Config.boCanOldClientLogon := nLoadInteger = 1;

  nLoadInteger := Config.ReadInteger('Setup', 'boUseSafeZoneLight', -1);
  if nLoadInteger < 0 then
    Config.WriteBool('Setup', 'boUseSafeZoneLight', g_Config.boUseSafeZoneLight)
  else
    g_Config.boUseSafeZoneLight := nLoadInteger = 1;

  if Config.ReadInteger('Setup', 'nUseSafeZoneLightType', -1) < 0 then
    Config.WriteInteger('Setup', 'nUseSafeZoneLightType', g_Config.nUseSafeZoneLightType);
  g_Config.nUseSafeZoneLightType := Config.ReadInteger('Setup', 'nUseSafeZoneLightType', g_Config.nUseSafeZoneLightType);

   if Config.ReadInteger('Setup', 'VitaLityAddSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'VitaLityAddSpeed', g_Config.VitaLityAddSpeed);
  g_Config.VitaLityAddSpeed := Config.ReadInteger('Setup', 'VitaLityAddSpeed', g_Config.VitaLityAddSpeed);


  if Config.ReadInteger('Setup', 'ConsoleShowUserCountTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ConsoleShowUserCountTime', g_Config.dwConsoleShowUserCountTime);
  g_Config.dwConsoleShowUserCountTime := Config.ReadInteger('Setup', 'ConsoleShowUserCountTime', g_Config.dwConsoleShowUserCountTime);

  if Config.ReadInteger('Setup', 'ShowLineNoticeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowLineNoticeTime', g_Config.dwShowLineNoticeTime);
  g_Config.dwShowLineNoticeTime := Config.ReadInteger('Setup', 'ShowLineNoticeTime', g_Config.dwShowLineNoticeTime);

  if Config.ReadInteger('Setup', 'ShowBannerNoticeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowBannerNoticeTime', g_Config.ShowBannerNoticeTime);
  g_Config.ShowBannerNoticeTime := Config.ReadInteger('Setup', 'ShowBannerNoticeTime', g_Config.ShowBannerNoticeTime);

  if Config.ReadInteger('Setup', 'HideBannerNoticeTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HideBannerNoticeTime', g_Config.HideBannerNoticeTime);
  g_Config.HideBannerNoticeTime := Config.ReadInteger('Setup', 'HideBannerNoticeTime', g_Config.HideBannerNoticeTime);


  if Config.ReadInteger('Setup', 'LineNoticeColor', -1) < 0 then
    Config.WriteInteger('Setup', 'LineNoticeColor', g_Config.nLineNoticeColor);
  g_Config.nLineNoticeColor := Config.ReadInteger('Setup', 'LineNoticeColor', g_Config.nLineNoticeColor);

  if Config.ReadInteger('Setup', 'ItemSpeedTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ItemSpeedTime', g_Config.ClientConf.btItemSpeed);
  g_Config.ClientConf.btItemSpeed := Config.ReadInteger('Setup', 'ItemSpeedTime', g_Config.ClientConf.btItemSpeed);

  if Config.ReadInteger('Setup', 'MaxHitMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxHitMsgCount', g_Config.nMaxHitMsgCount);
  g_Config.nMaxHitMsgCount := Config.ReadInteger('Setup', 'MaxHitMsgCount', g_Config.nMaxHitMsgCount);

  if Config.ReadInteger('Setup', 'MaxSpellMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSpellMsgCount', g_Config.nMaxSpellMsgCount);
  g_Config.nMaxSpellMsgCount := Config.ReadInteger('Setup', 'MaxSpellMsgCount', g_Config.nMaxSpellMsgCount);

  if Config.ReadInteger('Setup', 'MaxRunMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxRunMsgCount', g_Config.nMaxRunMsgCount);
  g_Config.nMaxRunMsgCount := Config.ReadInteger('Setup', 'MaxRunMsgCount', g_Config.nMaxRunMsgCount);

  if Config.ReadInteger('Setup', 'MaxWalkMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxWalkMsgCount', g_Config.nMaxWalkMsgCount);
  g_Config.nMaxWalkMsgCount := Config.ReadInteger('Setup', 'MaxWalkMsgCount', g_Config.nMaxWalkMsgCount);

  if Config.ReadInteger('Setup', 'MaxTurnMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxTurnMsgCount', g_Config.nMaxTurnMsgCount);
  g_Config.nMaxTurnMsgCount := Config.ReadInteger('Setup', 'MaxTurnMsgCount', g_Config.nMaxTurnMsgCount);

  if Config.ReadInteger('Setup', 'MaxSitDonwMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxSitDonwMsgCount', g_Config.nMaxSitDonwMsgCount);
  g_Config.nMaxSitDonwMsgCount := Config.ReadInteger('Setup', 'MaxSitDonwMsgCount', g_Config.nMaxSitDonwMsgCount);

  if Config.ReadInteger('Setup', 'MaxDigUpMsgCount', -1) < 0 then
    Config.WriteInteger('Setup', 'MaxDigUpMsgCount', g_Config.nMaxDigUpMsgCount);
  g_Config.nMaxDigUpMsgCount := Config.ReadInteger('Setup', 'MaxDigUpMsgCount', g_Config.nMaxDigUpMsgCount);


  if Config.ReadInteger('Setup', 'SpellSendUpdateMsg', -1) < 0 then
    Config.WriteBool('Setup', 'SpellSendUpdateMsg', g_Config.boSpellSendUpdateMsg);
  g_Config.boSpellSendUpdateMsg := Config.ReadBool('Setup', 'SpellSendUpdateMsg', g_Config.boSpellSendUpdateMsg);

  if Config.ReadInteger('Setup', 'ActionSendActionMsg', -1) < 0 then
    Config.WriteBool('Setup', 'ActionSendActionMsg', g_Config.boActionSendActionMsg);
  g_Config.boActionSendActionMsg := Config.ReadBool('Setup', 'ActionSendActionMsg', g_Config.boActionSendActionMsg);


  if Config.ReadInteger('Setup', 'OverSpeedKickCount', -1) < 0 then
    Config.WriteInteger('Setup', 'OverSpeedKickCount', g_Config.nOverSpeedKickCount);
  g_Config.nOverSpeedKickCount := Config.ReadInteger('Setup', 'OverSpeedKickCount', g_Config.nOverSpeedKickCount);

  if Config.ReadInteger('Setup', 'DropOverSpeed', -1) < 0 then
    Config.WriteInteger('Setup', 'DropOverSpeed', g_Config.dwDropOverSpeed);
  g_Config.dwDropOverSpeed := Config.ReadInteger('Setup', 'DropOverSpeed', g_Config.dwDropOverSpeed);

  if Config.ReadInteger('Setup', 'KickOverSpeed', -1) < 0 then
    Config.WriteBool('Setup', 'KickOverSpeed', g_Config.boKickOverSpeed);
  g_Config.boKickOverSpeed := Config.ReadBool('Setup', 'KickOverSpeed', g_Config.boKickOverSpeed);

  nLoadInteger := Config.ReadInteger('Setup', 'SpeedControlMode', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'SpeedControlMode', g_Config.btSpeedControlMode)
  else
    g_Config.btSpeedControlMode := nLoadInteger;

  if Config.ReadInteger('Setup', 'HitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'HitIntervalTime', g_Config.dwHitIntervalTime);
  g_Config.dwHitIntervalTime := Config.ReadInteger('Setup', 'HitIntervalTime', g_Config.dwHitIntervalTime);

  if Config.ReadInteger('Setup', 'MagicHitIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'MagicHitIntervalTime', g_Config.dwMagicHitIntervalTime);
  g_Config.dwMagicHitIntervalTime := Config.ReadInteger('Setup', 'MagicHitIntervalTime', g_Config.dwMagicHitIntervalTime);

  if Config.ReadInteger('Setup', 'RunIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RunIntervalTime', g_Config.dwRunIntervalTime);
  g_Config.dwRunIntervalTime := Config.ReadInteger('Setup', 'RunIntervalTime', g_Config.dwRunIntervalTime);

  if Config.ReadInteger('Setup', 'WalkIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'WalkIntervalTime', g_Config.dwWalkIntervalTime);
  g_Config.dwWalkIntervalTime := Config.ReadInteger('Setup', 'WalkIntervalTime', g_Config.dwWalkIntervalTime);

  if Config.ReadInteger('Setup', 'TurnIntervalTime', -1) < 0 then
    Config.WriteInteger('Setup', 'TurnIntervalTime', g_Config.dwTurnIntervalTime);
  g_Config.dwTurnIntervalTime := Config.ReadInteger('Setup', 'TurnIntervalTime', g_Config.dwTurnIntervalTime);

  if Config.ReadInteger('Setup', 'PushTEBOTime', -1) < 0 then
    Config.WriteInteger('Setup', 'PushTEBOTime', g_Config.PushTEBOTime);
  g_Config.PushTEBOTime := Config.ReadInteger('Setup', 'PushTEBOTime', g_Config.PushTEBOTime);

  if Config.ReadInteger('Setup', 'RushMotaeboTime', -1) < 0 then
    Config.WriteInteger('Setup', 'RushMotaeboTime', g_Config.RushMotaeboTime);
  g_Config.RushMotaeboTime := Config.ReadInteger('Setup', 'RushMotaeboTime', g_Config.RushMotaeboTime);

  if Config.ReadInteger('Setup', 'MagPowerDefenceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MagPowerDefenceRate', g_Config.nMagPowerDefenceRate);
  g_Config.nMagPowerDefenceRate := Config.ReadInteger('Setup', 'MagPowerDefenceRate', g_Config.nMagPowerDefenceRate);

  if Config.ReadInteger('Setup', 'MagBubbleDefenceRate', -1) < 0 then
    Config.WriteInteger('Setup', 'MagBubbleDefenceRate', g_Config.nMagBubbleDefenceRate);
  g_Config.nMagBubbleDefenceRate := Config.ReadInteger('Setup', 'MagBubbleDefenceRate', g_Config.nMagBubbleDefenceRate);

  if Config.ReadInteger('Setup', 'ShowHitHp', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowHitHp', g_Config.ShowHitHp);
  g_Config.ShowHitHp := Config.ReadInteger('Setup', 'ShowHitHp', g_Config.ShowHitHp);

  if Config.ReadInteger('Setup', 'SafeAreaHint', -1) < 0 then
    Config.WriteInteger('Setup', 'SafeAreaHint', g_Config.SafeAreaHint);
  g_Config.SafeAreaHint := Config.ReadInteger('Setup', 'SafeAreaHint', g_Config.SafeAreaHint);

  if Config.ReadInteger('Setup', 'GoldAddinBag', -1) < 0 then
    Config.WriteInteger('Setup', 'GoldAddinBag', g_Config.GoldAddinBag);
  g_Config.GoldAddinBag := Config.ReadInteger('Setup', 'GoldAddinBag', g_Config.GoldAddinBag);


  nLoadInteger := Config.ReadInteger('Setup', 'ControlActionInterval', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'ControlActionInterval', g_Config.boControlActionInterval);
  end
  else
  begin
    g_Config.boControlActionInterval := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlWalkHit', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'ControlWalkHit', g_Config.boControlWalkHit);
  end
  else
  begin
    g_Config.boControlWalkHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunLongHit', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'ControlRunLongHit', g_Config.boControlRunLongHit);
  end
  else
  begin
    g_Config.boControlRunLongHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunHit', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'ControlRunHit', g_Config.boControlRunHit);
  end
  else
  begin
    g_Config.boControlRunHit := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ControlRunMagic', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'ControlRunMagic', g_Config.boControlRunMagic);
  end
  else
  begin
    g_Config.boControlRunMagic := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ActionIntervalTime', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'ActionIntervalTime', g_Config.dwActionIntervalTime);
  end
  else
  begin
    g_Config.dwActionIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunLongHitIntervalTime', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'RunLongHitIntervalTime', g_Config.dwRunLongHitIntervalTime);
  end
  else
  begin
    g_Config.dwRunLongHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunHitIntervalTime', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'RunHitIntervalTime', g_Config.dwRunHitIntervalTime);
  end
  else
  begin
    g_Config.dwRunHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WalkHitIntervalTime', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WalkHitIntervalTime', g_Config.dwWalkHitIntervalTime);
  end
  else
  begin
    g_Config.dwWalkHitIntervalTime := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'RunMagicIntervalTime', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'RunMagicIntervalTime', g_Config.dwRunMagicIntervalTime);
  end
  else
  begin
    g_Config.dwRunMagicIntervalTime := nLoadInteger;
  end;

  if Config.ReadInteger('Setup', 'DisableStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableStruck', g_Config.boDisableStruck);
  g_Config.boDisableStruck := Config.ReadBool('Setup', 'DisableStruck', g_Config.boDisableStruck);

  if Config.ReadInteger('Setup', 'DisableSelfStruck', -1) < 0 then
    Config.WriteBool('Setup', 'DisableSelfStruck', g_Config.boDisableSelfStruck);
  g_Config.boDisableSelfStruck := Config.ReadBool('Setup', 'DisableSelfStruck', g_Config.boDisableSelfStruck);

  if Config.ReadInteger('Setup', 'StruckTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StruckTime', g_Config.dwStruckTime);
  g_Config.dwStruckTime := Config.ReadInteger('Setup', 'StruckTime', g_Config.dwStruckTime);

  nLoadInteger := Config.ReadInteger('Setup', 'AddUserItemNewValue', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'AddUserItemNewValue', g_Config.boAddUserItemNewValue);
  end
  else
  begin
    g_Config.boAddUserItemNewValue := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'TestSpeedMode', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'TestSpeedMode', g_Config.boTestSpeedMode);
  end
  else
  begin
    g_Config.boTestSpeedMode := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeUnLuckRate', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeUnLuckRate', g_Config.nWeaponMakeUnLuckRate);
  end
  else
  begin
    g_Config.nWeaponMakeUnLuckRate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint1', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint1', g_Config.nWeaponMakeLuckPoint1);
  end
  else
  begin
    g_Config.nWeaponMakeLuckPoint1 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2', g_Config.nWeaponMakeLuckPoint2);
  end
  else
  begin
    g_Config.nWeaponMakeLuckPoint2 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3', g_Config.nWeaponMakeLuckPoint3);
  end
  else
  begin
    g_Config.nWeaponMakeLuckPoint3 := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint2Rate', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint2Rate', g_Config.nWeaponMakeLuckPoint2Rate);
  end
  else
  begin
    g_Config.nWeaponMakeLuckPoint2Rate := nLoadInteger;
  end;
  nLoadInteger := Config.ReadInteger('Setup', 'WeaponMakeLuckPoint3Rate', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'WeaponMakeLuckPoint3Rate', g_Config.nWeaponMakeLuckPoint3Rate);
  end
  else
  begin
    g_Config.nWeaponMakeLuckPoint3Rate := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'CheckUserItemPlace', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteBool('Setup', 'CheckUserItemPlace', g_Config.boCheckUserItemPlace);
  end
  else
  begin
    g_Config.boCheckUserItemPlace := nLoadInteger = 1;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosHP', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosHP', g_Config.nLevelValueOfTaosHP);
  end
  else
  begin
    g_Config.nLevelValueOfTaosHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfTaosHPRate', 0);
  if nLoadFloat = 0 then
  begin
    Config.WriteFloat('Setup', 'LevelValueOfTaosHPRate', g_Config.nLevelValueOfTaosHPRate);
  end
  else
  begin
    g_Config.nLevelValueOfTaosHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfTaosMP', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'LevelValueOfTaosMP', g_Config.nLevelValueOfTaosMP);
  end
  else
  begin
    g_Config.nLevelValueOfTaosMP := nLoadInteger;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWizardHP', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'LevelValueOfWizardHP', g_Config.nLevelValueOfWizardHP);
  end
  else
  begin
    g_Config.nLevelValueOfWizardHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWizardHPRate', 0);
  if nLoadFloat = 0 then
  begin
    Config.WriteFloat('Setup', 'LevelValueOfWizardHPRate', g_Config.nLevelValueOfWizardHPRate);
  end
  else
  begin
    g_Config.nLevelValueOfWizardHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'LevelValueOfWarrHP', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'LevelValueOfWarrHP', g_Config.nLevelValueOfWarrHP);
  end
  else
  begin
    g_Config.nLevelValueOfWarrHP := nLoadInteger;
  end;

  nLoadFloat := Config.ReadFloat('Setup', 'LevelValueOfWarrHPRate', 0);
  if nLoadFloat = 0 then
  begin
    Config.WriteFloat('Setup', 'LevelValueOfWarrHPRate', g_Config.nLevelValueOfWarrHPRate);
  end
  else
  begin
    g_Config.nLevelValueOfWarrHPRate := nLoadFloat;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'ProcessMonsterInterval', -1);
  if nLoadInteger < 0 then
  begin
    Config.WriteInteger('Setup', 'ProcessMonsterInterval', g_Config.nProcessMonsterInterval);
  end
  else
  begin
    g_Config.nProcessMonsterInterval := nLoadInteger;
  end;

  if Config.ReadInteger('Setup', 'StartCastleWarDays', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastleWarDays', g_Config.nStartCastleWarDays);
  g_Config.nStartCastleWarDays := Config.ReadInteger('Setup', 'StartCastleWarDays', g_Config.nStartCastleWarDays);

  if Config.ReadInteger('Setup', 'StartCastlewarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'StartCastlewarTime', g_Config.nStartCastlewarTime);
  g_Config.nStartCastlewarTime := Config.ReadInteger('Setup', 'StartCastlewarTime', g_Config.nStartCastlewarTime);

  if Config.ReadInteger('Setup', 'ShowCastleWarEndMsgTime', -1) < 0 then
    Config.WriteInteger('Setup', 'ShowCastleWarEndMsgTime', g_Config.dwShowCastleWarEndMsgTime);
  g_Config.dwShowCastleWarEndMsgTime := Config.ReadInteger('Setup', 'ShowCastleWarEndMsgTime', g_Config.dwShowCastleWarEndMsgTime);

  if Config.ReadInteger('Setup', 'CastleWarTime', -1) < 0 then
    Config.WriteInteger('Setup', 'CastleWarTime', g_Config.dwCastleWarTime);
  g_Config.dwCastleWarTime := Config.ReadInteger('Setup', 'CastleWarTime', g_Config.dwCastleWarTime);

  nLoadInteger := Config.ReadInteger('Setup', 'GetCastleTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GetCastleTime', g_Config.dwGetCastleTime)
  else
    g_Config.dwGetCastleTime := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'GuildWarTime', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'GuildWarTime', g_Config.dwGuildWarTime)
  else
    g_Config.dwGuildWarTime := nLoadInteger;

  for I := Low(g_Config.GlobalVal) to High(g_Config.GlobalVal) do
  begin
    nLoadInteger := Config.ReadInteger('Setup', 'GlobalVal' + IntToStr(I), -1);
    if nLoadInteger < 0 then
      Config.WriteInteger('Setup', 'GlobalVal' + IntToStr(I), g_Config.GlobalVal[I])
    else
      g_Config.GlobalVal[I] := nLoadInteger;
  end;

  for I := Low(g_Config.Globalstr) to High(g_Config.Globalstr) do
  begin
    sLoadString := Config.Readstring('Setup', 'Globalstr' + IntToStr(I), '');
    if sLoadString = '' then
      Config.Writestring('Setup', 'Globalstr' + IntToStr(I), g_Config.Globalstr[I])
    else
      g_Config.Globalstr[I] := sLoadString;
  end;

  for I := Low(g_Config.GlobalstrA) to High(g_Config.GlobalstrA) do
  begin
    sLoadString := Config.Readstring('Setup', 'GlobaStrVal' + IntToStr(I), '');
    if sLoadString = '' then
      Config.Writestring('Setup', 'GlobaStrVal' + IntToStr(I), g_Config.GlobalstrA[I])
    else
      g_Config.GlobalstrA[I] := sLoadString;
  end;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryCount', g_Config.nWinLotteryCount)
  else
    g_Config.nWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'NoWinLotteryCount', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'NoWinLotteryCount', g_Config.nNoWinLotteryCount)
  else
    g_Config.nNoWinLotteryCount := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel1', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel1', g_Config.nWinLotteryLevel1)
  else
    g_Config.nWinLotteryLevel1 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel2', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel2', g_Config.nWinLotteryLevel2)
  else
    g_Config.nWinLotteryLevel2 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel3', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel3', g_Config.nWinLotteryLevel3)
  else
    g_Config.nWinLotteryLevel3 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel4', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel4', g_Config.nWinLotteryLevel4)
  else
    g_Config.nWinLotteryLevel4 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel5', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel5', g_Config.nWinLotteryLevel5)
  else
    g_Config.nWinLotteryLevel5 := nLoadInteger;

  nLoadInteger := Config.ReadInteger('Setup', 'WinLotteryLevel6', -1);
  if nLoadInteger < 0 then
    Config.WriteInteger('Setup', 'WinLotteryLevel6', g_Config.nWinLotteryLevel6)
  else
    g_Config.nWinLotteryLevel6 := nLoadInteger;


end;

function GetRGB(c256: Byte): TColor;
begin
  Result := RGB(ColorTable[c256].rgbRed, ColorTable[c256].rgbGreen, ColorTable[c256].rgbBlue);
//Result :=RGB(255,c256,255);
end;

procedure SendSelfMsg(wIdent: Word; sSendMsg: string);
var
  SendData: TCopyDataStruct;
  nParam: Integer;
begin
  nParam := MakeLong(Word(0), wIdent);
  SendData.cbData := Length(sSendMsg) + 1;
  GetMem(SendData.lpData, SendData.cbData);
  StrCopy(SendData.lpData, PChar(sSendMsg));
  sendMessage(g_dwSelfHandle, WM_COPYDATA, nParam, Cardinal(@SendData)); //sendMessage
  FreeMem(SendData.lpData);
end;

procedure SendGameCenterMsg(wIdent: Word; sSendMsg: string);
var
  SendData: TCopyDataStruct;
  nParam: Integer;
begin
  nParam := MakeLong(Word(tM2Server), wIdent);
  SendData.cbData := Length(sSendMsg) + 1;
  GetMem(SendData.lpData, SendData.cbData);
  StrCopy(SendData.lpData, PChar(sSendMsg));
  SendMessage(g_dwGameCenterHandle, WM_COPYDATA, nParam, Cardinal(@SendData));
  FreeMem(SendData.lpData);
end;

function GetIPLocal(sIPaddr: string): string;
var
  slIPData: TStringlist;
  IPRecordID: int64;
begin
  try
      Result := '未知';
      if (QQWry<>nil)and(IsIPaddr(sIPaddr)) then
      Begin
        IPRecordID:=QQWry.GetIPDataID(sIPaddr);
        slIPData:=TStringlist.Create;
        QQWry.GetIPDataByIPRecordID(IPRecordID, slIPData);
        if slIPData.Count>=3 then
          Result:=slIPData[2];
        slIPData.Free;
      end;
  except
    Result := '未知！！！';
    if QQWry<>nil then
       QQWry.Free;
    if FileExists('.\IPList.db') then
       QQWry:=TQQWry.Create('.\IPList.db')
    else
       QQWry:=nil;       

  end;
end;

procedure LoadKernelFunction();
var
  DllModule: THandle;
begin
  DllModule := LoadLibrary('kernel32.dll');
  IsDebuggerPresent := GetProcAddress(DllModule, PChar(DecodeStringMIR('NSI@UREqUrYaXa=nUSIaWcL'))); //'IsDebuggerPresent'
end;

procedure ExportProc();
begin
  AddToProcTable(@GetRGB, PN_GETRGB);

  nAddGameDataLog := AddToPulgProcTable(PN_GAMEDATALOG);
end;

procedure GetLicenseInfo();
type
  TGetLicense = function(var nDay: Integer; var nM2Crc: Integer): Integer; stdcall;
var
  nDay, nM2Crc: Integer;
  nUserCount: Integer;
begin
  if (g_nGetLicenseInfo >= 0) and Assigned(PlugProcArray[g_nGetLicenseInfo].nProcAddr) then
  begin
    nUserCount := TGetLicense(PlugProcArray[g_nGetLicenseInfo].nProcAddr)(nDay, nM2Crc);
  end;
end;
//是否记录物品日志
//返回 FALSE 为记录
//返回 TRUE  为不记录

function IsCheapStuff(tByte: Byte): Boolean; //004B2FA8
begin
  if tByte < 0 then
    Result := True
  else
    Result := False;
end;


function GetEvilAppr(nAppr:Integer):pTEvilMonAppr;
var

  pEvilMonAppr  : pTEvilMonAppr;
  i             : Integer;
begin
   Result:=nil;
   for I := 0 to g_EvilApprList.Count - 1 do
   begin
     pEvilMonAppr:=pTEvilMonAppr(g_EvilApprList[i]);
     if (pEvilMonAppr<>nil)and(pEvilMonAppr.nAppr=nAppr) then
     begin
        Result:=pEvilMonAppr;
        Break;
     end;
   end;

end;
//sIPaddr 为当前IP
//dIPaddr 为要比较的IP
//* 号为通配符

function CompareIPaddr(sIPaddr, dIPaddr: string): Boolean;
var
  nPos: Integer;
begin
  Result := False;
  if (sIPaddr = '') or (dIPaddr = '') then
    exit;

  if (dIPaddr[1] = '*') then
  begin
    Result := True;
    exit;
  end;

  nPos := Pos('*', dIPaddr);
  if nPos > 0 then
  begin
    Result := CompareLStr(sIPaddr, dIPaddr, nPos - 1);
  end
  else
  begin
    Result := CompareText(sIPaddr, dIPaddr) = 0;
  end;
end;
procedure SeparateTerms(s : string;Separator : char;Terms : TStringList);
{ This browses a string and divide it into terms whenever the given
  separator is found. The separators will be removed }
  var
  hs : string;
  p : integer;

begin
  Terms.Clear; // First remove all remaining terms
  if Length(s)=0 then   // Nothin' to separate
    Exit;
  p:=Pos(Separator,s);
  while P<>0 do
  begin
    hs:=Copy(s,1,p-1);   // Copy term
    Terms.Add(hs);       // Add to list
    Delete(s,1,p);       // Remove term and separator
    p:=Pos(Separator,s); // Search next separator
  end;
  if Length(s)>0 then
    Terms.Add(s);        // Add remaining term
end;

procedure LoadQuestion();
var
  pquestion :pTquestion;
  i,ii :Integer;
  sList,ssList:TStringList;
  str,stemp:string;
begin
    g_QusetionList:=TList.Create;
    sList:=TStringList.Create;
    ssList:=TStringList.Create;
   try
    if FileExists( g_Config.sEnvirDir+'answer.txt') then
    Begin
       sList.LoadFromFile( g_Config.sEnvirDir+'answer.txt');
       for I := 0 to sList.Count - 1 do
       begin
         str:=Trim(sList[i]);
         if str<>'' then
         begin
           if str[1]=';' then Continue;
           SeparateTerms(str,#9,ssList);
           if sslist.Count<>11 then Continue;
           New(pquestion);
           pquestion.sId:=ssList[0];
           pquestion.sQuestion:=ssList[2];
           for ii := 0 to 6 do
             pquestion.sAnswer[ii]:=ssList[ii+3];
           pquestion.sAnswerOK:=ssList[10];
           g_QusetionList.Add(pquestion);
         end;
       end;
    End;
   finally
     ssList.Free;
     sList.Free;
   end;

end;
initialization
  begin
    Config := TIniFile.Create(sConfigFileName);
    CommandConf := TIniFile.Create(sCommandFileName);
    StringConf := TIniFile.Create(sStringFileName);

{$IF OEMVER = OEM775}
    Level775 := TIniFile.Create(sConfig775FileName);
{$IFEND}
  //CertCheck:=TList.Create;
  //EventCheck:=TList.Create;

    Move(ColorArray, ColorTable, SizeOf(ColorArray));
    nCheckVersion := AddToPulgProcTable(DecodeStringmir('Q`QNMPuP') {'VERENT'});
    g_nGetLicenseInfo := AddToPulgProcTable(DecodeStringmir('MrQpOBa_URuoUPajUbx') {'GetLicenseInfo'});
    nIPLocal := AddToPulgProcTable(DecodeStringmir('MrQpNQ=HWrI]W<') {'GetIPLocal'});
    if FileExists('.\IPList.db') then
       QQWry:=TQQWry.Create('.\IPList.db')
    else
       QQWry:=nil;
    AddToObjTable(@g_Config.nUserFull, 'UserFull');
    AddToObjTable(@g_Config.nClientKey, 'ClientKey');
    LoadKernelFunction();
    ExportProc();
  end;

finalization
  begin
    Config.Free;
    CommandConf.Free;
    StringConf.Free;
    if  QQWry<>nil then
     QQWry.Destroy;
{$IF OEMVER = OEM775}
    Level775.Free;
{$IFEND}
  //CertCheck.Free;
  //EventCheck.Free;
  end;

end.

